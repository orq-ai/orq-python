"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel
import pydantic
from typing import Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


TwentyThree = Literal["jina/jina-embeddings-v3",]


TwentyTwo = Literal["jina/jina-clip-v2",]


TwentyOne = Literal["jina/jina-embeddings-v2-base-de",]


Twenty = Literal["jina/jina-embeddings-v2-base-code",]


Nineteen = Literal["jina/jina-embeddings-v2-base-zh",]


Eighteen = Literal["jina/jina-embeddings-v2-base-en",]


Seventeen = Literal["jina/jina-embeddings-v2-base-es",]


Sixteen = Literal["jina/jina-clip-v1",]


Fifteen = Literal["mistral/mistral-embed",]


Fourteen = Literal["google-ai/text-embedding-004",]


Thirteen = Literal["google/multimodalembedding@001",]


Twelve = Literal["google/text-multilingual-embedding-002",]


Eleven = Literal["google/gemini-embedding-001",]


Ten = Literal["openai/text-embedding-ada-002",]


Nine = Literal["openai/text-embedding-3-small",]


Eight = Literal["openai/text-embedding-3-large",]


Seven = Literal["azure/text-embedding-3-small",]


Six = Literal["azure/text-embedding-ada-002",]


Five = Literal["cohere/embed-v4.0",]


Model4 = Literal["cohere/embed-english-v3.0",]


Model3 = Literal["cohere/embed-english-light-v3.0",]


Model2 = Literal["cohere/embed-multilingual-light-v3.0",]


Model1 = Literal["cohere/embed-multilingual-v3.0",]


ModelTypedDict = TypeAliasType(
    "ModelTypedDict",
    Union[
        Model1,
        Model2,
        Model3,
        Model4,
        Five,
        Six,
        Seven,
        Eight,
        Nine,
        Ten,
        Eleven,
        Twelve,
        Thirteen,
        Fourteen,
        Fifteen,
        Sixteen,
        Seventeen,
        Eighteen,
        Nineteen,
        Twenty,
        TwentyOne,
        TwentyTwo,
        TwentyThree,
    ],
)


Model = TypeAliasType(
    "Model",
    Union[
        Model1,
        Model2,
        Model3,
        Model4,
        Five,
        Six,
        Seven,
        Eight,
        Nine,
        Ten,
        Eleven,
        Twelve,
        Thirteen,
        Fourteen,
        Fifteen,
        Sixteen,
        Seventeen,
        Eighteen,
        Nineteen,
        Twenty,
        TwentyOne,
        TwentyTwo,
        TwentyThree,
    ],
)


class EmbeddingConfigTypedDict(TypedDict):
    model: ModelTypedDict


class EmbeddingConfig(BaseModel):
    model: Model


class CreateMemoryStoreRequestBodyTypedDict(TypedDict):
    key: str
    r"""The unique key of the memory store. The key is unique and inmmutable and cannot be repeated within the same workspace."""
    embedding_config: EmbeddingConfigTypedDict
    description: str
    r"""The description of the memory store. Be as precise as possible to help the AI to understand the purpose of the memory store."""
    path: str
    r"""Entity storage path in the format: `project/folder/subfolder/...`

    The first element identifies the project, followed by nested folders (auto-created as needed).

    With project-based API keys, the first element is treated as a folder name, as the project is predetermined by the API key.
    """
    ttl: NotRequired[float]
    r"""The default time to live of every memory document created within the memory store. Useful to control if the documents in the memory should be store for short or long term."""


class CreateMemoryStoreRequestBody(BaseModel):
    key: str
    r"""The unique key of the memory store. The key is unique and inmmutable and cannot be repeated within the same workspace."""

    embedding_config: EmbeddingConfig

    description: str
    r"""The description of the memory store. Be as precise as possible to help the AI to understand the purpose of the memory store."""

    path: str
    r"""Entity storage path in the format: `project/folder/subfolder/...`

    The first element identifies the project, followed by nested folders (auto-created as needed).

    With project-based API keys, the first element is treated as a folder name, as the project is predetermined by the API key.
    """

    ttl: Optional[float] = None
    r"""The default time to live of every memory document created within the memory store. Useful to control if the documents in the memory should be store for short or long term."""


CreateMemoryStoreModel23 = Literal["jina/jina-embeddings-v3",]


CreateMemoryStoreModel22 = Literal["jina/jina-clip-v2",]


CreateMemoryStoreModel21 = Literal["jina/jina-embeddings-v2-base-de",]


CreateMemoryStoreModel20 = Literal["jina/jina-embeddings-v2-base-code",]


CreateMemoryStoreModel19 = Literal["jina/jina-embeddings-v2-base-zh",]


CreateMemoryStoreModel18 = Literal["jina/jina-embeddings-v2-base-en",]


CreateMemoryStoreModel17 = Literal["jina/jina-embeddings-v2-base-es",]


CreateMemoryStoreModel16 = Literal["jina/jina-clip-v1",]


CreateMemoryStoreModel15 = Literal["mistral/mistral-embed",]


CreateMemoryStoreModel14 = Literal["google-ai/text-embedding-004",]


CreateMemoryStoreModel13 = Literal["google/multimodalembedding@001",]


CreateMemoryStoreModel12 = Literal["google/text-multilingual-embedding-002",]


CreateMemoryStoreModel11 = Literal["google/gemini-embedding-001",]


CreateMemoryStoreModel10 = Literal["openai/text-embedding-ada-002",]


CreateMemoryStoreModel9 = Literal["openai/text-embedding-3-small",]


CreateMemoryStoreModel8 = Literal["openai/text-embedding-3-large",]


CreateMemoryStoreModel7 = Literal["azure/text-embedding-3-small",]


CreateMemoryStoreModel6 = Literal["azure/text-embedding-ada-002",]


CreateMemoryStoreModel5 = Literal["cohere/embed-v4.0",]


CreateMemoryStoreModel4 = Literal["cohere/embed-english-v3.0",]


CreateMemoryStoreModel3 = Literal["cohere/embed-english-light-v3.0",]


CreateMemoryStoreModel2 = Literal["cohere/embed-multilingual-light-v3.0",]


CreateMemoryStoreModel1 = Literal["cohere/embed-multilingual-v3.0",]


CreateMemoryStoreModelTypedDict = TypeAliasType(
    "CreateMemoryStoreModelTypedDict",
    Union[
        CreateMemoryStoreModel1,
        CreateMemoryStoreModel2,
        CreateMemoryStoreModel3,
        CreateMemoryStoreModel4,
        CreateMemoryStoreModel5,
        CreateMemoryStoreModel6,
        CreateMemoryStoreModel7,
        CreateMemoryStoreModel8,
        CreateMemoryStoreModel9,
        CreateMemoryStoreModel10,
        CreateMemoryStoreModel11,
        CreateMemoryStoreModel12,
        CreateMemoryStoreModel13,
        CreateMemoryStoreModel14,
        CreateMemoryStoreModel15,
        CreateMemoryStoreModel16,
        CreateMemoryStoreModel17,
        CreateMemoryStoreModel18,
        CreateMemoryStoreModel19,
        CreateMemoryStoreModel20,
        CreateMemoryStoreModel21,
        CreateMemoryStoreModel22,
        CreateMemoryStoreModel23,
    ],
)


CreateMemoryStoreModel = TypeAliasType(
    "CreateMemoryStoreModel",
    Union[
        CreateMemoryStoreModel1,
        CreateMemoryStoreModel2,
        CreateMemoryStoreModel3,
        CreateMemoryStoreModel4,
        CreateMemoryStoreModel5,
        CreateMemoryStoreModel6,
        CreateMemoryStoreModel7,
        CreateMemoryStoreModel8,
        CreateMemoryStoreModel9,
        CreateMemoryStoreModel10,
        CreateMemoryStoreModel11,
        CreateMemoryStoreModel12,
        CreateMemoryStoreModel13,
        CreateMemoryStoreModel14,
        CreateMemoryStoreModel15,
        CreateMemoryStoreModel16,
        CreateMemoryStoreModel17,
        CreateMemoryStoreModel18,
        CreateMemoryStoreModel19,
        CreateMemoryStoreModel20,
        CreateMemoryStoreModel21,
        CreateMemoryStoreModel22,
        CreateMemoryStoreModel23,
    ],
)


class CreateMemoryStoreEmbeddingConfigTypedDict(TypedDict):
    model: CreateMemoryStoreModelTypedDict


class CreateMemoryStoreEmbeddingConfig(BaseModel):
    model: CreateMemoryStoreModel


class CreateMemoryStoreResponseBodyTypedDict(TypedDict):
    r"""Memory store successfully created with the specified configuration."""

    id: str
    r"""The unique identifier of the memory store"""
    key: str
    r"""The unique key of the memory store. The key is unique and inmmutable and cannot be repeated within the same workspace."""
    description: str
    r"""The description of the memory store. Be as precise as possible to help the AI to understand the purpose of the memory store."""
    created: str
    r"""The creation date of the memory store"""
    updated: str
    r"""The last update date of the memory store"""
    embedding_config: CreateMemoryStoreEmbeddingConfigTypedDict
    created_by_id: NotRequired[str]
    r"""The user ID of the creator"""
    updated_by_id: NotRequired[str]
    r"""The user ID of the last updater"""
    ttl: NotRequired[float]
    r"""The default time to live of every memory document created within the memory store. Useful to control if the documents in the memory should be store for short or long term."""


class CreateMemoryStoreResponseBody(BaseModel):
    r"""Memory store successfully created with the specified configuration."""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""The unique identifier of the memory store"""

    key: str
    r"""The unique key of the memory store. The key is unique and inmmutable and cannot be repeated within the same workspace."""

    description: str
    r"""The description of the memory store. Be as precise as possible to help the AI to understand the purpose of the memory store."""

    created: str
    r"""The creation date of the memory store"""

    updated: str
    r"""The last update date of the memory store"""

    embedding_config: CreateMemoryStoreEmbeddingConfig

    created_by_id: Optional[str] = None
    r"""The user ID of the creator"""

    updated_by_id: Optional[str] = None
    r"""The user ID of the last updater"""

    ttl: Optional[float] = None
    r"""The default time to live of every memory document created within the memory store. Useful to control if the documents in the memory should be store for short or long term."""
