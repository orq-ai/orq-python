"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dataclasses import dataclass, field
import httpx
from orq_ai_sdk.models import OrqError
from orq_ai_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET_SENTINEL
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class DuplicateToolRequestTypedDict(TypedDict):
    key: str
    r"""The key of the tool to duplicate"""


class DuplicateToolRequest(BaseModel):
    key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The key of the tool to duplicate"""


class DuplicateToolToolsResponseBodyData(BaseModel):
    error: str
    r"""Error message"""


@dataclass(frozen=True)
class DuplicateToolToolsResponseBody(OrqError):
    r"""Tool not found."""

    data: DuplicateToolToolsResponseBodyData = field(hash=False)

    def __init__(
        self,
        data: DuplicateToolToolsResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)


DuplicateToolResponseBodyToolsResponse200ApplicationJSONStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


DuplicateToolResponseBodyToolsResponse200ApplicationJSONType = Literal["code",]


DuplicateToolResponseBodyLanguage = Literal["python",]


class DuplicateToolResponseBodyCodeToolTypedDict(TypedDict):
    language: DuplicateToolResponseBodyLanguage
    code: str
    r"""The code to execute."""
    parameters: NotRequired[Dict[str, Any]]
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class DuplicateToolResponseBodyCodeTool(BaseModel):
    language: DuplicateToolResponseBodyLanguage

    code: str
    r"""The code to execute."""

    parameters: Optional[Dict[str, Any]] = None
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class DuplicateToolResponseBody5TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: DuplicateToolResponseBodyToolsResponse200ApplicationJSONType
    code_tool: DuplicateToolResponseBodyCodeToolTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[DuplicateToolResponseBodyToolsResponse200ApplicationJSONStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class DuplicateToolResponseBody5(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: DuplicateToolResponseBodyToolsResponse200ApplicationJSONType

    code_tool: DuplicateToolResponseBodyCodeTool

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K62YGYG41XJP1QYWJEC0W6TW"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[DuplicateToolResponseBodyToolsResponse200ApplicationJSONStatus] = (
        "live"
    )
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


DuplicateToolResponseBodyToolsResponse200Status = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


DuplicateToolResponseBodyToolsResponse200Type = Literal["mcp",]


class DuplicateToolResponseBodyHeadersTypedDict(TypedDict):
    value: str
    encrypted: NotRequired[bool]


class DuplicateToolResponseBodyHeaders(BaseModel):
    value: str

    encrypted: Optional[bool] = False


DuplicateToolResponseBodyToolsResponse200ApplicationJSON4Type = Literal["object",]


class DuplicateToolResponseBodyInputSchemaTypedDict(TypedDict):
    r"""The original MCP tool input schema for LLM conversion"""

    type: DuplicateToolResponseBodyToolsResponse200ApplicationJSON4Type
    properties: NotRequired[Dict[str, Any]]
    required: NotRequired[List[str]]


class DuplicateToolResponseBodyInputSchema(BaseModel):
    r"""The original MCP tool input schema for LLM conversion"""

    type: DuplicateToolResponseBodyToolsResponse200ApplicationJSON4Type

    properties: Optional[Dict[str, Any]] = None

    required: Optional[List[str]] = None


DuplicateToolResponseBodyConnectionType = Literal[
    "http",
    "sse",
]
r"""The connection type used by the MCP server"""


class DuplicateToolResponseBodyMcpTypedDict(TypedDict):
    server_id: str
    r"""The ID of the MCP server this tool belongs to"""
    tool_name: str
    r"""The original tool name from the MCP server"""
    server_url: str
    r"""The MCP server URL (cached for execution)"""
    input_schema: DuplicateToolResponseBodyInputSchemaTypedDict
    r"""The original MCP tool input schema for LLM conversion"""
    connection_type: DuplicateToolResponseBodyConnectionType
    r"""The connection type used by the MCP server"""
    headers: NotRequired[Dict[str, DuplicateToolResponseBodyHeadersTypedDict]]
    r"""HTTP headers for MCP server requests (encrypted format)"""


class DuplicateToolResponseBodyMcp(BaseModel):
    server_id: str
    r"""The ID of the MCP server this tool belongs to"""

    tool_name: str
    r"""The original tool name from the MCP server"""

    server_url: str
    r"""The MCP server URL (cached for execution)"""

    input_schema: DuplicateToolResponseBodyInputSchema
    r"""The original MCP tool input schema for LLM conversion"""

    connection_type: DuplicateToolResponseBodyConnectionType
    r"""The connection type used by the MCP server"""

    headers: Optional[Dict[str, DuplicateToolResponseBodyHeaders]] = None
    r"""HTTP headers for MCP server requests (encrypted format)"""


class DuplicateToolResponseBody4TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: DuplicateToolResponseBodyToolsResponse200Type
    mcp: DuplicateToolResponseBodyMcpTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[DuplicateToolResponseBodyToolsResponse200Status]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class DuplicateToolResponseBody4(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: DuplicateToolResponseBodyToolsResponse200Type

    mcp: DuplicateToolResponseBodyMcp

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K62YGYG3JM367APTNDEH7Q4Q"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[DuplicateToolResponseBodyToolsResponse200Status] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


DuplicateToolResponseBodyToolsResponseStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


DuplicateToolResponseBodyToolsResponseType = Literal["http",]


DuplicateToolResponseBodyMethod = Literal[
    "GET",
    "POST",
    "PUT",
    "DELETE",
]
r"""The HTTP method to use."""


class DuplicateToolResponseBodyBlueprintTypedDict(TypedDict):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""
    method: DuplicateToolResponseBodyMethod
    r"""The HTTP method to use."""
    headers: NotRequired[Dict[str, str]]
    r"""The headers to send with the request."""
    body: NotRequired[Dict[str, Any]]
    r"""The body to send with the request."""


class DuplicateToolResponseBodyBlueprint(BaseModel):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""

    method: DuplicateToolResponseBodyMethod
    r"""The HTTP method to use."""

    headers: Optional[Dict[str, str]] = None
    r"""The headers to send with the request."""

    body: Optional[Dict[str, Any]] = None
    r"""The body to send with the request."""


DuplicateToolResponseBodyToolsResponse200ApplicationJSON3Type = Literal[
    "string",
    "number",
    "boolean",
]
r"""The type of the argument."""


DuplicateToolResponseBodyDefaultValueTypedDict = TypeAliasType(
    "DuplicateToolResponseBodyDefaultValueTypedDict", Union[str, float, bool]
)
r"""The default value of the argument."""


DuplicateToolResponseBodyDefaultValue = TypeAliasType(
    "DuplicateToolResponseBodyDefaultValue", Union[str, float, bool]
)
r"""The default value of the argument."""


class DuplicateToolResponseBodyArgumentsTypedDict(TypedDict):
    type: DuplicateToolResponseBodyToolsResponse200ApplicationJSON3Type
    r"""The type of the argument."""
    description: str
    r"""A description of the argument."""
    send_to_model: NotRequired[bool]
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""
    default_value: NotRequired[DuplicateToolResponseBodyDefaultValueTypedDict]
    r"""The default value of the argument."""


class DuplicateToolResponseBodyArguments(BaseModel):
    type: DuplicateToolResponseBodyToolsResponse200ApplicationJSON3Type
    r"""The type of the argument."""

    description: str
    r"""A description of the argument."""

    send_to_model: Optional[bool] = True
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""

    default_value: Optional[DuplicateToolResponseBodyDefaultValue] = None
    r"""The default value of the argument."""


class DuplicateToolResponseBodyHTTPTypedDict(TypedDict):
    blueprint: DuplicateToolResponseBodyBlueprintTypedDict
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""
    arguments: NotRequired[Dict[str, DuplicateToolResponseBodyArgumentsTypedDict]]
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class DuplicateToolResponseBodyHTTP(BaseModel):
    blueprint: DuplicateToolResponseBodyBlueprint
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    arguments: Optional[Dict[str, DuplicateToolResponseBodyArguments]] = None
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class DuplicateToolResponseBody3TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: DuplicateToolResponseBodyToolsResponseType
    http: DuplicateToolResponseBodyHTTPTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[DuplicateToolResponseBodyToolsResponseStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class DuplicateToolResponseBody3(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: DuplicateToolResponseBodyToolsResponseType

    http: DuplicateToolResponseBodyHTTP

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K62YGYG3BWWJX6BVA8RJ0HWF"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[DuplicateToolResponseBodyToolsResponseStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


DuplicateToolResponseBodyToolsStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


DuplicateToolResponseBodyToolsType = Literal["json_schema",]


class DuplicateToolResponseBodyJSONSchemaTypedDict(TypedDict):
    name: str
    r"""The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    schema_: Dict[str, Any]
    r"""The schema for the response format, described as a JSON Schema object. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""
    description: NotRequired[str]
    r"""A description of what the response format is for. This will be shown to the user."""
    strict: NotRequired[Nullable[bool]]
    r"""Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. Only compatible with `OpenAI` models."""


class DuplicateToolResponseBodyJSONSchema(BaseModel):
    name: str
    r"""The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""

    schema_: Annotated[Dict[str, Any], pydantic.Field(alias="schema")]
    r"""The schema for the response format, described as a JSON Schema object. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""

    description: Optional[str] = None
    r"""A description of what the response format is for. This will be shown to the user."""

    strict: OptionalNullable[bool] = False
    r"""Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. Only compatible with `OpenAI` models."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description", "strict"]
        nullable_fields = ["strict"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class DuplicateToolResponseBody2TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: DuplicateToolResponseBodyToolsType
    json_schema: DuplicateToolResponseBodyJSONSchemaTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[DuplicateToolResponseBodyToolsStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class DuplicateToolResponseBody2(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: DuplicateToolResponseBodyToolsType

    json_schema: DuplicateToolResponseBodyJSONSchema

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K62YGYG3DE9X2M5ETPC0EB1T"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[DuplicateToolResponseBodyToolsStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


DuplicateToolResponseBodyStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


DuplicateToolResponseBodyType = Literal["function",]


class DuplicateToolResponseBodyFunctionTypedDict(TypedDict):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    description: NotRequired[str]
    r"""A description of what the function does, used by the model to choose when and how to call the function."""
    strict: NotRequired[bool]
    r"""Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models."""
    parameters: NotRequired[Dict[str, Any]]
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class DuplicateToolResponseBodyFunction(BaseModel):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""

    description: Optional[str] = None
    r"""A description of what the function does, used by the model to choose when and how to call the function."""

    strict: Optional[bool] = None
    r"""Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models."""

    parameters: Optional[Dict[str, Any]] = None
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class DuplicateToolResponseBody1TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: DuplicateToolResponseBodyType
    function: DuplicateToolResponseBodyFunctionTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[DuplicateToolResponseBodyStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class DuplicateToolResponseBody1(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: DuplicateToolResponseBodyType

    function: DuplicateToolResponseBodyFunction

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K62YGYG2REPJWTMT48X7X7C1"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[DuplicateToolResponseBodyStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


DuplicateToolResponseBodyTypedDict = TypeAliasType(
    "DuplicateToolResponseBodyTypedDict",
    Union[
        DuplicateToolResponseBody1TypedDict,
        DuplicateToolResponseBody2TypedDict,
        DuplicateToolResponseBody3TypedDict,
        DuplicateToolResponseBody4TypedDict,
        DuplicateToolResponseBody5TypedDict,
    ],
)
r"""Successfully duplicated the tool."""


DuplicateToolResponseBody = TypeAliasType(
    "DuplicateToolResponseBody",
    Union[
        DuplicateToolResponseBody1,
        DuplicateToolResponseBody2,
        DuplicateToolResponseBody3,
        DuplicateToolResponseBody4,
        DuplicateToolResponseBody5,
    ],
)
r"""Successfully duplicated the tool."""
