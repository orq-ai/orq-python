"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel
import pydantic
from typing import Any, Dict, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


FunctionToolType = Literal["function",]


class FunctionTypedDict(TypedDict):
    name: str
    description: NotRequired[str]
    strict: NotRequired[bool]
    parameters: NotRequired[Dict[str, Any]]


class Function(BaseModel):
    name: str

    description: Optional[str] = None

    strict: Optional[bool] = None

    parameters: Optional[Dict[str, Any]] = None


class FunctionToolTypedDict(TypedDict):
    r"""Custom function tool with configurable parameters"""

    type: FunctionToolType
    key: str
    function: FunctionTypedDict
    id: NotRequired[str]
    display_name: NotRequired[str]
    description: NotRequired[str]
    requires_approval: NotRequired[bool]


class FunctionTool(BaseModel):
    r"""Custom function tool with configurable parameters"""

    type: FunctionToolType

    key: str

    function: Function

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None

    display_name: Optional[str] = None

    description: Optional[str] = None

    requires_approval: Optional[bool] = False
