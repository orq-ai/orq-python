"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET_SENTINEL
from orq_ai_sdk.utils import FieldMetadata
from pydantic import model_serializer
from typing import Any, List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


PostV2ProxyImagesVariationsResponseFormat = Literal["url", "b64_json"]
r"""The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated."""

Size = Literal["256x256", "512x512", "1024x1024"]
r"""The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."""


class PostV2ProxyImagesVariationsRequestBodyTypedDict(TypedDict):
    r"""input"""

    image: Any
    r"""The image to edit. Must be a supported image file. It should be a png, webp, or jpg file less than 50MB."""
    model: str
    r"""The model to use for image generation."""
    n: NotRequired[Nullable[int]]
    r"""The number of images to generate. Must be between 1 and 10."""
    response_format: NotRequired[PostV2ProxyImagesVariationsResponseFormat]
    r"""The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated."""
    size: NotRequired[Size]
    r"""The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."""
    user: NotRequired[str]
    r"""A unique identifier representing your end-user, which can help to monitor and detect abuse."""


class PostV2ProxyImagesVariationsRequestBody(BaseModel):
    r"""input"""

    image: Annotated[Any, FieldMetadata(multipart=True)]
    r"""The image to edit. Must be a supported image file. It should be a png, webp, or jpg file less than 50MB."""

    model: Annotated[str, FieldMetadata(multipart=True)]
    r"""The model to use for image generation."""

    n: Annotated[OptionalNullable[int], FieldMetadata(multipart=True)] = 1
    r"""The number of images to generate. Must be between 1 and 10."""

    response_format: Annotated[
        Optional[PostV2ProxyImagesVariationsResponseFormat],
        FieldMetadata(multipart=True),
    ] = "url"
    r"""The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated."""

    size: Annotated[Optional[Size], FieldMetadata(multipart=True)] = "1024x1024"
    r"""The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."""

    user: Annotated[Optional[str], FieldMetadata(multipart=True)] = None
    r"""A unique identifier representing your end-user, which can help to monitor and detect abuse."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["n", "response_format", "size", "user"]
        nullable_fields = ["n"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PostV2ProxyImagesVariationsDataTypedDict(TypedDict):
    b64_json: NotRequired[str]
    r"""The base64-encoded JSON of the generated image, if response_format is b64_json"""
    url: NotRequired[str]
    r"""The URL of the generated image, if response_format is url (default)"""


class PostV2ProxyImagesVariationsData(BaseModel):
    b64_json: Optional[str] = None
    r"""The base64-encoded JSON of the generated image, if response_format is b64_json"""

    url: Optional[str] = None
    r"""The URL of the generated image, if response_format is url (default)"""


class PostV2ProxyImagesVariationsInputTokensDetailsTypedDict(TypedDict):
    r"""The input tokens detailed information for the image generation."""

    text_tokens: float
    r"""The number of text tokens in the input prompt."""
    image_tokens: float
    r"""The number of image tokens in the input prompt."""


class PostV2ProxyImagesVariationsInputTokensDetails(BaseModel):
    r"""The input tokens detailed information for the image generation."""

    text_tokens: float
    r"""The number of text tokens in the input prompt."""

    image_tokens: float
    r"""The number of image tokens in the input prompt."""


class PostV2ProxyImagesVariationsUsageTypedDict(TypedDict):
    r"""The token usage information for the image generation."""

    total_tokens: float
    r"""The total number of tokens (images and text) used for the image generation."""
    input_tokens: float
    r"""The number of tokens (images and text) in the input prompt."""
    output_tokens: float
    r"""The number of output tokens generated by the model."""
    input_tokens_details: PostV2ProxyImagesVariationsInputTokensDetailsTypedDict
    r"""The input tokens detailed information for the image generation."""


class PostV2ProxyImagesVariationsUsage(BaseModel):
    r"""The token usage information for the image generation."""

    total_tokens: float
    r"""The total number of tokens (images and text) used for the image generation."""

    input_tokens: float
    r"""The number of tokens (images and text) in the input prompt."""

    output_tokens: float
    r"""The number of output tokens generated by the model."""

    input_tokens_details: PostV2ProxyImagesVariationsInputTokensDetails
    r"""The input tokens detailed information for the image generation."""


class PostV2ProxyImagesVariationsResponseBodyTypedDict(TypedDict):
    r"""Represents an image variation response from the API."""

    created: float
    r"""The Unix timestamp (in seconds) of when the image was created."""
    data: List[PostV2ProxyImagesVariationsDataTypedDict]
    r"""The list of generated images."""
    output_format: NotRequired[str]
    r"""The output format of the image generation"""
    size: NotRequired[str]
    r"""The size of the image generated"""
    quality: NotRequired[str]
    r"""The quality of the image generated"""
    usage: NotRequired[PostV2ProxyImagesVariationsUsageTypedDict]
    r"""The token usage information for the image generation."""


class PostV2ProxyImagesVariationsResponseBody(BaseModel):
    r"""Represents an image variation response from the API."""

    created: float
    r"""The Unix timestamp (in seconds) of when the image was created."""

    data: List[PostV2ProxyImagesVariationsData]
    r"""The list of generated images."""

    output_format: Optional[str] = None
    r"""The output format of the image generation"""

    size: Optional[str] = None
    r"""The size of the image generated"""

    quality: Optional[str] = None
    r"""The quality of the image generated"""

    usage: Optional[PostV2ProxyImagesVariationsUsage] = None
    r"""The token usage information for the image generation."""
