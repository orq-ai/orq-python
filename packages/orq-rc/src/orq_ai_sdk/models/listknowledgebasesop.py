"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListKnowledgeBasesRequestTypedDict(TypedDict):
    limit: NotRequired[float]
    r"""A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10"""
    starting_after: NotRequired[str]
    r"""A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list."""
    ending_before: NotRequired[str]
    r"""A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list."""


class ListKnowledgeBasesRequest(BaseModel):
    limit: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10"""

    starting_after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list."""

    ending_before: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list."""


ListKnowledgeBasesObject = Literal["list"]

ListKnowledgeBasesRetrievalType = Literal[
    "vector_search", "keyword_search", "hybrid_search"
]
r"""The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy."""


class ListKnowledgeBasesRerankConfigTypedDict(TypedDict):
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""

    rerank_model: str
    r"""The rerank model to use for the knowledge base."""
    rerank_threshold: NotRequired[float]
    r"""The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned"""


class ListKnowledgeBasesRerankConfig(BaseModel):
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""

    rerank_model: str
    r"""The rerank model to use for the knowledge base."""

    rerank_threshold: Optional[float] = 0.5
    r"""The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned"""


class ListKnowledgeBasesRetrievalSettingsTypedDict(TypedDict):
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""

    retrieval_type: NotRequired[ListKnowledgeBasesRetrievalType]
    r"""The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy."""
    top_k: NotRequired[int]
    r"""The number of results to return from the search."""
    threshold: NotRequired[float]
    r"""The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned"""
    rerank_config: NotRequired[ListKnowledgeBasesRerankConfigTypedDict]
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""


class ListKnowledgeBasesRetrievalSettings(BaseModel):
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""

    retrieval_type: Optional[ListKnowledgeBasesRetrievalType] = "hybrid_search"
    r"""The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy."""

    top_k: Optional[int] = 5
    r"""The number of results to return from the search."""

    threshold: Optional[float] = 0
    r"""The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned"""

    rerank_config: Optional[ListKnowledgeBasesRerankConfig] = None
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""


class ListKnowledgeBasesDataTypedDict(TypedDict):
    r"""Knowledge Base object"""

    id: str
    r"""The unique identifier of the knowledge base."""
    created: str
    r"""The creation date of the knowledge base."""
    key: str
    r"""The unique key of the knowledge base."""
    model: str
    r"""The embeddings model used for the knowledge base."""
    updated: str
    r"""The last update date of the knowledge base."""
    description: NotRequired[str]
    r"""The description of the knowledge base."""
    path: NotRequired[str]
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    retrieval_settings: NotRequired[ListKnowledgeBasesRetrievalSettingsTypedDict]
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""
    created_by_id: NotRequired[Nullable[str]]
    updated_by_id: NotRequired[Nullable[str]]


class ListKnowledgeBasesData(BaseModel):
    r"""Knowledge Base object"""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""The unique identifier of the knowledge base."""

    created: str
    r"""The creation date of the knowledge base."""

    key: str
    r"""The unique key of the knowledge base."""

    model: str
    r"""The embeddings model used for the knowledge base."""

    updated: str
    r"""The last update date of the knowledge base."""

    description: Optional[str] = None
    r"""The description of the knowledge base."""

    path: Optional[str] = None
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    retrieval_settings: Optional[ListKnowledgeBasesRetrievalSettings] = None
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""

    created_by_id: OptionalNullable[str] = UNSET

    updated_by_id: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "path",
            "retrieval_settings",
            "created_by_id",
            "updated_by_id",
        ]
        nullable_fields = ["created_by_id", "updated_by_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListKnowledgeBasesResponseBodyTypedDict(TypedDict):
    r"""Knowledge bases retrieved"""

    object: ListKnowledgeBasesObject
    data: List[ListKnowledgeBasesDataTypedDict]
    has_more: bool


class ListKnowledgeBasesResponseBody(BaseModel):
    r"""Knowledge bases retrieved"""

    object: ListKnowledgeBasesObject

    data: List[ListKnowledgeBasesData]

    has_more: bool
