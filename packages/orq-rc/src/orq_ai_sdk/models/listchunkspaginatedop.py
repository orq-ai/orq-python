"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ListChunksPaginatedRequestBodyTypedDict(TypedDict):
    q: NotRequired[str]
    r"""Search query to find chunks by text content"""
    enabled: NotRequired[bool]
    r"""Filter chunks by enabled status"""
    status: NotRequired[str]
    r"""Filter chunks by processing status"""
    limit: NotRequired[int]
    page: NotRequired[int]


class ListChunksPaginatedRequestBody(BaseModel):
    q: Optional[str] = ""
    r"""Search query to find chunks by text content"""

    enabled: Optional[bool] = None
    r"""Filter chunks by enabled status"""

    status: Optional[str] = None
    r"""Filter chunks by processing status"""

    limit: Optional[int] = 100

    page: Optional[int] = 1


class ListChunksPaginatedRequestTypedDict(TypedDict):
    knowledge_id: str
    r"""The unique identifier of the knowledge base"""
    datasource_id: str
    r"""The unique identifier of the datasource."""
    request_body: NotRequired[ListChunksPaginatedRequestBodyTypedDict]


class ListChunksPaginatedRequest(BaseModel):
    knowledge_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique identifier of the knowledge base"""

    datasource_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique identifier of the datasource."""

    request_body: Annotated[
        Optional[ListChunksPaginatedRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


ListChunksPaginatedObject = Literal["list",]


ListChunksPaginatedMetadataTypedDict = TypeAliasType(
    "ListChunksPaginatedMetadataTypedDict", Union[str, float, bool]
)


ListChunksPaginatedMetadata = TypeAliasType(
    "ListChunksPaginatedMetadata", Union[str, float, bool]
)


ListChunksPaginatedStatus = Literal[
    "pending",
    "processing",
    "completed",
    "failed",
    "queued",
]
r"""The status of the chunk"""


class ListChunksPaginatedDataTypedDict(TypedDict):
    id: str
    r"""The unique identifier of the chunk"""
    text: str
    r"""The text content of the chunk"""
    enabled: bool
    r"""Whether the chunk is enabled"""
    status: ListChunksPaginatedStatus
    r"""The status of the chunk"""
    created: str
    r"""The date and time the chunk was created"""
    updated: str
    r"""The date and time the chunk was updated"""
    metadata: NotRequired[Dict[str, ListChunksPaginatedMetadataTypedDict]]
    r"""Metadata of the chunk. Can include `page_number` or any other key-value pairs"""
    created_by_id: NotRequired[Nullable[str]]
    r"""The unique identifier of the user who created the chunk"""
    update_by_id: NotRequired[Nullable[str]]
    r"""The unique identifier of the user who updated the chunk"""


class ListChunksPaginatedData(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""The unique identifier of the chunk"""

    text: str
    r"""The text content of the chunk"""

    enabled: bool
    r"""Whether the chunk is enabled"""

    status: ListChunksPaginatedStatus
    r"""The status of the chunk"""

    created: str
    r"""The date and time the chunk was created"""

    updated: str
    r"""The date and time the chunk was updated"""

    metadata: Optional[Dict[str, ListChunksPaginatedMetadata]] = None
    r"""Metadata of the chunk. Can include `page_number` or any other key-value pairs"""

    created_by_id: OptionalNullable[str] = UNSET
    r"""The unique identifier of the user who created the chunk"""

    update_by_id: OptionalNullable[str] = UNSET
    r"""The unique identifier of the user who updated the chunk"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["metadata", "created_by_id", "update_by_id"]
        nullable_fields = ["created_by_id", "update_by_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListChunksPaginatedResponseBodyTypedDict(TypedDict):
    r"""Chunks successfully retrieved"""

    object: ListChunksPaginatedObject
    data: List[ListChunksPaginatedDataTypedDict]
    has_more: bool


class ListChunksPaginatedResponseBody(BaseModel):
    r"""Chunks successfully retrieved"""

    object: ListChunksPaginatedObject

    data: List[ListChunksPaginatedData]

    has_more: bool
