"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Dict, List, Literal, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


PostV2ProxyRerankDocumentsTypedDict = TypeAliasType(
    "PostV2ProxyRerankDocumentsTypedDict", Union[str, Dict[str, str]]
)


PostV2ProxyRerankDocuments = TypeAliasType(
    "PostV2ProxyRerankDocuments", Union[str, Dict[str, str]]
)


class PostV2ProxyRerankRequestBodyTypedDict(TypedDict):
    r"""input"""

    query: str
    r"""The search query"""
    documents: List[PostV2ProxyRerankDocumentsTypedDict]
    r"""A list of document objects or strings to rerank."""
    model: str
    r"""The identifier of the model to use"""
    top_n: NotRequired[float]
    r"""The number of most relevant documents or indices to return, defaults to the length of the documents"""
    filename: NotRequired[Nullable[str]]
    r"""The filename of the document to rerank"""


class PostV2ProxyRerankRequestBody(BaseModel):
    r"""input"""

    query: str
    r"""The search query"""

    documents: List[PostV2ProxyRerankDocuments]
    r"""A list of document objects or strings to rerank."""

    model: str
    r"""The identifier of the model to use"""

    top_n: Optional[float] = None
    r"""The number of most relevant documents or indices to return, defaults to the length of the documents"""

    filename: OptionalNullable[str] = UNSET
    r"""The filename of the document to rerank"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["top_n", "filename"]
        nullable_fields = ["filename"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PostV2ProxyRerankObject = Literal["list"]

PostV2ProxyRerankProxyObject = Literal["rerank"]
r"""The object type, which is always `rerank`."""


class DocumentTypedDict(TypedDict):
    r"""If return_documents is set as false this will return none, if true it will return the documents passed in"""

    text: str
    r"""The text of the document to rerank"""


class Document(BaseModel):
    r"""If return_documents is set as false this will return none, if true it will return the documents passed in"""

    text: str
    r"""The text of the document to rerank"""


class PostV2ProxyRerankResultsTypedDict(TypedDict):
    object: PostV2ProxyRerankProxyObject
    r"""The object type, which is always `rerank`."""
    index: float
    r"""Corresponds to the index in the original list of documents to which the ranked document belongs."""
    relevance_score: float
    r"""Relevance scores are normalized to be in the range [0, 1]. Scores close to 1 indicate a high relevance to the query, and scores closer to 0 indicate low relevance."""
    document: NotRequired[DocumentTypedDict]
    r"""If return_documents is set as false this will return none, if true it will return the documents passed in"""


class PostV2ProxyRerankResults(BaseModel):
    object: PostV2ProxyRerankProxyObject
    r"""The object type, which is always `rerank`."""

    index: float
    r"""Corresponds to the index in the original list of documents to which the ranked document belongs."""

    relevance_score: float
    r"""Relevance scores are normalized to be in the range [0, 1]. Scores close to 1 indicate a high relevance to the query, and scores closer to 0 indicate low relevance."""

    document: Optional[Document] = None
    r"""If return_documents is set as false this will return none, if true it will return the documents passed in"""


class PostV2ProxyRerankUsageTypedDict(TypedDict):
    total_tokens: float
    r"""The total number of tokens used in the rerank"""


class PostV2ProxyRerankUsage(BaseModel):
    total_tokens: float
    r"""The total number of tokens used in the rerank"""


class PostV2ProxyRerankResponseBodyTypedDict(TypedDict):
    r"""Returns the reranked documents."""

    object: PostV2ProxyRerankObject
    results: List[PostV2ProxyRerankResultsTypedDict]
    r"""An ordered list of ranked documents"""
    id: NotRequired[str]
    r"""A unique identifier for the rerank."""
    usage: NotRequired[PostV2ProxyRerankUsageTypedDict]


class PostV2ProxyRerankResponseBody(BaseModel):
    r"""Returns the reranked documents."""

    object: PostV2ProxyRerankObject

    results: List[PostV2ProxyRerankResults]
    r"""An ordered list of ranked documents"""

    id: Optional[str] = None
    r"""A unique identifier for the rerank."""

    usage: Optional[PostV2ProxyRerankUsage] = None
