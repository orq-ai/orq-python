"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from orq_ai_sdk.models import OrqError
from orq_ai_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Optional, Union
from typing_extensions import TypeAliasType, TypedDict


class EvalsValidJSONRequestBodyTypedDict(TypedDict):
    output: str


class EvalsValidJSONRequestBody(BaseModel):
    output: str


class EvalsValidJSONEvalsResponseResponseBodyData(BaseModel):
    message: str


class EvalsValidJSONEvalsResponseResponseBody(OrqError):
    r"""Internal server error"""

    data: EvalsValidJSONEvalsResponseResponseBodyData

    def __init__(
        self,
        data: EvalsValidJSONEvalsResponseResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        self.data = data


class EvalsValidJSONEvalsResponseBodyData(BaseModel):
    message: str


class EvalsValidJSONEvalsResponseBody(OrqError):
    r"""Evaluator not found"""

    data: EvalsValidJSONEvalsResponseBodyData

    def __init__(
        self,
        data: EvalsValidJSONEvalsResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        self.data = data


EvalsValidJSONValueTypedDict = TypeAliasType(
    "EvalsValidJSONValueTypedDict", Union[bool, str, float]
)


EvalsValidJSONValue = TypeAliasType("EvalsValidJSONValue", Union[bool, str, float])


class EvalsValidJSONResponseBodyTypedDict(TypedDict):
    r"""Returns whether the input is valid JSON"""

    value: Nullable[EvalsValidJSONValueTypedDict]


class EvalsValidJSONResponseBody(BaseModel):
    r"""Returns whether the input is valid JSON"""

    value: Nullable[EvalsValidJSONValue]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
