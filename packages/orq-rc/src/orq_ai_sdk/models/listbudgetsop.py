"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, QueryParamMetadata, parse_datetime
import pydantic
from pydantic import model_serializer
from typing import List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


QueryParamType = Literal[
    "contact",
    "workspace",
]
r"""Filter by budget entity type (contact or workspace)"""


class ListBudgetsRequestTypedDict(TypedDict):
    limit: NotRequired[float]
    r"""A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10"""
    starting_after: NotRequired[str]
    r"""A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list."""
    ending_before: NotRequired[str]
    r"""A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list."""
    type: NotRequired[QueryParamType]
    r"""Filter by budget entity type (contact or workspace)"""
    entity_id: NotRequired[str]
    is_active: NotRequired[Nullable[bool]]


class ListBudgetsRequest(BaseModel):
    limit: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10"""

    starting_after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list."""

    ending_before: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list."""

    type: Annotated[
        Optional[QueryParamType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by budget entity type (contact or workspace)"""

    entity_id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    is_active: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "limit",
            "starting_after",
            "ending_before",
            "type",
            "entity_id",
            "is_active",
        ]
        nullable_fields = ["is_active"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


ListBudgetsObject = Literal["list",]


ListBudgetsType = Literal[
    "api_key",
    "contact",
    "workspace",
]
r"""Budget entity type"""


ListBudgetsPeriod = Literal[
    "daily",
    "weekly",
    "monthly",
    "yearly",
]
r"""Budget period type"""


class ListBudgetsBudgetTypedDict(TypedDict):
    r"""Budget configuration"""

    period: ListBudgetsPeriod
    r"""Budget period type"""
    amount: float
    r"""Budget amount in USD for the specified period"""


class ListBudgetsBudget(BaseModel):
    r"""Budget configuration"""

    period: ListBudgetsPeriod
    r"""Budget period type"""

    amount: float
    r"""Budget amount in USD for the specified period"""


class ListBudgetsConsumptionTypedDict(TypedDict):
    current_amount: float
    r"""Current period consumption in USD"""
    remaining_amount: float
    r"""Remaining budget (amount - current_amount)"""
    period_start: Nullable[str]
    r"""When the current period started"""
    period_end: Nullable[str]
    r"""When the current period will reset"""


class ListBudgetsConsumption(BaseModel):
    current_amount: float
    r"""Current period consumption in USD"""

    remaining_amount: float
    r"""Remaining budget (amount - current_amount)"""

    period_start: Nullable[str]
    r"""When the current period started"""

    period_end: Nullable[str]
    r"""When the current period will reset"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["period_start", "period_end"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListBudgetsDataTypedDict(TypedDict):
    id: str
    r"""Unique ULID for the budget configuration"""
    type: ListBudgetsType
    r"""Budget entity type"""
    budget: ListBudgetsBudgetTypedDict
    r"""Budget configuration"""
    is_active: bool
    r"""Whether this budget configuration is currently active"""
    contact_id: NotRequired[str]
    r"""Contact external identifier (present when type is \"contact\")"""
    consumption: NotRequired[ListBudgetsConsumptionTypedDict]
    created: NotRequired[datetime]
    r"""The date and time the resource was created"""
    updated: NotRequired[datetime]
    r"""The date and time the resource was last updated"""


class ListBudgetsData(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Unique ULID for the budget configuration"""

    type: ListBudgetsType
    r"""Budget entity type"""

    budget: ListBudgetsBudget
    r"""Budget configuration"""

    is_active: bool
    r"""Whether this budget configuration is currently active"""

    contact_id: Optional[str] = None
    r"""Contact external identifier (present when type is \"contact\")"""

    consumption: Optional[ListBudgetsConsumption] = None

    created: Optional[datetime] = None
    r"""The date and time the resource was created"""

    updated: Optional[datetime] = parse_datetime("2025-09-22T04:40:19.773Z")
    r"""The date and time the resource was last updated"""


class ListBudgetsResponseBodyTypedDict(TypedDict):
    r"""List of budget configurations"""

    object: ListBudgetsObject
    data: List[ListBudgetsDataTypedDict]
    has_more: bool


class ListBudgetsResponseBody(BaseModel):
    r"""List of budget configurations"""

    object: ListBudgetsObject

    data: List[ListBudgetsData]

    has_more: bool
