"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from orq_ai_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from orq_ai_sdk.utils import parse_datetime
import pydantic
from pydantic import model_serializer
from typing import Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


CreateBudgetRequestBodyBudgetsType = Literal["workspace",]
r"""Workspace budget type"""


RequestBodyPeriod = Literal[
    "daily",
    "weekly",
    "monthly",
    "yearly",
]
r"""Budget period type"""


class WorkspaceBudgetTypedDict(TypedDict):
    r"""Budget configuration for the entire workspace"""

    type: CreateBudgetRequestBodyBudgetsType
    r"""Workspace budget type"""
    period: RequestBodyPeriod
    r"""Budget period type"""
    amount: float
    r"""Budget amount in USD for the specified period"""


class WorkspaceBudget(BaseModel):
    r"""Budget configuration for the entire workspace"""

    type: CreateBudgetRequestBodyBudgetsType
    r"""Workspace budget type"""

    period: RequestBodyPeriod
    r"""Budget period type"""

    amount: float
    r"""Budget amount in USD for the specified period"""


CreateBudgetRequestBodyType = Literal["contact",]
r"""Contact budget type"""


CreateBudgetRequestBodyPeriod = Literal[
    "daily",
    "weekly",
    "monthly",
    "yearly",
]
r"""Budget period type"""


class ContactBudgetTypedDict(TypedDict):
    r"""Budget configuration for a specific contact"""

    type: CreateBudgetRequestBodyType
    r"""Contact budget type"""
    entity_id: str
    r"""Contact external ID"""
    period: CreateBudgetRequestBodyPeriod
    r"""Budget period type"""
    amount: float
    r"""Budget amount in USD for the specified period"""


class ContactBudget(BaseModel):
    r"""Budget configuration for a specific contact"""

    type: CreateBudgetRequestBodyType
    r"""Contact budget type"""

    entity_id: str
    r"""Contact external ID"""

    period: CreateBudgetRequestBodyPeriod
    r"""Budget period type"""

    amount: float
    r"""Budget amount in USD for the specified period"""


CreateBudgetRequestBodyTypedDict = TypeAliasType(
    "CreateBudgetRequestBodyTypedDict",
    Union[WorkspaceBudgetTypedDict, ContactBudgetTypedDict],
)
r"""Create budget configuration for contact or workspace"""


CreateBudgetRequestBody = TypeAliasType(
    "CreateBudgetRequestBody", Union[WorkspaceBudget, ContactBudget]
)
r"""Create budget configuration for contact or workspace"""


CreateBudgetType = Literal[
    "api_key",
    "contact",
    "workspace",
]
r"""Budget entity type"""


CreateBudgetPeriod = Literal[
    "daily",
    "weekly",
    "monthly",
    "yearly",
]
r"""Budget period type"""


class CreateBudgetBudgetTypedDict(TypedDict):
    r"""Budget configuration"""

    period: CreateBudgetPeriod
    r"""Budget period type"""
    amount: float
    r"""Budget amount in USD for the specified period"""


class CreateBudgetBudget(BaseModel):
    r"""Budget configuration"""

    period: CreateBudgetPeriod
    r"""Budget period type"""

    amount: float
    r"""Budget amount in USD for the specified period"""


class ConsumptionTypedDict(TypedDict):
    current_amount: float
    r"""Current period consumption in USD"""
    remaining_amount: float
    r"""Remaining budget (amount - current_amount)"""
    period_start: Nullable[str]
    r"""When the current period started"""
    period_end: Nullable[str]
    r"""When the current period will reset"""


class Consumption(BaseModel):
    current_amount: float
    r"""Current period consumption in USD"""

    remaining_amount: float
    r"""Remaining budget (amount - current_amount)"""

    period_start: Nullable[str]
    r"""When the current period started"""

    period_end: Nullable[str]
    r"""When the current period will reset"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["period_start", "period_end"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreateBudgetResponseBodyTypedDict(TypedDict):
    r"""Budget configuration details"""

    id: str
    r"""Unique ULID for the budget configuration"""
    type: CreateBudgetType
    r"""Budget entity type"""
    budget: CreateBudgetBudgetTypedDict
    r"""Budget configuration"""
    is_active: bool
    r"""Whether this budget configuration is currently active"""
    contact_id: NotRequired[str]
    r"""Contact external identifier (present when type is \"contact\")"""
    consumption: NotRequired[ConsumptionTypedDict]
    created: NotRequired[datetime]
    r"""The date and time the resource was created"""
    updated: NotRequired[datetime]
    r"""The date and time the resource was last updated"""


class CreateBudgetResponseBody(BaseModel):
    r"""Budget configuration details"""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Unique ULID for the budget configuration"""

    type: CreateBudgetType
    r"""Budget entity type"""

    budget: CreateBudgetBudget
    r"""Budget configuration"""

    is_active: bool
    r"""Whether this budget configuration is currently active"""

    contact_id: Optional[str] = None
    r"""Contact external identifier (present when type is \"contact\")"""

    consumption: Optional[Consumption] = None

    created: Optional[datetime] = None
    r"""The date and time the resource was created"""

    updated: Optional[datetime] = parse_datetime("2025-09-23T09:23:23.462Z")
    r"""The date and time the resource was last updated"""
