"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dataclasses import dataclass, field
import httpx
from orq_ai_sdk.models import OrqError
from orq_ai_sdk.types import BaseModel
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Any, Dict, List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetAgentTaskRequestTypedDict(TypedDict):
    id: str
    task_id: str


class GetAgentTaskRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    task_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]


class GetAgentTaskAgentsResponseBodyData(BaseModel):
    message: str


@dataclass(frozen=True)
class GetAgentTaskAgentsResponseBody(OrqError):
    r"""Agent task not found"""

    data: GetAgentTaskAgentsResponseBodyData = field(hash=False)

    def __init__(
        self,
        data: GetAgentTaskAgentsResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)


GetAgentTaskKind = Literal["task"]


class GetAgentTaskStatusTypedDict(TypedDict):
    state: str
    timestamp: NotRequired[str]
    message: NotRequired[Any]


class GetAgentTaskStatus(BaseModel):
    state: str

    timestamp: Optional[str] = None

    message: Optional[Any] = None


class GetAgentTaskResponseBodyTypedDict(TypedDict):
    r"""Agent task retrieved"""

    id: str
    context_id: str
    kind: GetAgentTaskKind
    status: GetAgentTaskStatusTypedDict
    history: List[Any]
    artifacts: NotRequired[List[Any]]
    metadata: NotRequired[Dict[str, Any]]


class GetAgentTaskResponseBody(BaseModel):
    r"""Agent task retrieved"""

    id: str

    context_id: Annotated[str, pydantic.Field(alias="contextId")]

    kind: GetAgentTaskKind

    status: GetAgentTaskStatus

    history: List[Any]

    artifacts: Optional[List[Any]] = None

    metadata: Optional[Dict[str, Any]] = None
