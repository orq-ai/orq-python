"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetChunksCountRequestBodyTypedDict(TypedDict):
    q: NotRequired[str]
    r"""Search query to find chunks by text content"""
    enabled: NotRequired[bool]
    r"""Filter chunks by enabled status"""
    status: NotRequired[str]
    r"""Filter chunks by processing status"""


class GetChunksCountRequestBody(BaseModel):
    q: Optional[str] = ""
    r"""Search query to find chunks by text content"""

    enabled: Optional[bool] = None
    r"""Filter chunks by enabled status"""

    status: Optional[str] = None
    r"""Filter chunks by processing status"""


class GetChunksCountRequestTypedDict(TypedDict):
    knowledge_id: str
    r"""The unique identifier of the knowledge base"""
    datasource_id: str
    r"""The unique identifier of the datasource."""
    request_body: NotRequired[GetChunksCountRequestBodyTypedDict]


class GetChunksCountRequest(BaseModel):
    knowledge_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique identifier of the knowledge base"""

    datasource_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique identifier of the datasource."""

    request_body: Annotated[
        Optional[GetChunksCountRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class GetChunksCountResponseBodyTypedDict(TypedDict):
    r"""Chunks count"""

    count: float


class GetChunksCountResponseBody(BaseModel):
    r"""Chunks count"""

    count: float
