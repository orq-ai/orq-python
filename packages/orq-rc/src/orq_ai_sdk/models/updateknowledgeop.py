"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


UpdateKnowledgeRetrievalType = Literal[
    "vector_search", "keyword_search", "hybrid_search"
]
r"""The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy."""


class UpdateKnowledgeRerankConfigTypedDict(TypedDict):
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""

    rerank_model: str
    r"""The rerank model to use for the knowledge base."""
    rerank_threshold: NotRequired[float]
    r"""The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned"""


class UpdateKnowledgeRerankConfig(BaseModel):
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""

    rerank_model: str
    r"""The rerank model to use for the knowledge base."""

    rerank_threshold: Optional[float] = 0.5
    r"""The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned"""


class UpdateKnowledgeRetrievalSettingsTypedDict(TypedDict):
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""

    retrieval_type: NotRequired[UpdateKnowledgeRetrievalType]
    r"""The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy."""
    top_k: NotRequired[int]
    r"""The number of results to return from the search."""
    threshold: NotRequired[float]
    r"""The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned"""
    rerank_config: NotRequired[UpdateKnowledgeRerankConfigTypedDict]
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""


class UpdateKnowledgeRetrievalSettings(BaseModel):
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""

    retrieval_type: Optional[UpdateKnowledgeRetrievalType] = "hybrid_search"
    r"""The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy."""

    top_k: Optional[int] = 5
    r"""The number of results to return from the search."""

    threshold: Optional[float] = 0
    r"""The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned"""

    rerank_config: Optional[UpdateKnowledgeRerankConfig] = None
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""


class UpdateKnowledgeRequestBodyTypedDict(TypedDict):
    description: NotRequired[str]
    r"""The description of the knowledge base."""
    embedding_model: NotRequired[str]
    r"""The embeddings model used for the knowledge base. If the models is provided and is different than the previous set model, all the datasources in the knowledge base will be re-embedded."""
    path: NotRequired[str]
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    retrieval_settings: NotRequired[UpdateKnowledgeRetrievalSettingsTypedDict]
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""


class UpdateKnowledgeRequestBody(BaseModel):
    description: Optional[str] = None
    r"""The description of the knowledge base."""

    embedding_model: Optional[str] = None
    r"""The embeddings model used for the knowledge base. If the models is provided and is different than the previous set model, all the datasources in the knowledge base will be re-embedded."""

    path: Optional[str] = None
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    retrieval_settings: Optional[UpdateKnowledgeRetrievalSettings] = None
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""


class UpdateKnowledgeRequestTypedDict(TypedDict):
    knowledge_id: str
    r"""The unique identifier of the knowledge base"""
    request_body: UpdateKnowledgeRequestBodyTypedDict


class UpdateKnowledgeRequest(BaseModel):
    knowledge_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique identifier of the knowledge base"""

    request_body: Annotated[
        UpdateKnowledgeRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]


UpdateKnowledgeKnowledgeRetrievalType = Literal[
    "vector_search", "keyword_search", "hybrid_search"
]
r"""The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy."""


class UpdateKnowledgeKnowledgeRerankConfigTypedDict(TypedDict):
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""

    rerank_model: str
    r"""The rerank model to use for the knowledge base."""
    rerank_threshold: NotRequired[float]
    r"""The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned"""


class UpdateKnowledgeKnowledgeRerankConfig(BaseModel):
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""

    rerank_model: str
    r"""The rerank model to use for the knowledge base."""

    rerank_threshold: Optional[float] = 0.5
    r"""The threshold value used to filter the rerank results, only documents with a relevance score greater than the threshold will be returned"""


class UpdateKnowledgeKnowledgeRetrievalSettingsTypedDict(TypedDict):
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""

    retrieval_type: NotRequired[UpdateKnowledgeKnowledgeRetrievalType]
    r"""The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy."""
    top_k: NotRequired[int]
    r"""The number of results to return from the search."""
    threshold: NotRequired[float]
    r"""The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned"""
    rerank_config: NotRequired[UpdateKnowledgeKnowledgeRerankConfigTypedDict]
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""


class UpdateKnowledgeKnowledgeRetrievalSettings(BaseModel):
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""

    retrieval_type: Optional[UpdateKnowledgeKnowledgeRetrievalType] = "hybrid_search"
    r"""The retrieval type to use for the knowledge base. If not provided, Hybrid Search will be used as a default query strategy."""

    top_k: Optional[int] = 5
    r"""The number of results to return from the search."""

    threshold: Optional[float] = 0
    r"""The threshold value used to filter the search results, only documents with a relevance score greater than the threshold will be returned"""

    rerank_config: Optional[UpdateKnowledgeKnowledgeRerankConfig] = None
    r"""The rerank configuration for the knowledge base. In case the model is provided it will be used to enhance the search precision."""


class UpdateKnowledgeResponseBodyTypedDict(TypedDict):
    r"""Knowledge Base object"""

    id: str
    r"""The unique identifier of the knowledge base."""
    created_by_id: str
    r"""The id of the resource"""
    created: str
    r"""The creation date of the knowledge base."""
    key: str
    r"""The unique key of the knowledge base."""
    model: str
    r"""The embeddings model used for the knowledge base."""
    update_by_id: str
    r"""The id of the resource"""
    updated: str
    r"""The last update date of the knowledge base."""
    description: NotRequired[str]
    r"""The description of the knowledge base."""
    path: NotRequired[str]
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    retrieval_settings: NotRequired[UpdateKnowledgeKnowledgeRetrievalSettingsTypedDict]
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""


class UpdateKnowledgeResponseBody(BaseModel):
    r"""Knowledge Base object"""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""The unique identifier of the knowledge base."""

    created_by_id: str
    r"""The id of the resource"""

    created: str
    r"""The creation date of the knowledge base."""

    key: str
    r"""The unique key of the knowledge base."""

    model: str
    r"""The embeddings model used for the knowledge base."""

    update_by_id: str
    r"""The id of the resource"""

    updated: str
    r"""The last update date of the knowledge base."""

    description: Optional[str] = None
    r"""The description of the knowledge base."""

    path: Optional[str] = None
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    retrieval_settings: Optional[UpdateKnowledgeKnowledgeRetrievalSettings] = None
    r"""The retrieval settings for the knowledge base. If not provider, Hybrid Search will be used as a default query strategy."""
