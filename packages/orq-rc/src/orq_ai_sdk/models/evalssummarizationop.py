"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk import utils
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


class EvalsSummarizationRequestBodyTypedDict(TypedDict):
    input: str
    output: str
    model: str


class EvalsSummarizationRequestBody(BaseModel):
    input: str

    output: str

    model: str


class EvalsSummarizationEvalsResponseResponseBodyData(BaseModel):
    message: str


class EvalsSummarizationEvalsResponseResponseBody(Exception):
    r"""Internal server error"""

    data: EvalsSummarizationEvalsResponseResponseBodyData

    def __init__(self, data: EvalsSummarizationEvalsResponseResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, EvalsSummarizationEvalsResponseResponseBodyData
        )


class EvalsSummarizationEvalsResponseBodyData(BaseModel):
    message: str


class EvalsSummarizationEvalsResponseBody(Exception):
    r"""Evaluator not found"""

    data: EvalsSummarizationEvalsResponseBodyData

    def __init__(self, data: EvalsSummarizationEvalsResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, EvalsSummarizationEvalsResponseBodyData)


EvalsSummarizationEvalsValueTypedDict = TypeAliasType(
    "EvalsSummarizationEvalsValueTypedDict", Union[float, bool, str]
)


EvalsSummarizationEvalsValue = TypeAliasType(
    "EvalsSummarizationEvalsValue", Union[float, bool, str]
)


class EvalsSummarizationValueTypedDict(TypedDict):
    value: EvalsSummarizationEvalsValueTypedDict
    explanation: NotRequired[Nullable[str]]


class EvalsSummarizationValue(BaseModel):
    value: EvalsSummarizationEvalsValue

    explanation: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["explanation"]
        nullable_fields = ["explanation"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class EvalsSummarizationResponseBodyTypedDict(TypedDict):
    r"""Returns the result of the evaluator run"""

    value: Nullable[EvalsSummarizationValueTypedDict]


class EvalsSummarizationResponseBody(BaseModel):
    r"""Returns the result of the evaluator run"""

    value: Nullable[EvalsSummarizationValue]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
