"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from typing import List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


CreateDatasetExperimentType = Literal["dataset_experiment"]


class CreateDatasetExperimentRequestBodyTypedDict(TypedDict):
    experiment_key: str
    r"""The unique key of the experiment"""
    type: CreateDatasetExperimentType
    evaluators: NotRequired[List[str]]
    r"""The list of evaluators to use for the experiment. You can apply multiple evaluators to the same experiment. By default we always consider latency and cost as evaluators."""
    path: NotRequired[str]
    r"""The path where the experiment needs to be stored. If not provided, the experiment will be stored in the same path of the dataset used for the experiment."""
    model_ids: NotRequired[List[str]]
    r"""The list of model ids to use for the experiment."""


class CreateDatasetExperimentRequestBody(BaseModel):
    experiment_key: str
    r"""The unique key of the experiment"""

    type: CreateDatasetExperimentType

    evaluators: Optional[List[str]] = None
    r"""The list of evaluators to use for the experiment. You can apply multiple evaluators to the same experiment. By default we always consider latency and cost as evaluators."""

    path: Optional[str] = None
    r"""The path where the experiment needs to be stored. If not provided, the experiment will be stored in the same path of the dataset used for the experiment."""

    model_ids: Optional[List[str]] = None
    r"""The list of model ids to use for the experiment."""


class CreateDatasetExperimentRequestTypedDict(TypedDict):
    dataset_id: str
    request_body: NotRequired[CreateDatasetExperimentRequestBodyTypedDict]


class CreateDatasetExperimentRequest(BaseModel):
    dataset_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    request_body: Annotated[
        Optional[CreateDatasetExperimentRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class CreateDatasetExperimentResponseBodyTypedDict(TypedDict):
    r"""Experiment created"""

    url: str
    r"""The url of the experiment run that was just created"""
    experiment_id: str
    r"""The unique identifier of the experiment"""
    experiment_run_id: str
    r"""The unique identifier of the experiment run"""


class CreateDatasetExperimentResponseBody(BaseModel):
    r"""Experiment created"""

    url: str
    r"""The url of the experiment run that was just created"""

    experiment_id: str
    r"""The unique identifier of the experiment"""

    experiment_run_id: str
    r"""The unique identifier of the experiment run"""
