"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dataclasses import dataclass, field
import httpx
from orq_ai_sdk.models import OrqError
from orq_ai_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET_SENTINEL
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


UpdateToolRequestBodyToolsRequest5Status = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolRequestBodyToolsRequest5Type = Literal["code",]


UpdateToolRequestBodyLanguage = Literal["python",]


class UpdateToolRequestBodyCodeToolTypedDict(TypedDict):
    language: UpdateToolRequestBodyLanguage
    code: str
    r"""The code to execute."""
    parameters: NotRequired[Dict[str, Any]]
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class UpdateToolRequestBodyCodeTool(BaseModel):
    language: UpdateToolRequestBodyLanguage

    code: str
    r"""The code to execute."""

    parameters: Optional[Dict[str, Any]] = None
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class UpdateToolRequestBody5TypedDict(TypedDict):
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    type: UpdateToolRequestBodyToolsRequest5Type
    path: NotRequired[str]
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    description: NotRequired[str]
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    status: NotRequired[UpdateToolRequestBodyToolsRequest5Status]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]
    code_tool: NotRequired[UpdateToolRequestBodyCodeToolTypedDict]


class UpdateToolRequestBody5(BaseModel):
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    type: UpdateToolRequestBodyToolsRequest5Type

    path: Optional[str] = None
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    description: Optional[str] = None
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    status: Optional[UpdateToolRequestBodyToolsRequest5Status] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None

    code_tool: Optional[UpdateToolRequestBodyCodeTool] = None


UpdateToolRequestBodyToolsRequest4Status = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolRequestBodyToolsRequest4Type = Literal["mcp",]


class RequestBodyHeadersTypedDict(TypedDict):
    value: str
    encrypted: NotRequired[bool]


class RequestBodyHeaders(BaseModel):
    value: str

    encrypted: Optional[bool] = False


UpdateToolRequestBodyToolsRequest4McpType = Literal["object",]


class RequestBodyInputSchemaTypedDict(TypedDict):
    r"""The original MCP tool input schema for LLM conversion"""

    type: UpdateToolRequestBodyToolsRequest4McpType
    properties: NotRequired[Dict[str, Any]]
    required: NotRequired[List[str]]


class RequestBodyInputSchema(BaseModel):
    r"""The original MCP tool input schema for LLM conversion"""

    type: UpdateToolRequestBodyToolsRequest4McpType

    properties: Optional[Dict[str, Any]] = None

    required: Optional[List[str]] = None


RequestBodyConnectionType = Literal[
    "http",
    "sse",
]
r"""The connection type used by the MCP server"""


class RequestBodyMcpTypedDict(TypedDict):
    server_id: str
    r"""The ID of the MCP server this tool belongs to"""
    tool_name: str
    r"""The original tool name from the MCP server"""
    server_url: str
    r"""The MCP server URL (cached for execution)"""
    input_schema: RequestBodyInputSchemaTypedDict
    r"""The original MCP tool input schema for LLM conversion"""
    connection_type: RequestBodyConnectionType
    r"""The connection type used by the MCP server"""
    headers: NotRequired[Dict[str, RequestBodyHeadersTypedDict]]
    r"""HTTP headers for MCP server requests (encrypted format)"""


class RequestBodyMcp(BaseModel):
    server_id: str
    r"""The ID of the MCP server this tool belongs to"""

    tool_name: str
    r"""The original tool name from the MCP server"""

    server_url: str
    r"""The MCP server URL (cached for execution)"""

    input_schema: RequestBodyInputSchema
    r"""The original MCP tool input schema for LLM conversion"""

    connection_type: RequestBodyConnectionType
    r"""The connection type used by the MCP server"""

    headers: Optional[Dict[str, RequestBodyHeaders]] = None
    r"""HTTP headers for MCP server requests (encrypted format)"""


class UpdateToolRequestBody4TypedDict(TypedDict):
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    type: UpdateToolRequestBodyToolsRequest4Type
    path: NotRequired[str]
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    description: NotRequired[str]
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    status: NotRequired[UpdateToolRequestBodyToolsRequest4Status]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]
    mcp: NotRequired[RequestBodyMcpTypedDict]


class UpdateToolRequestBody4(BaseModel):
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    type: UpdateToolRequestBodyToolsRequest4Type

    path: Optional[str] = None
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    description: Optional[str] = None
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    status: Optional[UpdateToolRequestBodyToolsRequest4Status] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None

    mcp: Optional[RequestBodyMcp] = None


UpdateToolRequestBodyToolsRequestStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolRequestBodyToolsRequestType = Literal["http",]


UpdateToolRequestBodyMethod = Literal[
    "GET",
    "POST",
    "PUT",
    "DELETE",
]
r"""The HTTP method to use."""


class UpdateToolRequestBodyBlueprintTypedDict(TypedDict):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""
    method: UpdateToolRequestBodyMethod
    r"""The HTTP method to use."""
    headers: NotRequired[Dict[str, str]]
    r"""The headers to send with the request."""
    body: NotRequired[Dict[str, Any]]
    r"""The body to send with the request."""


class UpdateToolRequestBodyBlueprint(BaseModel):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""

    method: UpdateToolRequestBodyMethod
    r"""The HTTP method to use."""

    headers: Optional[Dict[str, str]] = None
    r"""The headers to send with the request."""

    body: Optional[Dict[str, Any]] = None
    r"""The body to send with the request."""


UpdateToolRequestBodyToolsRequest3Type = Literal[
    "string",
    "number",
    "boolean",
]
r"""The type of the argument."""


UpdateToolRequestBodyDefaultValueTypedDict = TypeAliasType(
    "UpdateToolRequestBodyDefaultValueTypedDict", Union[str, float, bool]
)
r"""The default value of the argument."""


UpdateToolRequestBodyDefaultValue = TypeAliasType(
    "UpdateToolRequestBodyDefaultValue", Union[str, float, bool]
)
r"""The default value of the argument."""


class UpdateToolRequestBodyArgumentsTypedDict(TypedDict):
    type: UpdateToolRequestBodyToolsRequest3Type
    r"""The type of the argument."""
    description: str
    r"""A description of the argument."""
    send_to_model: NotRequired[bool]
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""
    default_value: NotRequired[UpdateToolRequestBodyDefaultValueTypedDict]
    r"""The default value of the argument."""


class UpdateToolRequestBodyArguments(BaseModel):
    type: UpdateToolRequestBodyToolsRequest3Type
    r"""The type of the argument."""

    description: str
    r"""A description of the argument."""

    send_to_model: Optional[bool] = True
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""

    default_value: Optional[UpdateToolRequestBodyDefaultValue] = None
    r"""The default value of the argument."""


class UpdateToolRequestBodyHTTPTypedDict(TypedDict):
    blueprint: UpdateToolRequestBodyBlueprintTypedDict
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""
    arguments: NotRequired[Dict[str, UpdateToolRequestBodyArgumentsTypedDict]]
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class UpdateToolRequestBodyHTTP(BaseModel):
    blueprint: UpdateToolRequestBodyBlueprint
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    arguments: Optional[Dict[str, UpdateToolRequestBodyArguments]] = None
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class UpdateToolRequestBody3TypedDict(TypedDict):
    type: UpdateToolRequestBodyToolsRequestType
    id: NotRequired[str]
    path: NotRequired[str]
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    display_name: NotRequired[str]
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: NotRequired[str]
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    status: NotRequired[UpdateToolRequestBodyToolsRequestStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]
    http: NotRequired[UpdateToolRequestBodyHTTPTypedDict]


class UpdateToolRequestBody3(BaseModel):
    type: UpdateToolRequestBodyToolsRequestType

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K5ZT3CYFEFEXPTXZJJHXRAA8"
    )

    path: Optional[str] = None
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    display_name: Optional[str] = None
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: Optional[str] = None
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    status: Optional[UpdateToolRequestBodyToolsRequestStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None

    http: Optional[UpdateToolRequestBodyHTTP] = None


UpdateToolRequestBodyToolsStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolRequestBodyToolsType = Literal["json_schema",]


class UpdateToolRequestBodyJSONSchemaTypedDict(TypedDict):
    name: str
    r"""The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    schema_: Dict[str, Any]
    r"""The schema for the response format, described as a JSON Schema object. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""
    description: NotRequired[str]
    r"""A description of what the response format is for. This will be shown to the user."""
    strict: NotRequired[Nullable[bool]]
    r"""Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. Only compatible with `OpenAI` models."""


class UpdateToolRequestBodyJSONSchema(BaseModel):
    name: str
    r"""The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""

    schema_: Annotated[Dict[str, Any], pydantic.Field(alias="schema")]
    r"""The schema for the response format, described as a JSON Schema object. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""

    description: Optional[str] = None
    r"""A description of what the response format is for. This will be shown to the user."""

    strict: OptionalNullable[bool] = False
    r"""Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. Only compatible with `OpenAI` models."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description", "strict"]
        nullable_fields = ["strict"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class UpdateToolRequestBody2TypedDict(TypedDict):
    type: UpdateToolRequestBodyToolsType
    id: NotRequired[str]
    path: NotRequired[str]
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    display_name: NotRequired[str]
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: NotRequired[str]
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    status: NotRequired[UpdateToolRequestBodyToolsStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]
    json_schema: NotRequired[UpdateToolRequestBodyJSONSchemaTypedDict]


class UpdateToolRequestBody2(BaseModel):
    type: UpdateToolRequestBodyToolsType

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K5ZT3CYF0RGK34ZSKQ4JSEVB"
    )

    path: Optional[str] = None
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    display_name: Optional[str] = None
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: Optional[str] = None
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    status: Optional[UpdateToolRequestBodyToolsStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None

    json_schema: Optional[UpdateToolRequestBodyJSONSchema] = None


UpdateToolRequestBodyStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolRequestBodyType = Literal["function",]


class UpdateToolRequestBodyFunctionTypedDict(TypedDict):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    description: NotRequired[str]
    r"""A description of what the function does, used by the model to choose when and how to call the function."""
    strict: NotRequired[bool]
    r"""Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models."""
    parameters: NotRequired[Dict[str, Any]]
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class UpdateToolRequestBodyFunction(BaseModel):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""

    description: Optional[str] = None
    r"""A description of what the function does, used by the model to choose when and how to call the function."""

    strict: Optional[bool] = None
    r"""Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models."""

    parameters: Optional[Dict[str, Any]] = None
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class UpdateToolRequestBody1TypedDict(TypedDict):
    type: UpdateToolRequestBodyType
    path: NotRequired[str]
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    display_name: NotRequired[str]
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: NotRequired[str]
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    status: NotRequired[UpdateToolRequestBodyStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]
    function: NotRequired[UpdateToolRequestBodyFunctionTypedDict]


class UpdateToolRequestBody1(BaseModel):
    type: UpdateToolRequestBodyType

    path: Optional[str] = None
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    display_name: Optional[str] = None
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: Optional[str] = None
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    status: Optional[UpdateToolRequestBodyStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None

    function: Optional[UpdateToolRequestBodyFunction] = None


UpdateToolRequestBodyTypedDict = TypeAliasType(
    "UpdateToolRequestBodyTypedDict",
    Union[
        UpdateToolRequestBody1TypedDict,
        UpdateToolRequestBody4TypedDict,
        UpdateToolRequestBody5TypedDict,
        UpdateToolRequestBody2TypedDict,
        UpdateToolRequestBody3TypedDict,
    ],
)
r"""The tool to update"""


UpdateToolRequestBody = TypeAliasType(
    "UpdateToolRequestBody",
    Union[
        UpdateToolRequestBody1,
        UpdateToolRequestBody4,
        UpdateToolRequestBody5,
        UpdateToolRequestBody2,
        UpdateToolRequestBody3,
    ],
)
r"""The tool to update"""


class UpdateToolRequestTypedDict(TypedDict):
    tool_key: str
    request_body: NotRequired[UpdateToolRequestBodyTypedDict]
    r"""The tool to update"""


class UpdateToolRequest(BaseModel):
    tool_key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    request_body: Annotated[
        Optional[UpdateToolRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None
    r"""The tool to update"""


class UpdateToolToolsResponseBodyData(BaseModel):
    error: str
    r"""Error message"""


@dataclass(frozen=True)
class UpdateToolToolsResponseBody(OrqError):
    r"""Tool not found."""

    data: UpdateToolToolsResponseBodyData = field(hash=False)

    def __init__(
        self,
        data: UpdateToolToolsResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)


UpdateToolResponseBodyToolsResponse200ApplicationJSONStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolResponseBodyToolsResponse200ApplicationJSONType = Literal["code",]


UpdateToolResponseBodyLanguage = Literal["python",]


class UpdateToolResponseBodyCodeToolTypedDict(TypedDict):
    language: UpdateToolResponseBodyLanguage
    code: str
    r"""The code to execute."""
    parameters: NotRequired[Dict[str, Any]]
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class UpdateToolResponseBodyCodeTool(BaseModel):
    language: UpdateToolResponseBodyLanguage

    code: str
    r"""The code to execute."""

    parameters: Optional[Dict[str, Any]] = None
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class UpdateToolResponseBody5TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: UpdateToolResponseBodyToolsResponse200ApplicationJSONType
    code_tool: UpdateToolResponseBodyCodeToolTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[UpdateToolResponseBodyToolsResponse200ApplicationJSONStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class UpdateToolResponseBody5(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: UpdateToolResponseBodyToolsResponse200ApplicationJSONType

    code_tool: UpdateToolResponseBodyCodeTool

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K5ZT3CYF8GBE7ZQ6RGABH7CV"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[UpdateToolResponseBodyToolsResponse200ApplicationJSONStatus] = (
        "live"
    )
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


UpdateToolResponseBodyToolsResponse200Status = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolResponseBodyToolsResponse200Type = Literal["mcp",]


class UpdateToolResponseBodyHeadersTypedDict(TypedDict):
    value: str
    encrypted: NotRequired[bool]


class UpdateToolResponseBodyHeaders(BaseModel):
    value: str

    encrypted: Optional[bool] = False


UpdateToolResponseBodyToolsResponse200ApplicationJSON4Type = Literal["object",]


class UpdateToolResponseBodyInputSchemaTypedDict(TypedDict):
    r"""The original MCP tool input schema for LLM conversion"""

    type: UpdateToolResponseBodyToolsResponse200ApplicationJSON4Type
    properties: NotRequired[Dict[str, Any]]
    required: NotRequired[List[str]]


class UpdateToolResponseBodyInputSchema(BaseModel):
    r"""The original MCP tool input schema for LLM conversion"""

    type: UpdateToolResponseBodyToolsResponse200ApplicationJSON4Type

    properties: Optional[Dict[str, Any]] = None

    required: Optional[List[str]] = None


UpdateToolResponseBodyConnectionType = Literal[
    "http",
    "sse",
]
r"""The connection type used by the MCP server"""


class UpdateToolResponseBodyMcpTypedDict(TypedDict):
    server_id: str
    r"""The ID of the MCP server this tool belongs to"""
    tool_name: str
    r"""The original tool name from the MCP server"""
    server_url: str
    r"""The MCP server URL (cached for execution)"""
    input_schema: UpdateToolResponseBodyInputSchemaTypedDict
    r"""The original MCP tool input schema for LLM conversion"""
    connection_type: UpdateToolResponseBodyConnectionType
    r"""The connection type used by the MCP server"""
    headers: NotRequired[Dict[str, UpdateToolResponseBodyHeadersTypedDict]]
    r"""HTTP headers for MCP server requests (encrypted format)"""


class UpdateToolResponseBodyMcp(BaseModel):
    server_id: str
    r"""The ID of the MCP server this tool belongs to"""

    tool_name: str
    r"""The original tool name from the MCP server"""

    server_url: str
    r"""The MCP server URL (cached for execution)"""

    input_schema: UpdateToolResponseBodyInputSchema
    r"""The original MCP tool input schema for LLM conversion"""

    connection_type: UpdateToolResponseBodyConnectionType
    r"""The connection type used by the MCP server"""

    headers: Optional[Dict[str, UpdateToolResponseBodyHeaders]] = None
    r"""HTTP headers for MCP server requests (encrypted format)"""


class UpdateToolResponseBody4TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: UpdateToolResponseBodyToolsResponse200Type
    mcp: UpdateToolResponseBodyMcpTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[UpdateToolResponseBodyToolsResponse200Status]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class UpdateToolResponseBody4(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: UpdateToolResponseBodyToolsResponse200Type

    mcp: UpdateToolResponseBodyMcp

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K5ZT3CYEVQVACRWJD01VAX3Y"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[UpdateToolResponseBodyToolsResponse200Status] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


UpdateToolResponseBodyToolsResponseStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolResponseBodyToolsResponseType = Literal["http",]


UpdateToolResponseBodyMethod = Literal[
    "GET",
    "POST",
    "PUT",
    "DELETE",
]
r"""The HTTP method to use."""


class UpdateToolResponseBodyBlueprintTypedDict(TypedDict):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""
    method: UpdateToolResponseBodyMethod
    r"""The HTTP method to use."""
    headers: NotRequired[Dict[str, str]]
    r"""The headers to send with the request."""
    body: NotRequired[Dict[str, Any]]
    r"""The body to send with the request."""


class UpdateToolResponseBodyBlueprint(BaseModel):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""

    method: UpdateToolResponseBodyMethod
    r"""The HTTP method to use."""

    headers: Optional[Dict[str, str]] = None
    r"""The headers to send with the request."""

    body: Optional[Dict[str, Any]] = None
    r"""The body to send with the request."""


UpdateToolResponseBodyToolsResponse200ApplicationJSON3Type = Literal[
    "string",
    "number",
    "boolean",
]
r"""The type of the argument."""


UpdateToolResponseBodyDefaultValueTypedDict = TypeAliasType(
    "UpdateToolResponseBodyDefaultValueTypedDict", Union[str, float, bool]
)
r"""The default value of the argument."""


UpdateToolResponseBodyDefaultValue = TypeAliasType(
    "UpdateToolResponseBodyDefaultValue", Union[str, float, bool]
)
r"""The default value of the argument."""


class UpdateToolResponseBodyArgumentsTypedDict(TypedDict):
    type: UpdateToolResponseBodyToolsResponse200ApplicationJSON3Type
    r"""The type of the argument."""
    description: str
    r"""A description of the argument."""
    send_to_model: NotRequired[bool]
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""
    default_value: NotRequired[UpdateToolResponseBodyDefaultValueTypedDict]
    r"""The default value of the argument."""


class UpdateToolResponseBodyArguments(BaseModel):
    type: UpdateToolResponseBodyToolsResponse200ApplicationJSON3Type
    r"""The type of the argument."""

    description: str
    r"""A description of the argument."""

    send_to_model: Optional[bool] = True
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""

    default_value: Optional[UpdateToolResponseBodyDefaultValue] = None
    r"""The default value of the argument."""


class UpdateToolResponseBodyHTTPTypedDict(TypedDict):
    blueprint: UpdateToolResponseBodyBlueprintTypedDict
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""
    arguments: NotRequired[Dict[str, UpdateToolResponseBodyArgumentsTypedDict]]
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class UpdateToolResponseBodyHTTP(BaseModel):
    blueprint: UpdateToolResponseBodyBlueprint
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    arguments: Optional[Dict[str, UpdateToolResponseBodyArguments]] = None
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class UpdateToolResponseBody3TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: UpdateToolResponseBodyToolsResponseType
    http: UpdateToolResponseBodyHTTPTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[UpdateToolResponseBodyToolsResponseStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class UpdateToolResponseBody3(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: UpdateToolResponseBodyToolsResponseType

    http: UpdateToolResponseBodyHTTP

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K5ZT3CYEH63CDFDPD8FCN13G"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[UpdateToolResponseBodyToolsResponseStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


UpdateToolResponseBodyToolsStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolResponseBodyToolsType = Literal["json_schema",]


class UpdateToolResponseBodyJSONSchemaTypedDict(TypedDict):
    name: str
    r"""The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    schema_: Dict[str, Any]
    r"""The schema for the response format, described as a JSON Schema object. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""
    description: NotRequired[str]
    r"""A description of what the response format is for. This will be shown to the user."""
    strict: NotRequired[Nullable[bool]]
    r"""Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. Only compatible with `OpenAI` models."""


class UpdateToolResponseBodyJSONSchema(BaseModel):
    name: str
    r"""The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""

    schema_: Annotated[Dict[str, Any], pydantic.Field(alias="schema")]
    r"""The schema for the response format, described as a JSON Schema object. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""

    description: Optional[str] = None
    r"""A description of what the response format is for. This will be shown to the user."""

    strict: OptionalNullable[bool] = False
    r"""Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. Only compatible with `OpenAI` models."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description", "strict"]
        nullable_fields = ["strict"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class UpdateToolResponseBody2TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: UpdateToolResponseBodyToolsType
    json_schema: UpdateToolResponseBodyJSONSchemaTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[UpdateToolResponseBodyToolsStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class UpdateToolResponseBody2(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: UpdateToolResponseBodyToolsType

    json_schema: UpdateToolResponseBodyJSONSchema

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K5ZT3CYDA21YPH9SND7X8FRN"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[UpdateToolResponseBodyToolsStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


UpdateToolResponseBodyStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


UpdateToolResponseBodyType = Literal["function",]


class UpdateToolResponseBodyFunctionTypedDict(TypedDict):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    description: NotRequired[str]
    r"""A description of what the function does, used by the model to choose when and how to call the function."""
    strict: NotRequired[bool]
    r"""Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models."""
    parameters: NotRequired[Dict[str, Any]]
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class UpdateToolResponseBodyFunction(BaseModel):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""

    description: Optional[str] = None
    r"""A description of what the function does, used by the model to choose when and how to call the function."""

    strict: Optional[bool] = None
    r"""Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models."""

    parameters: Optional[Dict[str, Any]] = None
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class UpdateToolResponseBody1TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    project_id: str
    workspace_id: str
    created: str
    updated: str
    type: UpdateToolResponseBodyType
    function: UpdateToolResponseBodyFunctionTypedDict
    id: NotRequired[str]
    created_by_id: NotRequired[str]
    r"""The id of the user that created the tool"""
    updated_by_id: NotRequired[str]
    r"""The id of the user that last updated the tool"""
    status: NotRequired[UpdateToolResponseBodyStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]


class UpdateToolResponseBody1(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    project_id: str

    workspace_id: str

    created: str

    updated: str

    type: UpdateToolResponseBodyType

    function: UpdateToolResponseBodyFunction

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K5ZT3CYD4ETM76S49R63RMZ2"
    )

    created_by_id: Optional[str] = None
    r"""The id of the user that created the tool"""

    updated_by_id: Optional[str] = None
    r"""The id of the user that last updated the tool"""

    status: Optional[UpdateToolResponseBodyStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None


UpdateToolResponseBodyTypedDict = TypeAliasType(
    "UpdateToolResponseBodyTypedDict",
    Union[
        UpdateToolResponseBody1TypedDict,
        UpdateToolResponseBody2TypedDict,
        UpdateToolResponseBody3TypedDict,
        UpdateToolResponseBody4TypedDict,
        UpdateToolResponseBody5TypedDict,
    ],
)
r"""Successfully updated the tool."""


UpdateToolResponseBody = TypeAliasType(
    "UpdateToolResponseBody",
    Union[
        UpdateToolResponseBody1,
        UpdateToolResponseBody2,
        UpdateToolResponseBody3,
        UpdateToolResponseBody4,
        UpdateToolResponseBody5,
    ],
)
r"""Successfully updated the tool."""
