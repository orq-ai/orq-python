"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class UsageTypedDict(TypedDict):
    r"""Usage statistics to add to the deployment"""

    prompt_tokens: float
    r"""Number of tokens in the prompt."""
    completion_tokens: float
    r"""Number of tokens in the generated completion."""
    total_tokens: NotRequired[float]
    r"""Total number of tokens used in the request (prompt + completion)."""


class Usage(BaseModel):
    r"""Usage statistics to add to the deployment"""

    prompt_tokens: float
    r"""Number of tokens in the prompt."""

    completion_tokens: float
    r"""Number of tokens in the generated completion."""

    total_tokens: Optional[float] = None
    r"""Total number of tokens used in the request (prompt + completion)."""


class PerformanceTypedDict(TypedDict):
    latency: float
    r"""Total time in milliseconds of the request to the LLM provider API."""
    time_to_first_token: NotRequired[float]
    r"""Total time in milliseconds to generate the first token of the completion."""


class Performance(BaseModel):
    latency: float
    r"""Total time in milliseconds of the request to the LLM provider API."""

    time_to_first_token: Optional[float] = None
    r"""Total time in milliseconds to generate the first token of the completion."""


DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role = Literal[
    "tool"
]
r"""The role of the messages author, in this case tool."""

DeploymentCreateMetricMessagesDeploymentsMetricsRequestContentTypedDict = TypeAliasType(
    "DeploymentCreateMetricMessagesDeploymentsMetricsRequestContentTypedDict",
    Union[str, List[str]],
)
r"""The contents of the tool message."""


DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent = TypeAliasType(
    "DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent",
    Union[str, List[str]],
)
r"""The contents of the tool message."""


class DeploymentCreateMetricMessages5TypedDict(TypedDict):
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role
    r"""The role of the messages author, in this case tool."""
    content: DeploymentCreateMetricMessagesDeploymentsMetricsRequestContentTypedDict
    r"""The contents of the tool message."""
    tool_call_id: str
    r"""Tool call that this message is responding to."""


class DeploymentCreateMetricMessages5(BaseModel):
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBody5Role
    r"""The role of the messages author, in this case tool."""

    content: DeploymentCreateMetricMessagesDeploymentsMetricsRequestContent
    r"""The contents of the tool message."""

    tool_call_id: str
    r"""Tool call that this message is responding to."""


DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType = Literal[
    "refusal"
]
r"""The type of the content part."""


class DeploymentCreateMetric2DeploymentsMetrics2TypedDict(TypedDict):
    type: DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType
    r"""The type of the content part."""
    refusal: str
    r"""The refusal message generated by the model."""


class DeploymentCreateMetric2DeploymentsMetrics2(BaseModel):
    type: DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyMessagesType
    r"""The type of the content part."""

    refusal: str
    r"""The refusal message generated by the model."""


DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType = Literal["text"]
r"""The type of the content part."""


class DeploymentCreateMetric2DeploymentsMetrics1TypedDict(TypedDict):
    type: DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType
    r"""The type of the content part."""
    text: str
    r"""The text content."""


class DeploymentCreateMetric2DeploymentsMetrics1(BaseModel):
    type: DeploymentCreateMetric2DeploymentsMetricsRequestRequestBodyType
    r"""The type of the content part."""

    text: str
    r"""The text content."""


DeploymentCreateMetricContentDeploymentsMetrics2TypedDict = TypeAliasType(
    "DeploymentCreateMetricContentDeploymentsMetrics2TypedDict",
    Union[
        DeploymentCreateMetric2DeploymentsMetrics1TypedDict,
        DeploymentCreateMetric2DeploymentsMetrics2TypedDict,
    ],
)


DeploymentCreateMetricContentDeploymentsMetrics2 = TypeAliasType(
    "DeploymentCreateMetricContentDeploymentsMetrics2",
    Union[
        DeploymentCreateMetric2DeploymentsMetrics1,
        DeploymentCreateMetric2DeploymentsMetrics2,
    ],
)


DeploymentCreateMetricMessagesDeploymentsMetricsContentTypedDict = TypeAliasType(
    "DeploymentCreateMetricMessagesDeploymentsMetricsContentTypedDict",
    Union[str, List[DeploymentCreateMetricContentDeploymentsMetrics2TypedDict]],
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


DeploymentCreateMetricMessagesDeploymentsMetricsContent = TypeAliasType(
    "DeploymentCreateMetricMessagesDeploymentsMetricsContent",
    Union[str, List[DeploymentCreateMetricContentDeploymentsMetrics2]],
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole = Literal[
    "assistant"
]
r"""The role of the messages author, in this case `assistant`."""


class DeploymentCreateMetricMessagesAudioTypedDict(TypedDict):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


class DeploymentCreateMetricMessagesAudio(BaseModel):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


DeploymentCreateMetricMessagesType = Literal["function"]
r"""The type of the tool. Currently, only `5` is supported."""


class DeploymentCreateMetricMessagesFunctionTypedDict(TypedDict):
    name: NotRequired[str]
    r"""The name of the function to call."""
    arguments: NotRequired[str]
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class DeploymentCreateMetricMessagesFunction(BaseModel):
    name: Optional[str] = None
    r"""The name of the function to call."""

    arguments: Optional[str] = None
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class DeploymentCreateMetricMessagesToolCallsTypedDict(TypedDict):
    id: str
    r"""The ID of the tool call."""
    type: DeploymentCreateMetricMessagesType
    r"""The type of the tool. Currently, only `5` is supported."""
    function: DeploymentCreateMetricMessagesFunctionTypedDict


class DeploymentCreateMetricMessagesToolCalls(BaseModel):
    id: str
    r"""The ID of the tool call."""

    type: DeploymentCreateMetricMessagesType
    r"""The type of the tool. Currently, only `5` is supported."""

    function: DeploymentCreateMetricMessagesFunction


class DeploymentCreateMetricMessages4TypedDict(TypedDict):
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole
    r"""The role of the messages author, in this case `assistant`."""
    content: NotRequired[
        DeploymentCreateMetricMessagesDeploymentsMetricsContentTypedDict
    ]
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""
    refusal: NotRequired[Nullable[str]]
    r"""The refusal message by the assistant."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    audio: NotRequired[Nullable[DeploymentCreateMetricMessagesAudioTypedDict]]
    r"""Data about a previous audio response from the model."""
    tool_calls: NotRequired[List[DeploymentCreateMetricMessagesToolCallsTypedDict]]
    r"""The tool calls generated by the model, such as function calls."""


class DeploymentCreateMetricMessages4(BaseModel):
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRequestRequestBodyRole
    r"""The role of the messages author, in this case `assistant`."""

    content: Optional[DeploymentCreateMetricMessagesDeploymentsMetricsContent] = None
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""

    refusal: OptionalNullable[str] = UNSET
    r"""The refusal message by the assistant."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""

    audio: OptionalNullable[DeploymentCreateMetricMessagesAudio] = UNSET
    r"""Data about a previous audio response from the model."""

    tool_calls: Optional[List[DeploymentCreateMetricMessagesToolCalls]] = None
    r"""The tool calls generated by the model, such as function calls."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "refusal", "name", "audio", "tool_calls"]
        nullable_fields = ["refusal", "audio"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole = Literal["user"]
r"""The role of the messages author, in this case `user`."""

DeploymentCreateMetric2DeploymentsMetricsRequestType = Literal["input_audio"]

DeploymentCreateMetric2Format = Literal["mp3", "wav"]
r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class DeploymentCreateMetric2InputAudioTypedDict(TypedDict):
    data: str
    r"""Base64 encoded audio data."""
    format_: DeploymentCreateMetric2Format
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class DeploymentCreateMetric2InputAudio(BaseModel):
    data: str
    r"""Base64 encoded audio data."""

    format_: Annotated[DeploymentCreateMetric2Format, pydantic.Field(alias="format")]
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class DeploymentCreateMetric23TypedDict(TypedDict):
    type: DeploymentCreateMetric2DeploymentsMetricsRequestType
    input_audio: DeploymentCreateMetric2InputAudioTypedDict


class DeploymentCreateMetric23(BaseModel):
    type: DeploymentCreateMetric2DeploymentsMetricsRequestType

    input_audio: DeploymentCreateMetric2InputAudio


DeploymentCreateMetric2DeploymentsMetricsType = Literal["image_url"]

DeploymentCreateMetric2Detail = Literal["low", "high", "auto"]
r"""Specifies the detail level of the image."""


class DeploymentCreateMetric2ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""
    detail: NotRequired[DeploymentCreateMetric2Detail]
    r"""Specifies the detail level of the image."""


class DeploymentCreateMetric2ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""

    detail: Optional[DeploymentCreateMetric2Detail] = None
    r"""Specifies the detail level of the image."""


class DeploymentCreateMetric22TypedDict(TypedDict):
    type: DeploymentCreateMetric2DeploymentsMetricsType
    image_url: DeploymentCreateMetric2ImageURLTypedDict


class DeploymentCreateMetric22(BaseModel):
    type: DeploymentCreateMetric2DeploymentsMetricsType

    image_url: DeploymentCreateMetric2ImageURL


DeploymentCreateMetric2Type = Literal["text"]


class DeploymentCreateMetric21TypedDict(TypedDict):
    type: DeploymentCreateMetric2Type
    text: str


class DeploymentCreateMetric21(BaseModel):
    type: DeploymentCreateMetric2Type

    text: str


DeploymentCreateMetricContent2TypedDict = TypeAliasType(
    "DeploymentCreateMetricContent2TypedDict",
    Union[
        DeploymentCreateMetric21TypedDict,
        DeploymentCreateMetric22TypedDict,
        DeploymentCreateMetric23TypedDict,
    ],
)


DeploymentCreateMetricContent2 = TypeAliasType(
    "DeploymentCreateMetricContent2",
    Union[DeploymentCreateMetric21, DeploymentCreateMetric22, DeploymentCreateMetric23],
)


DeploymentCreateMetricMessagesContentTypedDict = TypeAliasType(
    "DeploymentCreateMetricMessagesContentTypedDict",
    Union[str, List[DeploymentCreateMetricContent2TypedDict]],
)
r"""The contents of the user message."""


DeploymentCreateMetricMessagesContent = TypeAliasType(
    "DeploymentCreateMetricMessagesContent",
    Union[str, List[DeploymentCreateMetricContent2]],
)
r"""The contents of the user message."""


class DeploymentCreateMetricMessages3TypedDict(TypedDict):
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole
    r"""The role of the messages author, in this case `user`."""
    content: DeploymentCreateMetricMessagesContentTypedDict
    r"""The contents of the user message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class DeploymentCreateMetricMessages3(BaseModel):
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRequestRole
    r"""The role of the messages author, in this case `user`."""

    content: DeploymentCreateMetricMessagesContent
    r"""The contents of the user message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentCreateMetricMessagesDeploymentsMetricsRole = Literal["system"]
r"""The role of the messages author, in this case `system`."""


class DeploymentCreateMetricMessages2TypedDict(TypedDict):
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRole
    r"""The role of the messages author, in this case `system`."""
    content: str
    r"""The contents of the system message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class DeploymentCreateMetricMessages2(BaseModel):
    role: DeploymentCreateMetricMessagesDeploymentsMetricsRole
    r"""The role of the messages author, in this case `system`."""

    content: str
    r"""The contents of the system message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentCreateMetricMessagesRole = Literal["developer"]
r"""The role of the messages author, in this case  `developer`."""


class DeploymentCreateMetricMessages1TypedDict(TypedDict):
    role: DeploymentCreateMetricMessagesRole
    r"""The role of the messages author, in this case  `developer`."""
    content: str
    r"""The contents of the developer message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class DeploymentCreateMetricMessages1(BaseModel):
    role: DeploymentCreateMetricMessagesRole
    r"""The role of the messages author, in this case  `developer`."""

    content: str
    r"""The contents of the developer message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentCreateMetricMessagesTypedDict = TypeAliasType(
    "DeploymentCreateMetricMessagesTypedDict",
    Union[
        DeploymentCreateMetricMessages1TypedDict,
        DeploymentCreateMetricMessages2TypedDict,
        DeploymentCreateMetricMessages3TypedDict,
        DeploymentCreateMetricMessages5TypedDict,
        DeploymentCreateMetricMessages4TypedDict,
    ],
)


DeploymentCreateMetricMessages = TypeAliasType(
    "DeploymentCreateMetricMessages",
    Union[
        DeploymentCreateMetricMessages1,
        DeploymentCreateMetricMessages2,
        DeploymentCreateMetricMessages3,
        DeploymentCreateMetricMessages5,
        DeploymentCreateMetricMessages4,
    ],
)


DeploymentCreateMetricMessageDeploymentsMetricsRole = Literal[
    "system",
    "assistant",
    "user",
    "exception",
    "tool",
    "prompt",
    "correction",
    "expected_output",
]
r"""The role of the prompt message"""


class Message3TypedDict(TypedDict):
    role: DeploymentCreateMetricMessageDeploymentsMetricsRole
    r"""The role of the prompt message"""
    url: str


class Message3(BaseModel):
    role: DeploymentCreateMetricMessageDeploymentsMetricsRole
    r"""The role of the prompt message"""

    url: str


DeploymentCreateMetricMessageRole = Literal[
    "system",
    "assistant",
    "user",
    "exception",
    "tool",
    "prompt",
    "correction",
    "expected_output",
]
r"""The role of the prompt message"""


class Message2TypedDict(TypedDict):
    role: DeploymentCreateMetricMessageRole
    r"""The role of the prompt message"""
    content: Nullable[str]


class Message2(BaseModel):
    role: DeploymentCreateMetricMessageRole
    r"""The role of the prompt message"""

    content: Nullable[str]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["content"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


MessageRole = Literal[
    "system",
    "assistant",
    "user",
    "exception",
    "tool",
    "prompt",
    "correction",
    "expected_output",
]
r"""The role of the prompt message"""

MessageType = Literal["function"]


class MessageFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class MessageFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class MessageToolCallsTypedDict(TypedDict):
    type: MessageType
    function: MessageFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class MessageToolCalls(BaseModel):
    type: MessageType

    function: MessageFunction

    id: Optional[str] = None

    index: Optional[float] = None


class Message1TypedDict(TypedDict):
    role: MessageRole
    r"""The role of the prompt message"""
    tool_calls: List[MessageToolCallsTypedDict]
    content: NotRequired[Nullable[str]]


class Message1(BaseModel):
    role: MessageRole
    r"""The role of the prompt message"""

    tool_calls: List[MessageToolCalls]

    content: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content"]
        nullable_fields = ["content"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


MessageTypedDict = TypeAliasType(
    "MessageTypedDict", Union[Message2TypedDict, Message3TypedDict, Message1TypedDict]
)


Message = TypeAliasType("Message", Union[Message2, Message3, Message1])


class ChoicesTypedDict(TypedDict):
    index: float
    message: NotRequired[MessageTypedDict]
    finish_reason: NotRequired[Nullable[str]]


class Choices(BaseModel):
    index: float

    message: Optional[Message] = None

    finish_reason: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["message", "finish_reason"]
        nullable_fields = ["finish_reason"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class DeploymentCreateMetricFeedbackTypedDict(TypedDict):
    r"""Feedback from the user on the completion"""

    score: int
    r"""The feedback score. This allow you to come with specific logic on what a `score` number means"""


class DeploymentCreateMetricFeedback(BaseModel):
    r"""Feedback from the user on the completion"""

    score: int
    r"""The feedback score. This allow you to come with specific logic on what a `score` number means"""


class DeploymentCreateMetricRequestBodyTypedDict(TypedDict):
    r"""The deployment request payload"""

    metadata: NotRequired[Dict[str, Any]]
    r"""Your own custom key-value pairs can be attached to the logs. This is useful for storing additional information related to your interactions with the LLM providers or specifics within your application."""
    usage: NotRequired[UsageTypedDict]
    r"""Usage statistics to add to the deployment"""
    performance: NotRequired[PerformanceTypedDict]
    messages: NotRequired[List[DeploymentCreateMetricMessagesTypedDict]]
    r"""A list of messages sent to the model."""
    choices: NotRequired[List[ChoicesTypedDict]]
    r"""A list of completion choices. If you are using a `completion` model then you must provide the `completion content` with the chat completion format"""
    feedback: NotRequired[DeploymentCreateMetricFeedbackTypedDict]
    r"""Feedback from the user on the completion"""


class DeploymentCreateMetricRequestBody(BaseModel):
    r"""The deployment request payload"""

    metadata: Optional[Dict[str, Any]] = None
    r"""Your own custom key-value pairs can be attached to the logs. This is useful for storing additional information related to your interactions with the LLM providers or specifics within your application."""

    usage: Optional[Usage] = None
    r"""Usage statistics to add to the deployment"""

    performance: Optional[Performance] = None

    messages: Optional[List[DeploymentCreateMetricMessages]] = None
    r"""A list of messages sent to the model."""

    choices: Optional[List[Choices]] = None
    r"""A list of completion choices. If you are using a `completion` model then you must provide the `completion content` with the chat completion format"""

    feedback: Optional[DeploymentCreateMetricFeedback] = None
    r"""Feedback from the user on the completion"""


class DeploymentCreateMetricRequestTypedDict(TypedDict):
    id: str
    r"""Deployment ID"""
    request_body: DeploymentCreateMetricRequestBodyTypedDict
    r"""The deployment request payload"""


class DeploymentCreateMetricRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Deployment ID"""

    request_body: Annotated[
        DeploymentCreateMetricRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
    r"""The deployment request payload"""


class DeploymentCreateMetricResponseBodyTypedDict(TypedDict):
    r"""Successful operation"""

    success: bool
    r"""Whether the request was successful"""


class DeploymentCreateMetricResponseBody(BaseModel):
    r"""Successful operation"""

    success: bool
    r"""Whether the request was successful"""
