"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dataclasses import dataclass, field
import httpx
from orq_ai_sdk.models import OrqError
from orq_ai_sdk.types import BaseModel
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetAgentRequestTypedDict(TypedDict):
    id: str
    r"""The ID of the agent to retrieve"""


class GetAgentRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The ID of the agent to retrieve"""


class GetAgentAgentsResponseBodyData(BaseModel):
    message: str


@dataclass(frozen=True)
class GetAgentAgentsResponseBody(OrqError):
    r"""Agent not found"""

    data: GetAgentAgentsResponseBodyData = field(hash=False)

    def __init__(
        self,
        data: GetAgentAgentsResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)


GetAgentStatus = Literal[
    "live",
    "draft",
    "pending",
    "published",
]
r"""The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""


GetAgentToolApprovalRequired = Literal[
    "all",
    "respect_tool",
    "none",
]
r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""


class ConditionsTypedDict(TypedDict):
    condition: str
    r"""The argument of the tool call to evaluate"""
    operator: str
    r"""The operator to use"""
    value: str
    r"""The value to compare against"""


class Conditions(BaseModel):
    condition: str
    r"""The argument of the tool call to evaluate"""

    operator: str
    r"""The operator to use"""

    value: str
    r"""The value to compare against"""


class GetAgentToolsTypedDict(TypedDict):
    id: str
    r"""The id of the resource"""
    action_type: str
    display_name: NotRequired[str]
    requires_approval: NotRequired[bool]
    conditions: NotRequired[List[ConditionsTypedDict]]
    mcp_server: NotRequired[str]
    r"""The id of the resource"""
    timeout: NotRequired[float]
    r"""Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)"""


class GetAgentTools(BaseModel):
    id: str
    r"""The id of the resource"""

    action_type: str

    display_name: Optional[str] = None

    requires_approval: Optional[bool] = False

    conditions: Optional[List[Conditions]] = None

    mcp_server: Annotated[Optional[str], pydantic.Field(alias="mcpServer")] = None
    r"""The id of the resource"""

    timeout: Optional[float] = 120
    r"""Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)"""


class GetAgentSettingsTypedDict(TypedDict):
    max_execution_time: int
    r"""Max execution time in seconds"""
    tools: List[GetAgentToolsTypedDict]
    max_iterations: NotRequired[int]
    tool_approval_required: NotRequired[GetAgentToolApprovalRequired]
    r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""


class GetAgentSettings(BaseModel):
    max_execution_time: int
    r"""Max execution time in seconds"""

    tools: List[GetAgentTools]

    max_iterations: Optional[int] = 10

    tool_approval_required: Optional[GetAgentToolApprovalRequired] = "respect_tool"
    r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""


class GetAgentModelTypedDict(TypedDict):
    id: str
    r"""The database ID of the primary model"""
    integration_id: NotRequired[str]
    r"""Optional integration ID for custom model configurations"""
    fallback_models: NotRequired[List[str]]
    r"""Optional array of fallback model IDs that will be used automatically in order if the primary model fails"""
    max_tokens: NotRequired[int]
    r"""Maximum number of tokens for model responses"""
    temperature: NotRequired[float]
    r"""Temperature setting for model responses"""


class GetAgentModel(BaseModel):
    id: str
    r"""The database ID of the primary model"""

    integration_id: Optional[str] = None
    r"""Optional integration ID for custom model configurations"""

    fallback_models: Optional[List[str]] = None
    r"""Optional array of fallback model IDs that will be used automatically in order if the primary model fails"""

    max_tokens: Optional[int] = None
    r"""Maximum number of tokens for model responses"""

    temperature: Optional[float] = None
    r"""Temperature setting for model responses"""


class GetAgentTeamOfAgentsTypedDict(TypedDict):
    id: str
    role: NotRequired[str]
    r"""The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to."""


class GetAgentTeamOfAgents(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]

    role: Optional[str] = None
    r"""The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to."""


class GetAgentMetricsTypedDict(TypedDict):
    total_cost: NotRequired[float]


class GetAgentMetrics(BaseModel):
    total_cost: Optional[float] = 0


GetAgentConfigurationType = Literal["query",]


class GetAgentConfiguration2TypedDict(TypedDict):
    type: GetAgentConfigurationType
    query: str


class GetAgentConfiguration2(BaseModel):
    type: GetAgentConfigurationType

    query: str


GetAgentConfigurationAgentsType = Literal["last_user_message",]


class GetAgentConfiguration1TypedDict(TypedDict):
    type: GetAgentConfigurationAgentsType


class GetAgentConfiguration1(BaseModel):
    type: GetAgentConfigurationAgentsType


GetAgentConfigurationTypedDict = TypeAliasType(
    "GetAgentConfigurationTypedDict",
    Union[GetAgentConfiguration1TypedDict, GetAgentConfiguration2TypedDict],
)
r"""Defines the configuration settings which can either be for a user message or a text entry."""


GetAgentConfiguration = TypeAliasType(
    "GetAgentConfiguration", Union[GetAgentConfiguration1, GetAgentConfiguration2]
)
r"""Defines the configuration settings which can either be for a user message or a text entry."""


class GetAgentKnowledgeBasesTypedDict(TypedDict):
    knowledge_id: str
    r"""The id of the resource"""
    configuration: GetAgentConfigurationTypedDict
    r"""Defines the configuration settings which can either be for a user message or a text entry."""
    id: NotRequired[str]
    r"""The id of the resource"""


class GetAgentKnowledgeBases(BaseModel):
    knowledge_id: str
    r"""The id of the resource"""

    configuration: GetAgentConfiguration
    r"""Defines the configuration settings which can either be for a user message or a text entry."""

    id: Optional[str] = "01K5QVJ9EJ7XANYHFG6QW4P43G"
    r"""The id of the resource"""


HiddenPanels = Literal[
    "model",
    "tools",
    "knowledge_bases",
    "variables",
    "runtime_constraints",
]


class GetAgentResponseBodyTypedDict(TypedDict):
    r"""Agent retrieved successfully"""

    id: str
    key: str
    workspace_id: str
    project_id: str
    role: str
    description: str
    instructions: str
    status: GetAgentStatus
    r"""The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    model: GetAgentModelTypedDict
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    memory_stores: List[str]
    team_of_agents: List[GetAgentTeamOfAgentsTypedDict]
    r"""The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks."""
    created_by_id: NotRequired[str]
    updated_by_id: NotRequired[str]
    created: NotRequired[str]
    updated: NotRequired[str]
    system_prompt: NotRequired[str]
    settings: NotRequired[GetAgentSettingsTypedDict]
    version_hash: NotRequired[str]
    metrics: NotRequired[GetAgentMetricsTypedDict]
    variables: NotRequired[Dict[str, Any]]
    r"""Extracted variables from agent instructions"""
    knowledge_bases: NotRequired[List[GetAgentKnowledgeBasesTypedDict]]
    r"""Agent knowledge bases reference"""
    hidden_panels: NotRequired[List[HiddenPanels]]
    r"""List of hidden collapsed panels in configuration. Duplicates are not allowed."""


class GetAgentResponseBody(BaseModel):
    r"""Agent retrieved successfully"""

    id: Annotated[str, pydantic.Field(alias="_id")]

    key: str

    workspace_id: str

    project_id: str

    role: str

    description: str

    instructions: str

    status: GetAgentStatus
    r"""The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    model: GetAgentModel

    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    memory_stores: List[str]

    team_of_agents: List[GetAgentTeamOfAgents]
    r"""The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks."""

    created_by_id: Optional[str] = None

    updated_by_id: Optional[str] = None

    created: Optional[str] = None

    updated: Optional[str] = None

    system_prompt: Optional[str] = None

    settings: Optional[GetAgentSettings] = None

    version_hash: Optional[str] = None

    metrics: Optional[GetAgentMetrics] = None

    variables: Optional[Dict[str, Any]] = None
    r"""Extracted variables from agent instructions"""

    knowledge_bases: Optional[List[GetAgentKnowledgeBases]] = None
    r"""Agent knowledge bases reference"""

    hidden_panels: Optional[List[HiddenPanels]] = None
    r"""List of hidden collapsed panels in configuration. Duplicates are not allowed."""
