"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel
from orq_ai_sdk.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ListAgentsRequestTypedDict(TypedDict):
    limit: NotRequired[float]
    r"""A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10"""
    starting_after: NotRequired[str]
    r"""A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list."""
    ending_before: NotRequired[str]
    r"""A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list."""


class ListAgentsRequest(BaseModel):
    limit: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10"""

    starting_after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list."""

    ending_before: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list."""


ListAgentsObject = Literal["list"]

ListAgentsStatus = Literal["live", "draft", "pending", "published"]
r"""The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

ListAgentsToolApprovalRequired = Literal["all", "respect_tool", "none"]
r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""


class ListAgentsConditionsTypedDict(TypedDict):
    condition: str
    r"""The argument of the tool call to evaluate"""
    operator: str
    r"""The operator to use"""
    value: str
    r"""The value to compare against"""


class ListAgentsConditions(BaseModel):
    condition: str
    r"""The argument of the tool call to evaluate"""

    operator: str
    r"""The operator to use"""

    value: str
    r"""The value to compare against"""


class ListAgentsToolsTypedDict(TypedDict):
    id: str
    r"""The id of the resource"""
    action_type: str
    display_name: NotRequired[str]
    requires_approval: NotRequired[bool]
    conditions: NotRequired[List[ListAgentsConditionsTypedDict]]
    mcp_server: NotRequired[str]
    r"""The id of the resource"""
    timeout: NotRequired[float]
    r"""Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)"""


class ListAgentsTools(BaseModel):
    id: str
    r"""The id of the resource"""

    action_type: str

    display_name: Optional[str] = None

    requires_approval: Optional[bool] = False

    conditions: Optional[List[ListAgentsConditions]] = None

    mcp_server: Annotated[Optional[str], pydantic.Field(alias="mcpServer")] = None
    r"""The id of the resource"""

    timeout: Optional[float] = 120
    r"""Tool execution timeout in seconds (default: 2 minutes, max: 10 minutes)"""


class ListAgentsSettingsTypedDict(TypedDict):
    max_execution_time: int
    r"""Max execution time in seconds"""
    tools: List[ListAgentsToolsTypedDict]
    max_iterations: NotRequired[int]
    tool_approval_required: NotRequired[ListAgentsToolApprovalRequired]
    r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""


class ListAgentsSettings(BaseModel):
    max_execution_time: int
    r"""Max execution time in seconds"""

    tools: List[ListAgentsTools]

    max_iterations: Optional[int] = 10

    tool_approval_required: Optional[ListAgentsToolApprovalRequired] = "respect_tool"
    r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""


class ListAgentsModelTypedDict(TypedDict):
    id: str
    r"""The database ID of the primary model"""
    integration_id: NotRequired[str]
    r"""Optional integration ID for custom model configurations"""
    fallback_models: NotRequired[List[str]]
    r"""Optional array of fallback model IDs that will be used automatically in order if the primary model fails"""
    max_tokens: NotRequired[int]
    r"""Maximum number of tokens for model responses"""
    temperature: NotRequired[float]
    r"""Temperature setting for model responses"""


class ListAgentsModel(BaseModel):
    id: str
    r"""The database ID of the primary model"""

    integration_id: Optional[str] = None
    r"""Optional integration ID for custom model configurations"""

    fallback_models: Optional[List[str]] = None
    r"""Optional array of fallback model IDs that will be used automatically in order if the primary model fails"""

    max_tokens: Optional[int] = None
    r"""Maximum number of tokens for model responses"""

    temperature: Optional[float] = None
    r"""Temperature setting for model responses"""


class ListAgentsTeamOfAgentsTypedDict(TypedDict):
    id: str
    role: NotRequired[str]
    r"""The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to."""


class ListAgentsTeamOfAgents(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]

    role: Optional[str] = None
    r"""The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to."""


class ListAgentsMetricsTypedDict(TypedDict):
    total_cost: NotRequired[float]


class ListAgentsMetrics(BaseModel):
    total_cost: Optional[float] = 0


ListAgentsConfigurationType = Literal["query"]


class ListAgentsConfiguration2TypedDict(TypedDict):
    type: ListAgentsConfigurationType
    query: str


class ListAgentsConfiguration2(BaseModel):
    type: ListAgentsConfigurationType

    query: str


ListAgentsConfigurationAgentsType = Literal["last_user_message"]


class ListAgentsConfiguration1TypedDict(TypedDict):
    type: ListAgentsConfigurationAgentsType


class ListAgentsConfiguration1(BaseModel):
    type: ListAgentsConfigurationAgentsType


ListAgentsConfigurationTypedDict = TypeAliasType(
    "ListAgentsConfigurationTypedDict",
    Union[ListAgentsConfiguration1TypedDict, ListAgentsConfiguration2TypedDict],
)
r"""Defines the configuration settings which can either be for a user message or a text entry."""


ListAgentsConfiguration = TypeAliasType(
    "ListAgentsConfiguration", Union[ListAgentsConfiguration1, ListAgentsConfiguration2]
)
r"""Defines the configuration settings which can either be for a user message or a text entry."""


class ListAgentsKnowledgeBasesTypedDict(TypedDict):
    knowledge_id: str
    r"""The id of the resource"""
    configuration: ListAgentsConfigurationTypedDict
    r"""Defines the configuration settings which can either be for a user message or a text entry."""
    id: NotRequired[str]
    r"""The id of the resource"""


class ListAgentsKnowledgeBases(BaseModel):
    knowledge_id: str
    r"""The id of the resource"""

    configuration: ListAgentsConfiguration
    r"""Defines the configuration settings which can either be for a user message or a text entry."""

    id: Optional[str] = "01K5GVCVA0AG94RM37J9N25EJX"
    r"""The id of the resource"""


ListAgentsHiddenPanels = Literal[
    "model", "tools", "knowledge_bases", "variables", "runtime_constraints"
]


class ListAgentsDataTypedDict(TypedDict):
    id: str
    key: str
    workspace_id: str
    project_id: str
    role: str
    description: str
    instructions: str
    status: ListAgentsStatus
    r"""The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    model: ListAgentsModelTypedDict
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    memory_stores: List[str]
    team_of_agents: List[ListAgentsTeamOfAgentsTypedDict]
    r"""The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks."""
    created_by_id: NotRequired[str]
    updated_by_id: NotRequired[str]
    created: NotRequired[str]
    updated: NotRequired[str]
    system_prompt: NotRequired[str]
    icon_url: NotRequired[str]
    r"""Optional URL to an icon for the agent"""
    settings: NotRequired[ListAgentsSettingsTypedDict]
    version_hash: NotRequired[str]
    metrics: NotRequired[ListAgentsMetricsTypedDict]
    variables: NotRequired[Dict[str, Any]]
    r"""Extracted variables from agent instructions"""
    knowledge_bases: NotRequired[List[ListAgentsKnowledgeBasesTypedDict]]
    r"""Agent knowledge bases reference"""
    hidden_panels: NotRequired[List[ListAgentsHiddenPanels]]
    r"""List of hidden collapsed panels in configuration. Duplicates are not allowed."""


class ListAgentsData(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]

    key: str

    workspace_id: str

    project_id: str

    role: str

    description: str

    instructions: str

    status: ListAgentsStatus
    r"""The status of the agent. `Live` is the latest version of the agent. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    model: ListAgentsModel

    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    memory_stores: List[str]

    team_of_agents: List[ListAgentsTeamOfAgents]
    r"""The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks."""

    created_by_id: Optional[str] = None

    updated_by_id: Optional[str] = None

    created: Optional[str] = None

    updated: Optional[str] = None

    system_prompt: Optional[str] = None

    icon_url: Annotated[Optional[str], pydantic.Field(alias="iconUrl")] = None
    r"""Optional URL to an icon for the agent"""

    settings: Optional[ListAgentsSettings] = None

    version_hash: Optional[str] = None

    metrics: Optional[ListAgentsMetrics] = None

    variables: Optional[Dict[str, Any]] = None
    r"""Extracted variables from agent instructions"""

    knowledge_bases: Optional[List[ListAgentsKnowledgeBases]] = None
    r"""Agent knowledge bases reference"""

    hidden_panels: Optional[List[ListAgentsHiddenPanels]] = None
    r"""List of hidden collapsed panels in configuration. Duplicates are not allowed."""


class ListAgentsResponseBodyTypedDict(TypedDict):
    r"""List of agents with their configurations including fallback models"""

    object: ListAgentsObject
    data: List[ListAgentsDataTypedDict]
    has_more: bool


class ListAgentsResponseBody(BaseModel):
    r"""List of agents with their configurations including fallback models"""

    object: ListAgentsObject

    data: List[ListAgentsData]

    has_more: bool
