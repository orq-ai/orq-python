"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dataclasses import dataclass, field
import httpx
from orq_ai_sdk.models import OrqError
from orq_ai_sdk.types import BaseModel
import pydantic
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


StreamRunAgentRole2 = Literal["tool"]

StreamRunAgentRole1 = Literal["user"]

StreamRunAgentRoleTypedDict = TypeAliasType(
    "StreamRunAgentRoleTypedDict", Union[StreamRunAgentRole1, StreamRunAgentRole2]
)
r"""Message role (user or tool for continuing executions)"""


StreamRunAgentRole = TypeAliasType(
    "StreamRunAgentRole", Union[StreamRunAgentRole1, StreamRunAgentRole2]
)
r"""Message role (user or tool for continuing executions)"""


StreamRunAgentPartsAgentsRequestRequestBodyMessageKind = Literal["tool_result"]


class Parts5TypedDict(TypedDict):
    kind: StreamRunAgentPartsAgentsRequestRequestBodyMessageKind
    tool_call_id: str
    result: NotRequired[Any]
    metadata: NotRequired[Dict[str, Any]]


class Parts5(BaseModel):
    kind: StreamRunAgentPartsAgentsRequestRequestBodyMessageKind

    tool_call_id: str

    result: Optional[Any] = None

    metadata: Optional[Dict[str, Any]] = None


StreamRunAgentPartsAgentsRequestRequestBodyKind = Literal["tool_call"]


class StreamRunAgentParts4TypedDict(TypedDict):
    kind: StreamRunAgentPartsAgentsRequestRequestBodyKind
    tool_name: str
    tool_call_id: str
    arguments: Dict[str, Any]
    metadata: NotRequired[Dict[str, Any]]


class StreamRunAgentParts4(BaseModel):
    kind: StreamRunAgentPartsAgentsRequestRequestBodyKind

    tool_name: str

    tool_call_id: str

    arguments: Dict[str, Any]

    metadata: Optional[Dict[str, Any]] = None


StreamRunAgentPartsAgentsRequestKind = Literal["file"]


class StreamRunAgentFile2TypedDict(TypedDict):
    uri: str
    r"""URL for the File content"""
    mime_type: NotRequired[str]
    r"""Optional mimeType for the file"""
    name: NotRequired[str]
    r"""Optional name for the file"""


class StreamRunAgentFile2(BaseModel):
    uri: str
    r"""URL for the File content"""

    mime_type: Annotated[Optional[str], pydantic.Field(alias="mimeType")] = None
    r"""Optional mimeType for the file"""

    name: Optional[str] = None
    r"""Optional name for the file"""


class StreamRunAgentFile1TypedDict(TypedDict):
    bytes_: str
    r"""base64 encoded content of the file"""
    mime_type: NotRequired[str]
    r"""Optional mimeType for the file"""
    name: NotRequired[str]
    r"""Optional name for the file"""


class StreamRunAgentFile1(BaseModel):
    bytes_: Annotated[str, pydantic.Field(alias="bytes")]
    r"""base64 encoded content of the file"""

    mime_type: Annotated[Optional[str], pydantic.Field(alias="mimeType")] = None
    r"""Optional mimeType for the file"""

    name: Optional[str] = None
    r"""Optional name for the file"""


StreamRunAgentPartsFileTypedDict = TypeAliasType(
    "StreamRunAgentPartsFileTypedDict",
    Union[StreamRunAgentFile1TypedDict, StreamRunAgentFile2TypedDict],
)


StreamRunAgentPartsFile = TypeAliasType(
    "StreamRunAgentPartsFile", Union[StreamRunAgentFile1, StreamRunAgentFile2]
)


class StreamRunAgentParts3TypedDict(TypedDict):
    kind: StreamRunAgentPartsAgentsRequestKind
    file: StreamRunAgentPartsFileTypedDict
    metadata: NotRequired[Dict[str, Any]]


class StreamRunAgentParts3(BaseModel):
    kind: StreamRunAgentPartsAgentsRequestKind

    file: StreamRunAgentPartsFile

    metadata: Optional[Dict[str, Any]] = None


StreamRunAgentPartsAgentsKind = Literal["data"]


class StreamRunAgentParts2TypedDict(TypedDict):
    kind: StreamRunAgentPartsAgentsKind
    data: NotRequired[Any]
    metadata: NotRequired[Dict[str, Any]]


class StreamRunAgentParts2(BaseModel):
    kind: StreamRunAgentPartsAgentsKind

    data: Optional[Any] = None

    metadata: Optional[Dict[str, Any]] = None


StreamRunAgentPartsKind = Literal["text"]


class StreamRunAgentParts1TypedDict(TypedDict):
    kind: StreamRunAgentPartsKind
    text: str


class StreamRunAgentParts1(BaseModel):
    kind: StreamRunAgentPartsKind

    text: str


StreamRunAgentPartsTypedDict = TypeAliasType(
    "StreamRunAgentPartsTypedDict",
    Union[
        StreamRunAgentParts1TypedDict,
        StreamRunAgentParts2TypedDict,
        StreamRunAgentParts3TypedDict,
        Parts5TypedDict,
        StreamRunAgentParts4TypedDict,
    ],
)


StreamRunAgentParts = TypeAliasType(
    "StreamRunAgentParts",
    Union[
        StreamRunAgentParts1,
        StreamRunAgentParts2,
        StreamRunAgentParts3,
        Parts5,
        StreamRunAgentParts4,
    ],
)


class StreamRunAgentMessageTypedDict(TypedDict):
    r"""The A2A format message containing the task for the agent to perform."""

    role: StreamRunAgentRoleTypedDict
    r"""Message role (user or tool for continuing executions)"""
    parts: List[StreamRunAgentPartsTypedDict]
    r"""A2A message parts"""
    message_id: NotRequired[str]
    r"""Optional A2A message ID in ULID format"""
    metadata: NotRequired[Dict[str, Any]]
    r"""Optional message metadata"""


class StreamRunAgentMessage(BaseModel):
    r"""The A2A format message containing the task for the agent to perform."""

    role: StreamRunAgentRole
    r"""Message role (user or tool for continuing executions)"""

    parts: List[StreamRunAgentParts]
    r"""A2A message parts"""

    message_id: Annotated[Optional[str], pydantic.Field(alias="messageId")] = None
    r"""Optional A2A message ID in ULID format"""

    metadata: Optional[Dict[str, Any]] = None
    r"""Optional message metadata"""


class StreamRunAgentContactTypedDict(TypedDict):
    r"""Information about the contact making the request. If the contact does not exist, it will be created automatically."""

    id: str
    r"""Unique identifier for the contact"""
    display_name: NotRequired[str]
    r"""Display name of the contact"""
    email: NotRequired[str]
    r"""Email address of the contact"""
    metadata: NotRequired[List[Dict[str, Any]]]
    r"""A hash of key/value pairs containing any other data about the contact"""
    logo_url: NotRequired[str]
    r"""URL to the contact's avatar or logo"""
    tags: NotRequired[List[str]]
    r"""A list of tags associated with the contact"""


class StreamRunAgentContact(BaseModel):
    r"""Information about the contact making the request. If the contact does not exist, it will be created automatically."""

    id: str
    r"""Unique identifier for the contact"""

    display_name: Optional[str] = None
    r"""Display name of the contact"""

    email: Optional[str] = None
    r"""Email address of the contact"""

    metadata: Optional[List[Dict[str, Any]]] = None
    r"""A hash of key/value pairs containing any other data about the contact"""

    logo_url: Optional[str] = None
    r"""URL to the contact's avatar or logo"""

    tags: Optional[List[str]] = None
    r"""A list of tags associated with the contact"""


class StreamRunAgentThreadTypedDict(TypedDict):
    r"""Thread information to group related requests"""

    id: str
    r"""Unique thread identifier to group related invocations."""
    tags: NotRequired[List[str]]
    r"""Optional tags to differentiate or categorize threads"""


class StreamRunAgentThread(BaseModel):
    r"""Thread information to group related requests"""

    id: str
    r"""Unique thread identifier to group related invocations."""

    tags: Optional[List[str]] = None
    r"""Optional tags to differentiate or categorize threads"""


class StreamRunAgentMemoryTypedDict(TypedDict):
    r"""Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions."""

    entity_id: str
    r"""An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions."""


class StreamRunAgentMemory(BaseModel):
    r"""Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions."""

    entity_id: str
    r"""An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions."""


StreamRunAgentConfigurationAgentsType = Literal["query"]


class StreamRunAgentConfiguration2TypedDict(TypedDict):
    type: StreamRunAgentConfigurationAgentsType
    query: str


class StreamRunAgentConfiguration2(BaseModel):
    type: StreamRunAgentConfigurationAgentsType

    query: str


StreamRunAgentConfigurationType = Literal["last_user_message"]


class StreamRunAgentConfiguration1TypedDict(TypedDict):
    type: StreamRunAgentConfigurationType


class StreamRunAgentConfiguration1(BaseModel):
    type: StreamRunAgentConfigurationType


StreamRunAgentConfigurationTypedDict = TypeAliasType(
    "StreamRunAgentConfigurationTypedDict",
    Union[StreamRunAgentConfiguration1TypedDict, StreamRunAgentConfiguration2TypedDict],
)
r"""Defines the configuration settings which can either be for a user message or a text entry."""


StreamRunAgentConfiguration = TypeAliasType(
    "StreamRunAgentConfiguration",
    Union[StreamRunAgentConfiguration1, StreamRunAgentConfiguration2],
)
r"""Defines the configuration settings which can either be for a user message or a text entry."""


class StreamRunAgentKnowledgeBasesTypedDict(TypedDict):
    configuration: StreamRunAgentConfigurationTypedDict
    r"""Defines the configuration settings which can either be for a user message or a text entry."""


class StreamRunAgentKnowledgeBases(BaseModel):
    configuration: StreamRunAgentConfiguration
    r"""Defines the configuration settings which can either be for a user message or a text entry."""


class StreamRunAgentTeamOfAgentsTypedDict(TypedDict):
    id: str
    role: NotRequired[str]
    r"""The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to."""


class StreamRunAgentTeamOfAgents(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]

    role: Optional[str] = None
    r"""The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to."""


StreamRunAgentToolsAgentsRequestRequestBodySettings13Type = Literal["function"]


class StreamRunAgentToolsFunctionTypedDict(TypedDict):
    name: str
    description: NotRequired[str]
    strict: NotRequired[bool]
    parameters: NotRequired[Dict[str, Any]]


class StreamRunAgentToolsFunction(BaseModel):
    name: str

    description: Optional[str] = None

    strict: Optional[bool] = None

    parameters: Optional[Dict[str, Any]] = None


class Tools13TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings13Type
    key: str
    function: StreamRunAgentToolsFunctionTypedDict
    id: NotRequired[str]
    display_name: NotRequired[str]
    description: NotRequired[str]
    requires_approval: NotRequired[bool]


class Tools13(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings13Type

    key: str

    function: StreamRunAgentToolsFunction

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None

    display_name: Optional[str] = None

    description: Optional[str] = None

    requires_approval: Optional[bool] = False


StreamRunAgentToolsStatus = Literal["live", "draft", "pending", "published"]
r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

StreamRunAgentToolsAgentsRequestRequestBodySettings12Type = Literal["http"]

ToolsMethod = Literal["GET", "POST", "PUT", "DELETE"]
r"""The HTTP method to use."""


class ToolsBlueprintTypedDict(TypedDict):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""
    method: ToolsMethod
    r"""The HTTP method to use."""
    headers: NotRequired[Dict[str, str]]
    r"""The headers to send with the request."""
    body: NotRequired[Dict[str, Any]]
    r"""The body to send with the request."""


class ToolsBlueprint(BaseModel):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""

    method: ToolsMethod
    r"""The HTTP method to use."""

    headers: Optional[Dict[str, str]] = None
    r"""The headers to send with the request."""

    body: Optional[Dict[str, Any]] = None
    r"""The body to send with the request."""


StreamRunAgentToolsAgentsRequestRequestBodySettings12HTTPType = Literal[
    "string", "number", "boolean"
]
r"""The type of the argument."""

ToolsDefaultValueTypedDict = TypeAliasType(
    "ToolsDefaultValueTypedDict", Union[str, float, bool]
)
r"""The default value of the argument."""


ToolsDefaultValue = TypeAliasType("ToolsDefaultValue", Union[str, float, bool])
r"""The default value of the argument."""


class ToolsArgumentsTypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings12HTTPType
    r"""The type of the argument."""
    description: str
    r"""A description of the argument."""
    send_to_model: NotRequired[bool]
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""
    default_value: NotRequired[ToolsDefaultValueTypedDict]
    r"""The default value of the argument."""


class ToolsArguments(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings12HTTPType
    r"""The type of the argument."""

    description: str
    r"""A description of the argument."""

    send_to_model: Optional[bool] = True
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""

    default_value: Optional[ToolsDefaultValue] = None
    r"""The default value of the argument."""


class ToolsHTTPTypedDict(TypedDict):
    blueprint: ToolsBlueprintTypedDict
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""
    arguments: NotRequired[Dict[str, ToolsArgumentsTypedDict]]
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class ToolsHTTP(BaseModel):
    blueprint: ToolsBlueprint
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    arguments: Optional[Dict[str, ToolsArguments]] = None
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class Tools12TypedDict(TypedDict):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings12Type
    http: ToolsHTTPTypedDict
    id: NotRequired[str]
    status: NotRequired[StreamRunAgentToolsStatus]
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""
    version_hash: NotRequired[str]
    requires_approval: NotRequired[bool]


class Tools12(BaseModel):
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    display_name: str
    r"""The name of the tool as it will be displayed in the UI. This is optional and if not provided, the `key` will be used."""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    type: StreamRunAgentToolsAgentsRequestRequestBodySettings12Type

    http: ToolsHTTP

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = (
        "01K5GVCVB3Q3RWWJZHD1JBQVWJ"
    )

    status: Optional[StreamRunAgentToolsStatus] = "live"
    r"""The status of the tool. `Live` is the latest version of the tool. `Draft` is a version that is not yet published. `Pending` is a version that is pending approval. `Published` is a version that was live and has been replaced by a new version."""

    version_hash: Optional[str] = None

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsRequestRequestBodySettings11Type = Literal["current_date"]


class Tools11TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings11Type
    requires_approval: NotRequired[bool]


class Tools11(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings11Type

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsRequestRequestBodySettings10Type = Literal[
    "query_knowledge_base"
]


class Tools10TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings10Type
    requires_approval: NotRequired[bool]


class Tools10(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings10Type

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsRequestRequestBodySettings9Type = Literal[
    "retrieve_knowledge_bases"
]


class Tools9TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings9Type
    requires_approval: NotRequired[bool]


class Tools9(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings9Type

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsRequestRequestBodySettings8Type = Literal[
    "retrieve_memory_stores"
]


class Tools8TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings8Type
    requires_approval: NotRequired[bool]


class Tools8(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings8Type

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsRequestRequestBodySettings7Type = Literal[
    "delete_memory_document"
]


class Tools7TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings7Type
    requires_approval: NotRequired[bool]


class Tools7(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings7Type

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsRequestRequestBodySettings6Type = Literal["write_memory_store"]


class Tools6TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings6Type
    requires_approval: NotRequired[bool]


class Tools6(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettings6Type

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsRequestRequestBodySettingsType = Literal["query_memory_store"]


class StreamRunAgentTools5TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettingsType
    requires_approval: NotRequired[bool]


class StreamRunAgentTools5(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodySettingsType

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsRequestRequestBodyType = Literal["retrieve_agents"]


class StreamRunAgentTools4TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestRequestBodyType
    requires_approval: NotRequired[bool]


class StreamRunAgentTools4(BaseModel):
    type: StreamRunAgentToolsAgentsRequestRequestBodyType

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsRequestType = Literal["call_sub_agent"]


class StreamRunAgentTools3TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsRequestType
    requires_approval: NotRequired[bool]


class StreamRunAgentTools3(BaseModel):
    type: StreamRunAgentToolsAgentsRequestType

    requires_approval: Optional[bool] = False


StreamRunAgentToolsAgentsType = Literal["web_scraper"]


class StreamRunAgentTools2TypedDict(TypedDict):
    type: StreamRunAgentToolsAgentsType
    requires_approval: NotRequired[bool]


class StreamRunAgentTools2(BaseModel):
    type: StreamRunAgentToolsAgentsType

    requires_approval: Optional[bool] = False


StreamRunAgentToolsType = Literal["google_search"]


class StreamRunAgentTools1TypedDict(TypedDict):
    type: StreamRunAgentToolsType
    requires_approval: NotRequired[bool]


class StreamRunAgentTools1(BaseModel):
    type: StreamRunAgentToolsType

    requires_approval: Optional[bool] = False


StreamRunAgentToolsTypedDict = TypeAliasType(
    "StreamRunAgentToolsTypedDict",
    Union[
        Tools7TypedDict,
        StreamRunAgentTools2TypedDict,
        StreamRunAgentTools3TypedDict,
        StreamRunAgentTools4TypedDict,
        StreamRunAgentTools5TypedDict,
        Tools6TypedDict,
        StreamRunAgentTools1TypedDict,
        Tools8TypedDict,
        Tools9TypedDict,
        Tools10TypedDict,
        Tools11TypedDict,
        Tools13TypedDict,
        Tools12TypedDict,
    ],
)


StreamRunAgentTools = TypeAliasType(
    "StreamRunAgentTools",
    Union[
        Tools7,
        StreamRunAgentTools2,
        StreamRunAgentTools3,
        StreamRunAgentTools4,
        StreamRunAgentTools5,
        Tools6,
        StreamRunAgentTools1,
        Tools8,
        Tools9,
        Tools10,
        Tools11,
        Tools13,
        Tools12,
    ],
)


StreamRunAgentToolApprovalRequired = Literal["all", "respect_tool", "none"]
r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""


class StreamRunAgentSettingsTypedDict(TypedDict):
    tools: List[StreamRunAgentToolsTypedDict]
    tool_approval_required: NotRequired[StreamRunAgentToolApprovalRequired]
    r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""
    max_iterations: NotRequired[int]
    r"""Maximum iterations before the agent must provide its best answer."""
    max_execution_time: NotRequired[int]
    r"""Maximum time (in seconds) for task execution."""


class StreamRunAgentSettings(BaseModel):
    tools: List[StreamRunAgentTools]

    tool_approval_required: Optional[StreamRunAgentToolApprovalRequired] = "none"
    r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""

    max_iterations: Optional[int] = 15
    r"""Maximum iterations before the agent must provide its best answer."""

    max_execution_time: Optional[int] = 120
    r"""Maximum time (in seconds) for task execution."""


class StreamRunAgentRequestBodyTypedDict(TypedDict):
    key: str
    r"""A unique identifier for the agent. This key must be unique within the same workspace and cannot be reused. When executing the agent, this key determines if the agent already exists. If the agent version differs, a new version is created at the end of the execution, except for the task. All agent parameters are evaluated to decide if a new version is needed."""
    model: str
    r"""The language model that powers the agent. The model must support tool calling capabilities."""
    role: str
    r"""Specifies the agent's function and area of expertise."""
    instructions: str
    r"""Provides context and purpose for the agent. Combined with the system prompt template to generate the agent's instructions."""
    message: StreamRunAgentMessageTypedDict
    r"""The A2A format message containing the task for the agent to perform."""
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    settings: StreamRunAgentSettingsTypedDict
    task_id: NotRequired[str]
    r"""Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue."""
    fallback_models: NotRequired[List[str]]
    r"""Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities."""
    variables: NotRequired[Dict[str, Any]]
    r"""Optional variables for template replacement in system prompt, instructions, and messages"""
    contact: NotRequired[StreamRunAgentContactTypedDict]
    r"""Information about the contact making the request. If the contact does not exist, it will be created automatically."""
    thread: NotRequired[StreamRunAgentThreadTypedDict]
    r"""Thread information to group related requests"""
    memory: NotRequired[StreamRunAgentMemoryTypedDict]
    r"""Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions."""
    description: NotRequired[str]
    r"""A brief summary of the agent's purpose."""
    icon_url: NotRequired[str]
    r"""Optional URL to an icon for the agent"""
    system_prompt: NotRequired[str]
    r"""A custom system prompt template for the agent. If omitted, the default template is used."""
    memory_stores: NotRequired[List[str]]
    knowledge_bases: NotRequired[List[StreamRunAgentKnowledgeBasesTypedDict]]
    team_of_agents: NotRequired[List[StreamRunAgentTeamOfAgentsTypedDict]]
    r"""The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks."""
    stream_timeout_seconds: NotRequired[float]
    r"""Stream timeout in seconds (1-3600). Default: 1800 (30 minutes)"""


class StreamRunAgentRequestBody(BaseModel):
    key: str
    r"""A unique identifier for the agent. This key must be unique within the same workspace and cannot be reused. When executing the agent, this key determines if the agent already exists. If the agent version differs, a new version is created at the end of the execution, except for the task. All agent parameters are evaluated to decide if a new version is needed."""

    model: str
    r"""The language model that powers the agent. The model must support tool calling capabilities."""

    role: str
    r"""Specifies the agent's function and area of expertise."""

    instructions: str
    r"""Provides context and purpose for the agent. Combined with the system prompt template to generate the agent's instructions."""

    message: StreamRunAgentMessage
    r"""The A2A format message containing the task for the agent to perform."""

    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    settings: StreamRunAgentSettings

    task_id: Annotated[Optional[str], pydantic.Field(alias="taskId")] = None
    r"""Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue."""

    fallback_models: Optional[List[str]] = None
    r"""Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities."""

    variables: Optional[Dict[str, Any]] = None
    r"""Optional variables for template replacement in system prompt, instructions, and messages"""

    contact: Optional[StreamRunAgentContact] = None
    r"""Information about the contact making the request. If the contact does not exist, it will be created automatically."""

    thread: Optional[StreamRunAgentThread] = None
    r"""Thread information to group related requests"""

    memory: Optional[StreamRunAgentMemory] = None
    r"""Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions."""

    description: Optional[str] = None
    r"""A brief summary of the agent's purpose."""

    icon_url: Annotated[Optional[str], pydantic.Field(alias="iconUrl")] = None
    r"""Optional URL to an icon for the agent"""

    system_prompt: Optional[str] = None
    r"""A custom system prompt template for the agent. If omitted, the default template is used."""

    memory_stores: Optional[List[str]] = None

    knowledge_bases: Optional[List[StreamRunAgentKnowledgeBases]] = None

    team_of_agents: Optional[List[StreamRunAgentTeamOfAgents]] = None
    r"""The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks."""

    stream_timeout_seconds: Optional[float] = None
    r"""Stream timeout in seconds (1-3600). Default: 1800 (30 minutes)"""


class StreamRunAgentAgentsResponseBodyData(BaseModel):
    message: str


@dataclass(frozen=True)
class StreamRunAgentAgentsResponseBody(OrqError):
    r"""Model not found"""

    data: StreamRunAgentAgentsResponseBodyData = field(hash=False)

    def __init__(
        self,
        data: StreamRunAgentAgentsResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)


class StreamRunAgentResponseBodyTypedDict(TypedDict):
    r"""SSE stream of agent events"""

    data: str
    r"""JSON-encoded event data"""


class StreamRunAgentResponseBody(BaseModel):
    r"""SSE stream of agent events"""

    data: str
    r"""JSON-encoded event data"""
