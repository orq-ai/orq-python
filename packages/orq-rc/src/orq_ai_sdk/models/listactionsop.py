"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListActionsRequestTypedDict(TypedDict):
    agent_key: str
    task_id: str


class ListActionsRequest(BaseModel):
    agent_key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    task_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]


ListActionsObject = Literal["list"]


class ListActionsToolTypedDict(TypedDict):
    id: str
    r"""The tool' id in orq"""
    display_name: str
    requires_approval: NotRequired[bool]


class ListActionsTool(BaseModel):
    id: str
    r"""The tool' id in orq"""

    display_name: str

    requires_approval: Optional[bool] = False


ListActionsReview = Literal["approved", "rejected"]


class ListActionsStateTypedDict(TypedDict):
    r"""An action is a tool that an agent chooses to use. If executed is false, together with the output being there, it can indicate that a tool was mocked"""

    input: Dict[str, Any]
    output: Dict[str, Any]
    review: NotRequired[Nullable[ListActionsReview]]
    review_source: NotRequired[str]
    r"""The source of the review, where it was approved or rejected"""
    reviewed_by_id: NotRequired[str]
    r"""Only refers to an internal user of the platform, who approved or rejected the tool execution"""
    executed: NotRequired[bool]
    error: NotRequired[str]


class ListActionsState(BaseModel):
    r"""An action is a tool that an agent chooses to use. If executed is false, together with the output being there, it can indicate that a tool was mocked"""

    input: Dict[str, Any]

    output: Dict[str, Any]

    review: OptionalNullable[ListActionsReview] = UNSET

    review_source: Optional[str] = None
    r"""The source of the review, where it was approved or rejected"""

    reviewed_by_id: Optional[str] = None
    r"""Only refers to an internal user of the platform, who approved or rejected the tool execution"""

    executed: Optional[bool] = False

    error: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "review",
            "review_source",
            "reviewed_by_id",
            "executed",
            "error",
        ]
        nullable_fields = ["review"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListActionsDataTypedDict(TypedDict):
    id: str
    r"""Internal id for the action"""
    agent_tool_call_id: str
    r"""The tool call id what the agent chooses to use and generates"""
    tool: ListActionsToolTypedDict
    created: str
    updated: str
    agent_id: str
    action_type: str
    agent_execution_id: str
    workspace_id: str
    state: ListActionsStateTypedDict
    r"""An action is a tool that an agent chooses to use. If executed is false, together with the output being there, it can indicate that a tool was mocked"""
    started: NotRequired[str]
    finished: NotRequired[str]


class ListActionsData(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Internal id for the action"""

    agent_tool_call_id: str
    r"""The tool call id what the agent chooses to use and generates"""

    tool: ListActionsTool

    created: str

    updated: str

    agent_id: str

    action_type: str

    agent_execution_id: str

    workspace_id: str

    state: ListActionsState
    r"""An action is a tool that an agent chooses to use. If executed is false, together with the output being there, it can indicate that a tool was mocked"""

    started: Optional[str] = None

    finished: Optional[str] = None


class ListActionsResponseBodyTypedDict(TypedDict):
    r"""List of actions"""

    object: ListActionsObject
    data: List[ListActionsDataTypedDict]
    has_more: bool


class ListActionsResponseBody(BaseModel):
    r"""List of actions"""

    object: ListActionsObject

    data: List[ListActionsData]

    has_more: bool
