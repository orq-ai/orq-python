"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
import dateutil.parser
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, HeaderMetadata, PathParamMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class FindOneByKeyPromptSnippetGlobalsTypedDict(TypedDict):
    contact_id: NotRequired[str]


class FindOneByKeyPromptSnippetGlobals(BaseModel):
    contact_id: Annotated[
        Optional[str],
        pydantic.Field(alias="contactId"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None


class FindOneByKeyPromptSnippetRequestTypedDict(TypedDict):
    key: str
    r"""Prompt Key"""


class FindOneByKeyPromptSnippetRequest(BaseModel):
    key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Prompt Key"""


FindOneByKeyPromptSnippetOwner2 = Literal["vendor"]

FindOneByKeyPromptSnippetOwnerTypedDict = TypeAliasType(
    "FindOneByKeyPromptSnippetOwnerTypedDict",
    Union[str, FindOneByKeyPromptSnippetOwner2],
)


FindOneByKeyPromptSnippetOwner = TypeAliasType(
    "FindOneByKeyPromptSnippetOwner", Union[str, FindOneByKeyPromptSnippetOwner2]
)


FindOneByKeyPromptSnippetModelType = Literal[
    "chat",
    "completion",
    "embedding",
    "vision",
    "image",
    "tts",
    "stt",
    "rerank",
    "moderations",
]
r"""The type of the model"""

FindOneByKeyPromptSnippetFormat = Literal["url", "b64_json", "text", "json_object"]
r"""Only supported on `image` models."""

FindOneByKeyPromptSnippetQuality = Literal["standard", "hd"]
r"""Only supported on `image` models."""

FindOneByKeyPromptSnippetResponseFormatPromptSnippetsType = Literal["json_object"]


class FindOneByKeyPromptSnippetResponseFormat2TypedDict(TypedDict):
    type: FindOneByKeyPromptSnippetResponseFormatPromptSnippetsType


class FindOneByKeyPromptSnippetResponseFormat2(BaseModel):
    type: FindOneByKeyPromptSnippetResponseFormatPromptSnippetsType


FindOneByKeyPromptSnippetResponseFormatType = Literal["json_schema"]


class FindOneByKeyPromptSnippetResponseFormatJSONSchemaTypedDict(TypedDict):
    name: str
    strict: bool
    schema_: Dict[str, Any]


class FindOneByKeyPromptSnippetResponseFormatJSONSchema(BaseModel):
    name: str

    strict: bool

    schema_: Annotated[Dict[str, Any], pydantic.Field(alias="schema")]


class FindOneByKeyPromptSnippetResponseFormat1TypedDict(TypedDict):
    type: FindOneByKeyPromptSnippetResponseFormatType
    json_schema: FindOneByKeyPromptSnippetResponseFormatJSONSchemaTypedDict


class FindOneByKeyPromptSnippetResponseFormat1(BaseModel):
    type: FindOneByKeyPromptSnippetResponseFormatType

    json_schema: FindOneByKeyPromptSnippetResponseFormatJSONSchema


FindOneByKeyPromptSnippetResponseFormatTypedDict = TypeAliasType(
    "FindOneByKeyPromptSnippetResponseFormatTypedDict",
    Union[
        FindOneByKeyPromptSnippetResponseFormat2TypedDict,
        FindOneByKeyPromptSnippetResponseFormat1TypedDict,
    ],
)
r"""An object specifying the format that the model must output.

Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
"""


FindOneByKeyPromptSnippetResponseFormat = TypeAliasType(
    "FindOneByKeyPromptSnippetResponseFormat",
    Union[
        FindOneByKeyPromptSnippetResponseFormat2,
        FindOneByKeyPromptSnippetResponseFormat1,
    ],
)
r"""An object specifying the format that the model must output.

Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
"""


FindOneByKeyPromptSnippetPhotoRealVersion = Literal["v1", "v2"]
r"""The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider"""

FindOneByKeyPromptSnippetEncodingFormat = Literal["float", "base64"]
r"""The format to return the embeddings"""


class FindOneByKeyPromptSnippetModelParametersTypedDict(TypedDict):
    r"""Model Parameters: Not all parameters apply to every model"""

    temperature: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    max_tokens: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    top_k: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    top_p: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    frequency_penalty: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    presence_penalty: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    num_images: NotRequired[float]
    r"""Only supported on `image` models."""
    seed: NotRequired[float]
    r"""Best effort deterministic seed for the model. Currently only OpenAI models support these"""
    format_: NotRequired[FindOneByKeyPromptSnippetFormat]
    r"""Only supported on `image` models."""
    dimensions: NotRequired[str]
    r"""Only supported on `image` models."""
    quality: NotRequired[FindOneByKeyPromptSnippetQuality]
    r"""Only supported on `image` models."""
    style: NotRequired[str]
    r"""Only supported on `image` models."""
    response_format: NotRequired[
        Nullable[FindOneByKeyPromptSnippetResponseFormatTypedDict]
    ]
    r"""An object specifying the format that the model must output.

    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

    Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
    """
    photo_real_version: NotRequired[FindOneByKeyPromptSnippetPhotoRealVersion]
    r"""The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider"""
    encoding_format: NotRequired[FindOneByKeyPromptSnippetEncodingFormat]
    r"""The format to return the embeddings"""


class FindOneByKeyPromptSnippetModelParameters(BaseModel):
    r"""Model Parameters: Not all parameters apply to every model"""

    temperature: Optional[float] = None
    r"""Only supported on `chat` and `completion` models."""

    max_tokens: Annotated[Optional[float], pydantic.Field(alias="maxTokens")] = None
    r"""Only supported on `chat` and `completion` models."""

    top_k: Annotated[Optional[float], pydantic.Field(alias="topK")] = None
    r"""Only supported on `chat` and `completion` models."""

    top_p: Annotated[Optional[float], pydantic.Field(alias="topP")] = None
    r"""Only supported on `chat` and `completion` models."""

    frequency_penalty: Annotated[
        Optional[float], pydantic.Field(alias="frequencyPenalty")
    ] = None
    r"""Only supported on `chat` and `completion` models."""

    presence_penalty: Annotated[
        Optional[float], pydantic.Field(alias="presencePenalty")
    ] = None
    r"""Only supported on `chat` and `completion` models."""

    num_images: Annotated[Optional[float], pydantic.Field(alias="numImages")] = None
    r"""Only supported on `image` models."""

    seed: Optional[float] = None
    r"""Best effort deterministic seed for the model. Currently only OpenAI models support these"""

    format_: Annotated[
        Optional[FindOneByKeyPromptSnippetFormat], pydantic.Field(alias="format")
    ] = None
    r"""Only supported on `image` models."""

    dimensions: Optional[str] = None
    r"""Only supported on `image` models."""

    quality: Optional[FindOneByKeyPromptSnippetQuality] = None
    r"""Only supported on `image` models."""

    style: Optional[str] = None
    r"""Only supported on `image` models."""

    response_format: Annotated[
        OptionalNullable[FindOneByKeyPromptSnippetResponseFormat],
        pydantic.Field(alias="responseFormat"),
    ] = UNSET
    r"""An object specifying the format that the model must output.

    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

    Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
    """

    photo_real_version: Annotated[
        Optional[FindOneByKeyPromptSnippetPhotoRealVersion],
        pydantic.Field(alias="photoRealVersion"),
    ] = None
    r"""The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider"""

    encoding_format: Optional[FindOneByKeyPromptSnippetEncodingFormat] = None
    r"""The format to return the embeddings"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "temperature",
            "maxTokens",
            "topK",
            "topP",
            "frequencyPenalty",
            "presencePenalty",
            "numImages",
            "seed",
            "format",
            "dimensions",
            "quality",
            "style",
            "responseFormat",
            "photoRealVersion",
            "encoding_format",
        ]
        nullable_fields = ["responseFormat"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


FindOneByKeyPromptSnippetProvider = Literal[
    "cohere",
    "openai",
    "anthropic",
    "huggingface",
    "replicate",
    "google",
    "google-ai",
    "azure",
    "aws",
    "anyscale",
    "perplexity",
    "groq",
    "fal",
    "leonardoai",
    "nvidia",
    "jina",
    "togetherai",
    "elevenlabs",
]

FindOneByKeyPromptSnippetRole = Literal[
    "system",
    "assistant",
    "user",
    "exception",
    "tool",
    "prompt",
    "correction",
    "expected_output",
]
r"""The role of the prompt message"""

FindOneByKeyPromptSnippet2PromptSnippetsType = Literal["image_url"]


class FindOneByKeyPromptSnippet2ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    id: NotRequired[str]
    r"""The orq.ai id of the image"""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class FindOneByKeyPromptSnippet2ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    id: Optional[str] = None
    r"""The orq.ai id of the image"""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class FindOneByKeyPromptSnippet22TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: FindOneByKeyPromptSnippet2PromptSnippetsType
    image_url: FindOneByKeyPromptSnippet2ImageURLTypedDict


class FindOneByKeyPromptSnippet22(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: FindOneByKeyPromptSnippet2PromptSnippetsType

    image_url: FindOneByKeyPromptSnippet2ImageURL


FindOneByKeyPromptSnippet2Type = Literal["text"]


class FindOneByKeyPromptSnippet21TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: FindOneByKeyPromptSnippet2Type
    text: str


class FindOneByKeyPromptSnippet21(BaseModel):
    r"""Text content part of a prompt message"""

    type: FindOneByKeyPromptSnippet2Type

    text: str


FindOneByKeyPromptSnippetContent2TypedDict = TypeAliasType(
    "FindOneByKeyPromptSnippetContent2TypedDict",
    Union[FindOneByKeyPromptSnippet21TypedDict, FindOneByKeyPromptSnippet22TypedDict],
)


FindOneByKeyPromptSnippetContent2 = TypeAliasType(
    "FindOneByKeyPromptSnippetContent2",
    Union[FindOneByKeyPromptSnippet21, FindOneByKeyPromptSnippet22],
)


FindOneByKeyPromptSnippetContentTypedDict = TypeAliasType(
    "FindOneByKeyPromptSnippetContentTypedDict",
    Union[str, List[FindOneByKeyPromptSnippetContent2TypedDict]],
)
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


FindOneByKeyPromptSnippetContent = TypeAliasType(
    "FindOneByKeyPromptSnippetContent",
    Union[str, List[FindOneByKeyPromptSnippetContent2]],
)
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


FindOneByKeyPromptSnippetPromptSnippetsType = Literal["function"]


class FindOneByKeyPromptSnippetFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class FindOneByKeyPromptSnippetFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class FindOneByKeyPromptSnippetToolCallsTypedDict(TypedDict):
    type: FindOneByKeyPromptSnippetPromptSnippetsType
    function: FindOneByKeyPromptSnippetFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class FindOneByKeyPromptSnippetToolCalls(BaseModel):
    type: FindOneByKeyPromptSnippetPromptSnippetsType

    function: FindOneByKeyPromptSnippetFunction

    id: Optional[str] = None

    index: Optional[float] = None


class FindOneByKeyPromptSnippetMessagesTypedDict(TypedDict):
    role: FindOneByKeyPromptSnippetRole
    r"""The role of the prompt message"""
    content: FindOneByKeyPromptSnippetContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[List[FindOneByKeyPromptSnippetToolCallsTypedDict]]


class FindOneByKeyPromptSnippetMessages(BaseModel):
    role: FindOneByKeyPromptSnippetRole
    r"""The role of the prompt message"""

    content: FindOneByKeyPromptSnippetContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[List[FindOneByKeyPromptSnippetToolCalls]] = None


class FindOneByKeyPromptSnippetPromptConfigTypedDict(TypedDict):
    r"""A list of messages compatible with the openAI schema"""

    messages: List[FindOneByKeyPromptSnippetMessagesTypedDict]
    stream: NotRequired[bool]
    model: NotRequired[str]
    model_db_id: NotRequired[str]
    r"""The id of the resource"""
    model_type: NotRequired[FindOneByKeyPromptSnippetModelType]
    r"""The type of the model"""
    model_parameters: NotRequired[FindOneByKeyPromptSnippetModelParametersTypedDict]
    r"""Model Parameters: Not all parameters apply to every model"""
    provider: NotRequired[FindOneByKeyPromptSnippetProvider]
    integration_id: NotRequired[Nullable[str]]
    r"""The id of the resource"""
    version: NotRequired[str]


class FindOneByKeyPromptSnippetPromptConfig(BaseModel):
    r"""A list of messages compatible with the openAI schema"""

    messages: List[FindOneByKeyPromptSnippetMessages]

    stream: Optional[bool] = None

    model: Optional[str] = None

    model_db_id: Optional[str] = None
    r"""The id of the resource"""

    model_type: Optional[FindOneByKeyPromptSnippetModelType] = None
    r"""The type of the model"""

    model_parameters: Optional[FindOneByKeyPromptSnippetModelParameters] = None
    r"""Model Parameters: Not all parameters apply to every model"""

    provider: Optional[FindOneByKeyPromptSnippetProvider] = None

    integration_id: OptionalNullable[str] = UNSET
    r"""The id of the resource"""

    version: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "stream",
            "model",
            "model_db_id",
            "model_type",
            "model_parameters",
            "provider",
            "integration_id",
            "version",
        ]
        nullable_fields = ["integration_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


FindOneByKeyPromptSnippetUseCases = Literal[
    "Agents",
    "Agents simulations",
    "API interaction",
    "Autonomous Agents",
    "Chatbots",
    "Classification",
    "Code understanding",
    "Code writing",
    "Documents QA",
    "Conversation",
    "Extraction",
    "Multi-modal",
    "Self-checking",
    "SQL",
    "Summarization",
    "Tagging",
]

FindOneByKeyPromptSnippetLanguage = Literal[
    "Chinese", "Dutch", "English", "French", "German", "Russian", "Spanish"
]
r"""The language that the prompt is written in. Use this field to categorize the prompt for your own purpose"""


class FindOneByKeyPromptSnippetMetadataTypedDict(TypedDict):
    use_cases: NotRequired[List[FindOneByKeyPromptSnippetUseCases]]
    r"""A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose"""
    language: NotRequired[FindOneByKeyPromptSnippetLanguage]
    r"""The language that the prompt is written in. Use this field to categorize the prompt for your own purpose"""


class FindOneByKeyPromptSnippetMetadata(BaseModel):
    use_cases: Optional[List[FindOneByKeyPromptSnippetUseCases]] = None
    r"""A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose"""

    language: Optional[FindOneByKeyPromptSnippetLanguage] = None
    r"""The language that the prompt is written in. Use this field to categorize the prompt for your own purpose"""


FindOneByKeyPromptSnippetType = Literal["snippet"]

FindOneByKeyPromptSnippetPromptSnippetsModelType = Literal[
    "chat",
    "completion",
    "embedding",
    "vision",
    "image",
    "tts",
    "stt",
    "rerank",
    "moderations",
]
r"""The type of the model"""

FindOneByKeyPromptSnippetPromptSnippetsFormat = Literal[
    "url", "b64_json", "text", "json_object"
]
r"""Only supported on `image` models."""

FindOneByKeyPromptSnippetPromptSnippetsQuality = Literal["standard", "hd"]
r"""Only supported on `image` models."""

FindOneByKeyPromptSnippetResponseFormatPromptSnippetsResponse200Type = Literal[
    "json_object"
]


class FindOneByKeyPromptSnippetResponseFormatPromptSnippets2TypedDict(TypedDict):
    type: FindOneByKeyPromptSnippetResponseFormatPromptSnippetsResponse200Type


class FindOneByKeyPromptSnippetResponseFormatPromptSnippets2(BaseModel):
    type: FindOneByKeyPromptSnippetResponseFormatPromptSnippetsResponse200Type


FindOneByKeyPromptSnippetResponseFormatPromptSnippetsResponseType = Literal[
    "json_schema"
]


class FindOneByKeyPromptSnippetResponseFormatPromptSnippetsJSONSchemaTypedDict(
    TypedDict
):
    name: str
    strict: bool
    schema_: Dict[str, Any]


class FindOneByKeyPromptSnippetResponseFormatPromptSnippetsJSONSchema(BaseModel):
    name: str

    strict: bool

    schema_: Annotated[Dict[str, Any], pydantic.Field(alias="schema")]


class FindOneByKeyPromptSnippetResponseFormatPromptSnippets1TypedDict(TypedDict):
    type: FindOneByKeyPromptSnippetResponseFormatPromptSnippetsResponseType
    json_schema: (
        FindOneByKeyPromptSnippetResponseFormatPromptSnippetsJSONSchemaTypedDict
    )


class FindOneByKeyPromptSnippetResponseFormatPromptSnippets1(BaseModel):
    type: FindOneByKeyPromptSnippetResponseFormatPromptSnippetsResponseType

    json_schema: FindOneByKeyPromptSnippetResponseFormatPromptSnippetsJSONSchema


FindOneByKeyPromptSnippetPromptSnippetsResponseFormatTypedDict = TypeAliasType(
    "FindOneByKeyPromptSnippetPromptSnippetsResponseFormatTypedDict",
    Union[
        FindOneByKeyPromptSnippetResponseFormatPromptSnippets2TypedDict,
        FindOneByKeyPromptSnippetResponseFormatPromptSnippets1TypedDict,
    ],
)
r"""An object specifying the format that the model must output.

Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
"""


FindOneByKeyPromptSnippetPromptSnippetsResponseFormat = TypeAliasType(
    "FindOneByKeyPromptSnippetPromptSnippetsResponseFormat",
    Union[
        FindOneByKeyPromptSnippetResponseFormatPromptSnippets2,
        FindOneByKeyPromptSnippetResponseFormatPromptSnippets1,
    ],
)
r"""An object specifying the format that the model must output.

Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
"""


FindOneByKeyPromptSnippetPromptSnippetsPhotoRealVersion = Literal["v1", "v2"]
r"""The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider"""

FindOneByKeyPromptSnippetPromptSnippetsEncodingFormat = Literal["float", "base64"]
r"""The format to return the embeddings"""


class FindOneByKeyPromptSnippetPromptSnippetsModelParametersTypedDict(TypedDict):
    r"""Model Parameters: Not all parameters apply to every model"""

    temperature: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    max_tokens: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    top_k: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    top_p: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    frequency_penalty: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    presence_penalty: NotRequired[float]
    r"""Only supported on `chat` and `completion` models."""
    num_images: NotRequired[float]
    r"""Only supported on `image` models."""
    seed: NotRequired[float]
    r"""Best effort deterministic seed for the model. Currently only OpenAI models support these"""
    format_: NotRequired[FindOneByKeyPromptSnippetPromptSnippetsFormat]
    r"""Only supported on `image` models."""
    dimensions: NotRequired[str]
    r"""Only supported on `image` models."""
    quality: NotRequired[FindOneByKeyPromptSnippetPromptSnippetsQuality]
    r"""Only supported on `image` models."""
    style: NotRequired[str]
    r"""Only supported on `image` models."""
    response_format: NotRequired[
        Nullable[FindOneByKeyPromptSnippetPromptSnippetsResponseFormatTypedDict]
    ]
    r"""An object specifying the format that the model must output.

    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

    Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
    """
    photo_real_version: NotRequired[
        FindOneByKeyPromptSnippetPromptSnippetsPhotoRealVersion
    ]
    r"""The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider"""
    encoding_format: NotRequired[FindOneByKeyPromptSnippetPromptSnippetsEncodingFormat]
    r"""The format to return the embeddings"""


class FindOneByKeyPromptSnippetPromptSnippetsModelParameters(BaseModel):
    r"""Model Parameters: Not all parameters apply to every model"""

    temperature: Optional[float] = None
    r"""Only supported on `chat` and `completion` models."""

    max_tokens: Annotated[Optional[float], pydantic.Field(alias="maxTokens")] = None
    r"""Only supported on `chat` and `completion` models."""

    top_k: Annotated[Optional[float], pydantic.Field(alias="topK")] = None
    r"""Only supported on `chat` and `completion` models."""

    top_p: Annotated[Optional[float], pydantic.Field(alias="topP")] = None
    r"""Only supported on `chat` and `completion` models."""

    frequency_penalty: Annotated[
        Optional[float], pydantic.Field(alias="frequencyPenalty")
    ] = None
    r"""Only supported on `chat` and `completion` models."""

    presence_penalty: Annotated[
        Optional[float], pydantic.Field(alias="presencePenalty")
    ] = None
    r"""Only supported on `chat` and `completion` models."""

    num_images: Annotated[Optional[float], pydantic.Field(alias="numImages")] = None
    r"""Only supported on `image` models."""

    seed: Optional[float] = None
    r"""Best effort deterministic seed for the model. Currently only OpenAI models support these"""

    format_: Annotated[
        Optional[FindOneByKeyPromptSnippetPromptSnippetsFormat],
        pydantic.Field(alias="format"),
    ] = None
    r"""Only supported on `image` models."""

    dimensions: Optional[str] = None
    r"""Only supported on `image` models."""

    quality: Optional[FindOneByKeyPromptSnippetPromptSnippetsQuality] = None
    r"""Only supported on `image` models."""

    style: Optional[str] = None
    r"""Only supported on `image` models."""

    response_format: Annotated[
        OptionalNullable[FindOneByKeyPromptSnippetPromptSnippetsResponseFormat],
        pydantic.Field(alias="responseFormat"),
    ] = UNSET
    r"""An object specifying the format that the model must output.

    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema

    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.

    Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
    """

    photo_real_version: Annotated[
        Optional[FindOneByKeyPromptSnippetPromptSnippetsPhotoRealVersion],
        pydantic.Field(alias="photoRealVersion"),
    ] = None
    r"""The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider"""

    encoding_format: Optional[FindOneByKeyPromptSnippetPromptSnippetsEncodingFormat] = (
        None
    )
    r"""The format to return the embeddings"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "temperature",
            "maxTokens",
            "topK",
            "topP",
            "frequencyPenalty",
            "presencePenalty",
            "numImages",
            "seed",
            "format",
            "dimensions",
            "quality",
            "style",
            "responseFormat",
            "photoRealVersion",
            "encoding_format",
        ]
        nullable_fields = ["responseFormat"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


FindOneByKeyPromptSnippetPromptSnippetsProvider = Literal[
    "cohere",
    "openai",
    "anthropic",
    "huggingface",
    "replicate",
    "google",
    "google-ai",
    "azure",
    "aws",
    "anyscale",
    "perplexity",
    "groq",
    "fal",
    "leonardoai",
    "nvidia",
    "jina",
    "togetherai",
    "elevenlabs",
]

FindOneByKeyPromptSnippetPromptSnippetsRole = Literal[
    "system",
    "assistant",
    "user",
    "exception",
    "tool",
    "prompt",
    "correction",
    "expected_output",
]
r"""The role of the prompt message"""

FindOneByKeyPromptSnippet2PromptSnippetsResponse200Type = Literal["image_url"]


class FindOneByKeyPromptSnippet2PromptSnippetsImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    id: NotRequired[str]
    r"""The orq.ai id of the image"""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class FindOneByKeyPromptSnippet2PromptSnippetsImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    id: Optional[str] = None
    r"""The orq.ai id of the image"""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class FindOneByKeyPromptSnippet2PromptSnippets2TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: FindOneByKeyPromptSnippet2PromptSnippetsResponse200Type
    image_url: FindOneByKeyPromptSnippet2PromptSnippetsImageURLTypedDict


class FindOneByKeyPromptSnippet2PromptSnippets2(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: FindOneByKeyPromptSnippet2PromptSnippetsResponse200Type

    image_url: FindOneByKeyPromptSnippet2PromptSnippetsImageURL


FindOneByKeyPromptSnippet2PromptSnippetsResponseType = Literal["text"]


class FindOneByKeyPromptSnippet2PromptSnippets1TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: FindOneByKeyPromptSnippet2PromptSnippetsResponseType
    text: str


class FindOneByKeyPromptSnippet2PromptSnippets1(BaseModel):
    r"""Text content part of a prompt message"""

    type: FindOneByKeyPromptSnippet2PromptSnippetsResponseType

    text: str


FindOneByKeyPromptSnippetContentPromptSnippets2TypedDict = TypeAliasType(
    "FindOneByKeyPromptSnippetContentPromptSnippets2TypedDict",
    Union[
        FindOneByKeyPromptSnippet2PromptSnippets1TypedDict,
        FindOneByKeyPromptSnippet2PromptSnippets2TypedDict,
    ],
)


FindOneByKeyPromptSnippetContentPromptSnippets2 = TypeAliasType(
    "FindOneByKeyPromptSnippetContentPromptSnippets2",
    Union[
        FindOneByKeyPromptSnippet2PromptSnippets1,
        FindOneByKeyPromptSnippet2PromptSnippets2,
    ],
)


FindOneByKeyPromptSnippetPromptSnippetsContentTypedDict = TypeAliasType(
    "FindOneByKeyPromptSnippetPromptSnippetsContentTypedDict",
    Union[str, List[FindOneByKeyPromptSnippetContentPromptSnippets2TypedDict]],
)
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


FindOneByKeyPromptSnippetPromptSnippetsContent = TypeAliasType(
    "FindOneByKeyPromptSnippetPromptSnippetsContent",
    Union[str, List[FindOneByKeyPromptSnippetContentPromptSnippets2]],
)
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


FindOneByKeyPromptSnippetPromptSnippetsResponseType = Literal["function"]


class FindOneByKeyPromptSnippetPromptSnippetsFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class FindOneByKeyPromptSnippetPromptSnippetsFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class FindOneByKeyPromptSnippetPromptSnippetsToolCallsTypedDict(TypedDict):
    type: FindOneByKeyPromptSnippetPromptSnippetsResponseType
    function: FindOneByKeyPromptSnippetPromptSnippetsFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class FindOneByKeyPromptSnippetPromptSnippetsToolCalls(BaseModel):
    type: FindOneByKeyPromptSnippetPromptSnippetsResponseType

    function: FindOneByKeyPromptSnippetPromptSnippetsFunction

    id: Optional[str] = None

    index: Optional[float] = None


class FindOneByKeyPromptSnippetPromptSnippetsMessagesTypedDict(TypedDict):
    role: FindOneByKeyPromptSnippetPromptSnippetsRole
    r"""The role of the prompt message"""
    content: FindOneByKeyPromptSnippetPromptSnippetsContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[
        List[FindOneByKeyPromptSnippetPromptSnippetsToolCallsTypedDict]
    ]


class FindOneByKeyPromptSnippetPromptSnippetsMessages(BaseModel):
    role: FindOneByKeyPromptSnippetPromptSnippetsRole
    r"""The role of the prompt message"""

    content: FindOneByKeyPromptSnippetPromptSnippetsContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[List[FindOneByKeyPromptSnippetPromptSnippetsToolCalls]] = None


class FindOneByKeyPromptSnippetPromptSnippetsPromptConfigTypedDict(TypedDict):
    r"""A list of messages compatible with the openAI schema"""

    messages: List[FindOneByKeyPromptSnippetPromptSnippetsMessagesTypedDict]
    stream: NotRequired[bool]
    model: NotRequired[str]
    model_db_id: NotRequired[str]
    r"""The id of the resource"""
    model_type: NotRequired[FindOneByKeyPromptSnippetPromptSnippetsModelType]
    r"""The type of the model"""
    model_parameters: NotRequired[
        FindOneByKeyPromptSnippetPromptSnippetsModelParametersTypedDict
    ]
    r"""Model Parameters: Not all parameters apply to every model"""
    provider: NotRequired[FindOneByKeyPromptSnippetPromptSnippetsProvider]
    integration_id: NotRequired[Nullable[str]]
    r"""The id of the resource"""
    version: NotRequired[str]


class FindOneByKeyPromptSnippetPromptSnippetsPromptConfig(BaseModel):
    r"""A list of messages compatible with the openAI schema"""

    messages: List[FindOneByKeyPromptSnippetPromptSnippetsMessages]

    stream: Optional[bool] = None

    model: Optional[str] = None

    model_db_id: Optional[str] = None
    r"""The id of the resource"""

    model_type: Optional[FindOneByKeyPromptSnippetPromptSnippetsModelType] = None
    r"""The type of the model"""

    model_parameters: Optional[
        FindOneByKeyPromptSnippetPromptSnippetsModelParameters
    ] = None
    r"""Model Parameters: Not all parameters apply to every model"""

    provider: Optional[FindOneByKeyPromptSnippetPromptSnippetsProvider] = None

    integration_id: OptionalNullable[str] = UNSET
    r"""The id of the resource"""

    version: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "stream",
            "model",
            "model_db_id",
            "model_type",
            "model_parameters",
            "provider",
            "integration_id",
            "version",
        ]
        nullable_fields = ["integration_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


FindOneByKeyPromptSnippetPromptSnippetsUseCases = Literal[
    "Agents",
    "Agents simulations",
    "API interaction",
    "Autonomous Agents",
    "Chatbots",
    "Classification",
    "Code understanding",
    "Code writing",
    "Documents QA",
    "Conversation",
    "Extraction",
    "Multi-modal",
    "Self-checking",
    "SQL",
    "Summarization",
    "Tagging",
]

FindOneByKeyPromptSnippetPromptSnippetsLanguage = Literal[
    "Chinese", "Dutch", "English", "French", "German", "Russian", "Spanish"
]
r"""The language that the prompt is written in. Use this field to categorize the prompt for your own purpose"""


class FindOneByKeyPromptSnippetPromptSnippetsMetadataTypedDict(TypedDict):
    use_cases: NotRequired[List[FindOneByKeyPromptSnippetPromptSnippetsUseCases]]
    r"""A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose"""
    language: NotRequired[FindOneByKeyPromptSnippetPromptSnippetsLanguage]
    r"""The language that the prompt is written in. Use this field to categorize the prompt for your own purpose"""


class FindOneByKeyPromptSnippetPromptSnippetsMetadata(BaseModel):
    use_cases: Optional[List[FindOneByKeyPromptSnippetPromptSnippetsUseCases]] = None
    r"""A list of use cases that the prompt is meant to be used for. Use this field to categorize the prompt for your own purpose"""

    language: Optional[FindOneByKeyPromptSnippetPromptSnippetsLanguage] = None
    r"""The language that the prompt is written in. Use this field to categorize the prompt for your own purpose"""


class FindOneByKeyPromptSnippetVersionsTypedDict(TypedDict):
    r"""Prompt version model returned from the API"""

    id: str
    display_name: str
    r"""The prompt snippet’s name, meant to be displayable in the UI."""
    prompt_config: FindOneByKeyPromptSnippetPromptSnippetsPromptConfigTypedDict
    r"""A list of messages compatible with the openAI schema"""
    metadata: FindOneByKeyPromptSnippetPromptSnippetsMetadataTypedDict
    created_by_id: str
    updated_by_id: str
    timestamp: str
    description: NotRequired[Nullable[str]]
    r"""The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose"""


class FindOneByKeyPromptSnippetVersions(BaseModel):
    r"""Prompt version model returned from the API"""

    id: Annotated[str, pydantic.Field(alias="_id")]

    display_name: str
    r"""The prompt snippet’s name, meant to be displayable in the UI."""

    prompt_config: FindOneByKeyPromptSnippetPromptSnippetsPromptConfig
    r"""A list of messages compatible with the openAI schema"""

    metadata: FindOneByKeyPromptSnippetPromptSnippetsMetadata

    created_by_id: str

    updated_by_id: str

    timestamp: str

    description: OptionalNullable[str] = UNSET
    r"""The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description"]
        nullable_fields = ["description"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class FindOneByKeyPromptSnippetResponseBodyTypedDict(TypedDict):
    r"""Prompt snippet model returned from the API"""

    id: str
    owner: FindOneByKeyPromptSnippetOwnerTypedDict
    domain_id: str
    key: str
    display_name: str
    r"""The prompt snippet’s name, meant to be displayable in the UI."""
    prompt_config: FindOneByKeyPromptSnippetPromptConfigTypedDict
    r"""A list of messages compatible with the openAI schema"""
    metadata: FindOneByKeyPromptSnippetMetadataTypedDict
    created_by_id: str
    updated_by_id: str
    type: FindOneByKeyPromptSnippetType
    versions: List[FindOneByKeyPromptSnippetVersionsTypedDict]
    description: NotRequired[Nullable[str]]
    r"""The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose"""
    created: NotRequired[datetime]
    r"""The date and time the resource was created"""
    updated: NotRequired[datetime]
    r"""The date and time the resource was last updated"""


class FindOneByKeyPromptSnippetResponseBody(BaseModel):
    r"""Prompt snippet model returned from the API"""

    id: Annotated[str, pydantic.Field(alias="_id")]

    owner: FindOneByKeyPromptSnippetOwner

    domain_id: str

    key: str

    display_name: str
    r"""The prompt snippet’s name, meant to be displayable in the UI."""

    prompt_config: FindOneByKeyPromptSnippetPromptConfig
    r"""A list of messages compatible with the openAI schema"""

    metadata: FindOneByKeyPromptSnippetMetadata

    created_by_id: str

    updated_by_id: str

    type: FindOneByKeyPromptSnippetType

    versions: List[FindOneByKeyPromptSnippetVersions]

    description: OptionalNullable[str] = UNSET
    r"""The prompt snippet’s description, meant to be displayable in the UI. Use this field to optionally store a long form explanation of the prompt for your own purpose"""

    created: Optional[datetime] = None
    r"""The date and time the resource was created"""

    updated: Optional[datetime] = dateutil.parser.isoparse("2025-01-31T07:05:40.814Z")
    r"""The date and time the resource was last updated"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description", "created", "updated"]
        nullable_fields = ["description"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
