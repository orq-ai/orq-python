"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


InputsTypedDict = TypeAliasType("InputsTypedDict", Union[str, float, bool])


Inputs = TypeAliasType("Inputs", Union[str, float, bool])


DeploymentsPrefixMessages5Role = Literal["tool"]
r"""The role of the messages author, in this case tool."""

DeploymentsPrefixMessagesContentTypedDict = TypeAliasType(
    "DeploymentsPrefixMessagesContentTypedDict", Union[str, List[str]]
)
r"""The contents of the tool message."""


DeploymentsPrefixMessagesContent = TypeAliasType(
    "DeploymentsPrefixMessagesContent", Union[str, List[str]]
)
r"""The contents of the tool message."""


class FiveTypedDict(TypedDict):
    role: DeploymentsPrefixMessages5Role
    r"""The role of the messages author, in this case tool."""
    content: DeploymentsPrefixMessagesContentTypedDict
    r"""The contents of the tool message."""
    tool_call_id: str
    r"""Tool call that this message is responding to."""


class Five(BaseModel):
    role: DeploymentsPrefixMessages5Role
    r"""The role of the messages author, in this case tool."""

    content: DeploymentsPrefixMessagesContent
    r"""The contents of the tool message."""

    tool_call_id: str
    r"""Tool call that this message is responding to."""


Deployments2PrefixMessages4Type = Literal["refusal"]
r"""The type of the content part."""


class Deployments22TypedDict(TypedDict):
    type: Deployments2PrefixMessages4Type
    r"""The type of the content part."""
    refusal: str
    r"""The refusal message generated by the model."""


class Deployments22(BaseModel):
    type: Deployments2PrefixMessages4Type
    r"""The type of the content part."""

    refusal: str
    r"""The refusal message generated by the model."""


Deployments2PrefixMessagesType = Literal["text"]
r"""The type of the content part."""


class Deployments21TypedDict(TypedDict):
    type: Deployments2PrefixMessagesType
    r"""The type of the content part."""
    text: str
    r"""The text content."""


class Deployments21(BaseModel):
    type: Deployments2PrefixMessagesType
    r"""The type of the content part."""

    text: str
    r"""The text content."""


DeploymentsContent2TypedDict = TypeAliasType(
    "DeploymentsContent2TypedDict",
    Union[Deployments21TypedDict, Deployments22TypedDict],
)


DeploymentsContent2 = TypeAliasType(
    "DeploymentsContent2", Union[Deployments21, Deployments22]
)


PrefixMessagesContentTypedDict = TypeAliasType(
    "PrefixMessagesContentTypedDict", Union[str, List[DeploymentsContent2TypedDict]]
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


PrefixMessagesContent = TypeAliasType(
    "PrefixMessagesContent", Union[str, List[DeploymentsContent2]]
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


DeploymentsPrefixMessages4Role = Literal["assistant"]
r"""The role of the messages author, in this case `assistant`."""


class AudioTypedDict(TypedDict):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


class Audio(BaseModel):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


Type = Literal["function"]
r"""The type of the tool. Currently, only `5` is supported."""


class FunctionTypedDict(TypedDict):
    name: NotRequired[str]
    r"""The name of the function to call."""
    arguments: NotRequired[str]
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class Function(BaseModel):
    name: Optional[str] = None
    r"""The name of the function to call."""

    arguments: Optional[str] = None
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class ToolCallsTypedDict(TypedDict):
    id: str
    r"""The ID of the tool call."""
    type: Type
    r"""The type of the tool. Currently, only `5` is supported."""
    function: FunctionTypedDict


class ToolCalls(BaseModel):
    id: str
    r"""The ID of the tool call."""

    type: Type
    r"""The type of the tool. Currently, only `5` is supported."""

    function: Function


class FourTypedDict(TypedDict):
    role: DeploymentsPrefixMessages4Role
    r"""The role of the messages author, in this case `assistant`."""
    content: NotRequired[PrefixMessagesContentTypedDict]
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""
    refusal: NotRequired[Nullable[str]]
    r"""The refusal message by the assistant."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    audio: NotRequired[Nullable[AudioTypedDict]]
    r"""Data about a previous audio response from the model."""
    tool_calls: NotRequired[List[ToolCallsTypedDict]]
    r"""The tool calls generated by the model, such as function calls."""


class Four(BaseModel):
    role: DeploymentsPrefixMessages4Role
    r"""The role of the messages author, in this case `assistant`."""

    content: Optional[PrefixMessagesContent] = None
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""

    refusal: OptionalNullable[str] = UNSET
    r"""The refusal message by the assistant."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""

    audio: OptionalNullable[Audio] = UNSET
    r"""Data about a previous audio response from the model."""

    tool_calls: Optional[List[ToolCalls]] = None
    r"""The tool calls generated by the model, such as function calls."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "refusal", "name", "audio", "tool_calls"]
        nullable_fields = ["refusal", "audio"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


DeploymentsPrefixMessagesRole = Literal["user"]
r"""The role of the messages author, in this case `user`."""

Deployments2Type = Literal["input_audio"]

Format = Literal["mp3", "wav"]
r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class InputAudioTypedDict(TypedDict):
    data: str
    r"""Base64 encoded audio data."""
    format_: Format
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class InputAudio(BaseModel):
    data: str
    r"""Base64 encoded audio data."""

    format_: Annotated[Format, pydantic.Field(alias="format")]
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class Two3TypedDict(TypedDict):
    type: Deployments2Type
    input_audio: InputAudioTypedDict


class Two3(BaseModel):
    type: Deployments2Type

    input_audio: InputAudio


TwoType = Literal["image_url"]

Detail = Literal["low", "high", "auto"]
r"""Specifies the detail level of the image."""


class ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""
    detail: NotRequired[Detail]
    r"""Specifies the detail level of the image."""


class ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""

    detail: Optional[Detail] = None
    r"""Specifies the detail level of the image."""


class Two2TypedDict(TypedDict):
    type: TwoType
    image_url: ImageURLTypedDict


class Two2(BaseModel):
    type: TwoType

    image_url: ImageURL


Deployments2PrefixMessages3Type = Literal["text"]


class Two1TypedDict(TypedDict):
    type: Deployments2PrefixMessages3Type
    text: str


class Two1(BaseModel):
    type: Deployments2PrefixMessages3Type

    text: str


Content2TypedDict = TypeAliasType(
    "Content2TypedDict", Union[Two1TypedDict, Two2TypedDict, Two3TypedDict]
)


Content2 = TypeAliasType("Content2", Union[Two1, Two2, Two3])


ContentTypedDict = TypeAliasType(
    "ContentTypedDict", Union[str, List[Content2TypedDict]]
)
r"""The contents of the user message."""


Content = TypeAliasType("Content", Union[str, List[Content2]])
r"""The contents of the user message."""


class ThreeTypedDict(TypedDict):
    role: DeploymentsPrefixMessagesRole
    r"""The role of the messages author, in this case `user`."""
    content: ContentTypedDict
    r"""The contents of the user message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class Three(BaseModel):
    role: DeploymentsPrefixMessagesRole
    r"""The role of the messages author, in this case `user`."""

    content: Content
    r"""The contents of the user message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


PrefixMessagesRole = Literal["system"]
r"""The role of the messages author, in this case `system`."""


class TwoTypedDict(TypedDict):
    role: PrefixMessagesRole
    r"""The role of the messages author, in this case `system`."""
    content: str
    r"""The contents of the system message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class Two(BaseModel):
    role: PrefixMessagesRole
    r"""The role of the messages author, in this case `system`."""

    content: str
    r"""The contents of the system message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


Role = Literal["developer"]
r"""The role of the messages author, in this case  `developer`."""


class OneTypedDict(TypedDict):
    role: Role
    r"""The role of the messages author, in this case  `developer`."""
    content: str
    r"""The contents of the developer message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class One(BaseModel):
    role: Role
    r"""The role of the messages author, in this case  `developer`."""

    content: str
    r"""The contents of the developer message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


PrefixMessagesTypedDict = TypeAliasType(
    "PrefixMessagesTypedDict",
    Union[OneTypedDict, TwoTypedDict, ThreeTypedDict, FiveTypedDict, FourTypedDict],
)


PrefixMessages = TypeAliasType("PrefixMessages", Union[One, Two, Three, Five, Four])


DeploymentsMessages5Role = Literal["tool"]
r"""The role of the messages author, in this case tool."""

DeploymentsMessages5ContentTypedDict = TypeAliasType(
    "DeploymentsMessages5ContentTypedDict", Union[str, List[str]]
)
r"""The contents of the tool message."""


DeploymentsMessages5Content = TypeAliasType(
    "DeploymentsMessages5Content", Union[str, List[str]]
)
r"""The contents of the tool message."""


class Messages5TypedDict(TypedDict):
    role: DeploymentsMessages5Role
    r"""The role of the messages author, in this case tool."""
    content: DeploymentsMessages5ContentTypedDict
    r"""The contents of the tool message."""
    tool_call_id: str
    r"""Tool call that this message is responding to."""


class Messages5(BaseModel):
    role: DeploymentsMessages5Role
    r"""The role of the messages author, in this case tool."""

    content: DeploymentsMessages5Content
    r"""The contents of the tool message."""

    tool_call_id: str
    r"""Tool call that this message is responding to."""


Deployments2Messages4ContentType = Literal["refusal"]
r"""The type of the content part."""


class Deployments2Messages42TypedDict(TypedDict):
    type: Deployments2Messages4ContentType
    r"""The type of the content part."""
    refusal: str
    r"""The refusal message generated by the model."""


class Deployments2Messages42(BaseModel):
    type: Deployments2Messages4ContentType
    r"""The type of the content part."""

    refusal: str
    r"""The refusal message generated by the model."""


Deployments2Messages4Type = Literal["text"]
r"""The type of the content part."""


class Deployments2Messages41TypedDict(TypedDict):
    type: Deployments2Messages4Type
    r"""The type of the content part."""
    text: str
    r"""The text content."""


class Deployments2Messages41(BaseModel):
    type: Deployments2Messages4Type
    r"""The type of the content part."""

    text: str
    r"""The text content."""


DeploymentsContentMessages42TypedDict = TypeAliasType(
    "DeploymentsContentMessages42TypedDict",
    Union[Deployments2Messages41TypedDict, Deployments2Messages42TypedDict],
)


DeploymentsContentMessages42 = TypeAliasType(
    "DeploymentsContentMessages42",
    Union[Deployments2Messages41, Deployments2Messages42],
)


DeploymentsMessagesContentTypedDict = TypeAliasType(
    "DeploymentsMessagesContentTypedDict",
    Union[str, List[DeploymentsContentMessages42TypedDict]],
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


DeploymentsMessagesContent = TypeAliasType(
    "DeploymentsMessagesContent", Union[str, List[DeploymentsContentMessages42]]
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


DeploymentsMessages4Role = Literal["assistant"]
r"""The role of the messages author, in this case `assistant`."""


class MessagesAudioTypedDict(TypedDict):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


class MessagesAudio(BaseModel):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


MessagesType = Literal["function"]
r"""The type of the tool. Currently, only `5` is supported."""


class MessagesFunctionTypedDict(TypedDict):
    name: NotRequired[str]
    r"""The name of the function to call."""
    arguments: NotRequired[str]
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class MessagesFunction(BaseModel):
    name: Optional[str] = None
    r"""The name of the function to call."""

    arguments: Optional[str] = None
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class MessagesToolCallsTypedDict(TypedDict):
    id: str
    r"""The ID of the tool call."""
    type: MessagesType
    r"""The type of the tool. Currently, only `5` is supported."""
    function: MessagesFunctionTypedDict


class MessagesToolCalls(BaseModel):
    id: str
    r"""The ID of the tool call."""

    type: MessagesType
    r"""The type of the tool. Currently, only `5` is supported."""

    function: MessagesFunction


class Messages4TypedDict(TypedDict):
    role: DeploymentsMessages4Role
    r"""The role of the messages author, in this case `assistant`."""
    content: NotRequired[DeploymentsMessagesContentTypedDict]
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""
    refusal: NotRequired[Nullable[str]]
    r"""The refusal message by the assistant."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    audio: NotRequired[Nullable[MessagesAudioTypedDict]]
    r"""Data about a previous audio response from the model."""
    tool_calls: NotRequired[List[MessagesToolCallsTypedDict]]
    r"""The tool calls generated by the model, such as function calls."""


class Messages4(BaseModel):
    role: DeploymentsMessages4Role
    r"""The role of the messages author, in this case `assistant`."""

    content: Optional[DeploymentsMessagesContent] = None
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""

    refusal: OptionalNullable[str] = UNSET
    r"""The refusal message by the assistant."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""

    audio: OptionalNullable[MessagesAudio] = UNSET
    r"""Data about a previous audio response from the model."""

    tool_calls: Optional[List[MessagesToolCalls]] = None
    r"""The tool calls generated by the model, such as function calls."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "refusal", "name", "audio", "tool_calls"]
        nullable_fields = ["refusal", "audio"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


DeploymentsMessages3Role = Literal["user"]
r"""The role of the messages author, in this case `user`."""

Deployments2Messages3ContentType = Literal["input_audio"]

TwoFormat = Literal["mp3", "wav"]
r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class TwoInputAudioTypedDict(TypedDict):
    data: str
    r"""Base64 encoded audio data."""
    format_: TwoFormat
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class TwoInputAudio(BaseModel):
    data: str
    r"""Base64 encoded audio data."""

    format_: Annotated[TwoFormat, pydantic.Field(alias="format")]
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class Deployments23TypedDict(TypedDict):
    type: Deployments2Messages3ContentType
    input_audio: TwoInputAudioTypedDict


class Deployments23(BaseModel):
    type: Deployments2Messages3ContentType

    input_audio: TwoInputAudio


Deployments2Messages3Type = Literal["image_url"]

TwoDetail = Literal["low", "high", "auto"]
r"""Specifies the detail level of the image."""


class TwoImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""
    detail: NotRequired[TwoDetail]
    r"""Specifies the detail level of the image."""


class TwoImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""

    detail: Optional[TwoDetail] = None
    r"""Specifies the detail level of the image."""


class Deployments2Messages2TypedDict(TypedDict):
    type: Deployments2Messages3Type
    image_url: TwoImageURLTypedDict


class Deployments2Messages2(BaseModel):
    type: Deployments2Messages3Type

    image_url: TwoImageURL


Deployments2MessagesType = Literal["text"]


class Deployments2Messages1TypedDict(TypedDict):
    type: Deployments2MessagesType
    text: str


class Deployments2Messages1(BaseModel):
    type: Deployments2MessagesType

    text: str


DeploymentsContentMessages2TypedDict = TypeAliasType(
    "DeploymentsContentMessages2TypedDict",
    Union[
        Deployments2Messages1TypedDict,
        Deployments2Messages2TypedDict,
        Deployments23TypedDict,
    ],
)


DeploymentsContentMessages2 = TypeAliasType(
    "DeploymentsContentMessages2",
    Union[Deployments2Messages1, Deployments2Messages2, Deployments23],
)


MessagesContentTypedDict = TypeAliasType(
    "MessagesContentTypedDict", Union[str, List[DeploymentsContentMessages2TypedDict]]
)
r"""The contents of the user message."""


MessagesContent = TypeAliasType(
    "MessagesContent", Union[str, List[DeploymentsContentMessages2]]
)
r"""The contents of the user message."""


class Messages3TypedDict(TypedDict):
    role: DeploymentsMessages3Role
    r"""The role of the messages author, in this case `user`."""
    content: MessagesContentTypedDict
    r"""The contents of the user message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class Messages3(BaseModel):
    role: DeploymentsMessages3Role
    r"""The role of the messages author, in this case `user`."""

    content: MessagesContent
    r"""The contents of the user message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentsMessagesRole = Literal["system"]
r"""The role of the messages author, in this case `system`."""


class Messages2TypedDict(TypedDict):
    role: DeploymentsMessagesRole
    r"""The role of the messages author, in this case `system`."""
    content: str
    r"""The contents of the system message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class Messages2(BaseModel):
    role: DeploymentsMessagesRole
    r"""The role of the messages author, in this case `system`."""

    content: str
    r"""The contents of the system message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


MessagesRole = Literal["developer"]
r"""The role of the messages author, in this case  `developer`."""


class Messages1TypedDict(TypedDict):
    role: MessagesRole
    r"""The role of the messages author, in this case  `developer`."""
    content: str
    r"""The contents of the developer message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class Messages1(BaseModel):
    role: MessagesRole
    r"""The role of the messages author, in this case  `developer`."""

    content: str
    r"""The contents of the developer message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


MessagesTypedDict = TypeAliasType(
    "MessagesTypedDict",
    Union[
        Messages1TypedDict,
        Messages2TypedDict,
        Messages3TypedDict,
        Messages5TypedDict,
        Messages4TypedDict,
    ],
)


Messages = TypeAliasType(
    "Messages", Union[Messages1, Messages2, Messages3, Messages5, Messages4]
)


class MetadataTypedDict(TypedDict):
    r"""Metadata about the document"""

    file_name: NotRequired[str]
    r"""Name of the file the text is from."""
    file_type: NotRequired[str]
    r"""Content type of the file the text is from."""
    page_number: NotRequired[float]
    r"""The page number the text is from."""


class Metadata(BaseModel):
    r"""Metadata about the document"""

    file_name: Optional[str] = None
    r"""Name of the file the text is from."""

    file_type: Optional[str] = None
    r"""Content type of the file the text is from."""

    page_number: Optional[float] = None
    r"""The page number the text is from."""


class DocumentsTypedDict(TypedDict):
    text: str
    r"""The text content of the document"""
    metadata: NotRequired[MetadataTypedDict]
    r"""Metadata about the document"""


class Documents(BaseModel):
    text: str
    r"""The text content of the document"""

    metadata: Optional[Metadata] = None
    r"""Metadata about the document"""


class InvokeOptionsTypedDict(TypedDict):
    include_retrievals: NotRequired[bool]
    r"""Whether to include the retrieved knowledge chunks in the response."""


class InvokeOptions(BaseModel):
    include_retrievals: Optional[bool] = False
    r"""Whether to include the retrieved knowledge chunks in the response."""


class DeploymentsTypedDict(TypedDict):
    r"""The deployment request payload"""

    key: str
    r"""The deployment key to invoke"""
    inputs: NotRequired[Dict[str, InputsTypedDict]]
    r"""Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used."""
    context: NotRequired[Dict[str, Any]]
    r"""Key-value pairs that match your data model and fields declared in your configuration matrix. If you send multiple prompt keys, the context will be applied to the evaluation of each key."""
    prefix_messages: NotRequired[List[PrefixMessagesTypedDict]]
    r"""A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment."""
    messages: NotRequired[List[MessagesTypedDict]]
    r"""A list of messages to send to the deployment."""
    file_ids: NotRequired[List[str]]
    r"""A list of file IDs that are associated with the deployment request."""
    metadata: NotRequired[Dict[str, Any]]
    r"""Key-value pairs that you want to attach to the log generated by this request."""
    extra_params: NotRequired[Dict[str, Any]]
    r"""Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration."""
    documents: NotRequired[List[DocumentsTypedDict]]
    r"""A list of relevant documents that evaluators and guardrails can cite to evaluate the user input or the model response based on your deployment settings."""
    invoke_options: NotRequired[InvokeOptionsTypedDict]


class Deployments(BaseModel):
    r"""The deployment request payload"""

    key: str
    r"""The deployment key to invoke"""

    inputs: Optional[Dict[str, Inputs]] = None
    r"""Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used."""

    context: Optional[Dict[str, Any]] = None
    r"""Key-value pairs that match your data model and fields declared in your configuration matrix. If you send multiple prompt keys, the context will be applied to the evaluation of each key."""

    prefix_messages: Optional[List[PrefixMessages]] = None
    r"""A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment."""

    messages: Optional[List[Messages]] = None
    r"""A list of messages to send to the deployment."""

    file_ids: Optional[List[str]] = None
    r"""A list of file IDs that are associated with the deployment request."""

    metadata: Optional[Dict[str, Any]] = None
    r"""Key-value pairs that you want to attach to the log generated by this request."""

    extra_params: Optional[Dict[str, Any]] = None
    r"""Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration."""

    documents: Optional[List[Documents]] = None
    r"""A list of relevant documents that evaluators and guardrails can cite to evaluate the user input or the model response based on your deployment settings."""

    invoke_options: Optional[InvokeOptions] = None
