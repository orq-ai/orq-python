"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateMemoryDocumentRequestBodyTypedDict(TypedDict):
    text: str
    r"""The content of the memory"""
    tags: Dict[str, str]
    r"""Use the tags to categorize documents within a memory collection"""


class CreateMemoryDocumentRequestBody(BaseModel):
    text: str
    r"""The content of the memory"""

    tags: Dict[str, str]
    r"""Use the tags to categorize documents within a memory collection"""


class CreateMemoryDocumentRequestTypedDict(TypedDict):
    memory_store_key: str
    r"""The unique key identifier of the memory store"""
    memory_id: str
    r"""The unique identifier of the memory"""
    request_body: NotRequired[CreateMemoryDocumentRequestBodyTypedDict]


class CreateMemoryDocumentRequest(BaseModel):
    memory_store_key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique key identifier of the memory store"""

    memory_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique identifier of the memory"""

    request_body: Annotated[
        Optional[CreateMemoryDocumentRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class CreateMemoryDocumentResponseBodyTypedDict(TypedDict):
    r"""Memory document successfully created."""

    id: str
    memory_id: str
    store_id: str
    text: str
    created: str
    updated: str
    workspace_id: str
    created_by_id: NotRequired[str]
    updated_by_id: NotRequired[str]
    tags: NotRequired[Dict[str, str]]


class CreateMemoryDocumentResponseBody(BaseModel):
    r"""Memory document successfully created."""

    id: Annotated[str, pydantic.Field(alias="_id")]

    memory_id: str

    store_id: str

    text: str

    created: str

    updated: str

    workspace_id: str

    created_by_id: Optional[str] = None

    updated_by_id: Optional[str] = None

    tags: Optional[Dict[str, str]] = None
