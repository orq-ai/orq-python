"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk import utils
from orq_ai_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class EvalsRagasContextPrecisionRequestBodyTypedDict(TypedDict):
    query: str
    r"""Latest user message"""
    output: str
    r"""The generated response from the model"""
    model: str
    reference: NotRequired[str]
    r"""The reference used to compare the output"""
    retrievals: NotRequired[List[str]]
    r"""Knowledge base retrievals"""


class EvalsRagasContextPrecisionRequestBody(BaseModel):
    query: str
    r"""Latest user message"""

    output: str
    r"""The generated response from the model"""

    model: str

    reference: Optional[str] = None
    r"""The reference used to compare the output"""

    retrievals: Optional[List[str]] = None
    r"""Knowledge base retrievals"""


class EvalsRagasContextPrecisionEvalsResponseResponseBodyData(BaseModel):
    message: str


class EvalsRagasContextPrecisionEvalsResponseResponseBody(Exception):
    r"""Internal server error"""

    data: EvalsRagasContextPrecisionEvalsResponseResponseBodyData

    def __init__(self, data: EvalsRagasContextPrecisionEvalsResponseResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, EvalsRagasContextPrecisionEvalsResponseResponseBodyData
        )


class EvalsRagasContextPrecisionEvalsResponseBodyData(BaseModel):
    message: str


class EvalsRagasContextPrecisionEvalsResponseBody(Exception):
    r"""Evaluator not found"""

    data: EvalsRagasContextPrecisionEvalsResponseBodyData

    def __init__(self, data: EvalsRagasContextPrecisionEvalsResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, EvalsRagasContextPrecisionEvalsResponseBodyData
        )


class EvalsRagasContextPrecisionResponseBodyTypedDict(TypedDict):
    r"""Returns the context precision evaluation result"""

    value: Nullable[float]


class EvalsRagasContextPrecisionResponseBody(BaseModel):
    r"""Returns the context precision evaluation result"""

    value: Nullable[float]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
