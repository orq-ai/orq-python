"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel
from orq_ai_sdk.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetAllMemoryStoresRequestTypedDict(TypedDict):
    limit: NotRequired[float]
    r"""A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10"""
    starting_after: NotRequired[str]
    r"""A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list."""
    ending_before: NotRequired[str]
    r"""A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list."""


class GetAllMemoryStoresRequest(BaseModel):
    limit: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10"""

    starting_after: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, ending with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `after=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the next page of the list."""

    ending_before: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 20 objects, starting with `01JJ1HDHN79XAS7A01WB3HYSDB`, your subsequent call can include `before=01JJ1HDHN79XAS7A01WB3HYSDB` in order to fetch the previous page of the list."""


GetAllMemoryStoresObject = Literal["list"]

GetAllMemoryStoresModel17 = Literal["jina/jina-embeddings-v3"]

GetAllMemoryStoresModel16 = Literal["jina/jina-clip-v2"]

GetAllMemoryStoresModel15 = Literal["jina/jina-embeddings-v2-base-de"]

GetAllMemoryStoresModel14 = Literal["jina/jina-embeddings-v2-base-code"]

GetAllMemoryStoresModel13 = Literal["jina/jina-embeddings-v2-base-zh"]

GetAllMemoryStoresModel12 = Literal["jina/jina-embeddings-v2-base-en"]

GetAllMemoryStoresModel11 = Literal["jina/jina-embeddings-v2-base-es"]

GetAllMemoryStoresModel10 = Literal["jina/jina-clip-v1"]

GetAllMemoryStoresModel9 = Literal["google-ai/text-embedding-004"]

GetAllMemoryStoresModel8 = Literal["openai/text-embedding-ada-002"]

GetAllMemoryStoresModel7 = Literal["openai/text-embedding-3-small"]

GetAllMemoryStoresModel6 = Literal["openai/text-embedding-3-large"]

GetAllMemoryStoresModel5 = Literal["azure/text-embedding-ada-002"]

GetAllMemoryStoresModel4 = Literal["cohere/embed-english-v3.0"]

GetAllMemoryStoresModel3 = Literal["cohere/embed-english-light-v3.0"]

GetAllMemoryStoresModel2 = Literal["cohere/embed-multilingual-light-v3.0"]

GetAllMemoryStoresModel1 = Literal["cohere/embed-multilingual-v3.0"]

GetAllMemoryStoresModelTypedDict = TypeAliasType(
    "GetAllMemoryStoresModelTypedDict",
    Union[
        GetAllMemoryStoresModel1,
        GetAllMemoryStoresModel2,
        GetAllMemoryStoresModel3,
        GetAllMemoryStoresModel4,
        GetAllMemoryStoresModel5,
        GetAllMemoryStoresModel6,
        GetAllMemoryStoresModel7,
        GetAllMemoryStoresModel8,
        GetAllMemoryStoresModel9,
        GetAllMemoryStoresModel10,
        GetAllMemoryStoresModel11,
        GetAllMemoryStoresModel12,
        GetAllMemoryStoresModel13,
        GetAllMemoryStoresModel14,
        GetAllMemoryStoresModel15,
        GetAllMemoryStoresModel16,
        GetAllMemoryStoresModel17,
    ],
)


GetAllMemoryStoresModel = TypeAliasType(
    "GetAllMemoryStoresModel",
    Union[
        GetAllMemoryStoresModel1,
        GetAllMemoryStoresModel2,
        GetAllMemoryStoresModel3,
        GetAllMemoryStoresModel4,
        GetAllMemoryStoresModel5,
        GetAllMemoryStoresModel6,
        GetAllMemoryStoresModel7,
        GetAllMemoryStoresModel8,
        GetAllMemoryStoresModel9,
        GetAllMemoryStoresModel10,
        GetAllMemoryStoresModel11,
        GetAllMemoryStoresModel12,
        GetAllMemoryStoresModel13,
        GetAllMemoryStoresModel14,
        GetAllMemoryStoresModel15,
        GetAllMemoryStoresModel16,
        GetAllMemoryStoresModel17,
    ],
)


class GetAllMemoryStoresEmbeddingConfigTypedDict(TypedDict):
    model: GetAllMemoryStoresModelTypedDict


class GetAllMemoryStoresEmbeddingConfig(BaseModel):
    model: GetAllMemoryStoresModel


class GetAllMemoryStoresDataTypedDict(TypedDict):
    id: str
    r"""The unique identifier of the memory store"""
    key: str
    r"""The unique key of the memory store. The key is unique and inmmutable and cannot be repeated within the same workspace."""
    description: str
    r"""The description of the memory store. Be as precise as possible to help the AI to understand the purpose of the memory store."""
    created: str
    r"""The creation date of the memory store"""
    updated: str
    r"""The last update date of the memory store"""
    embedding_config: GetAllMemoryStoresEmbeddingConfigTypedDict
    created_by_id: NotRequired[str]
    r"""The user ID of the creator"""
    updated_by_id: NotRequired[str]
    r"""The user ID of the last updater"""
    ttl: NotRequired[float]
    r"""The default time to live of every memory document created within the memory store. Useful to control if the documents in the memory should be store for short or long term."""


class GetAllMemoryStoresData(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""The unique identifier of the memory store"""

    key: str
    r"""The unique key of the memory store. The key is unique and inmmutable and cannot be repeated within the same workspace."""

    description: str
    r"""The description of the memory store. Be as precise as possible to help the AI to understand the purpose of the memory store."""

    created: str
    r"""The creation date of the memory store"""

    updated: str
    r"""The last update date of the memory store"""

    embedding_config: GetAllMemoryStoresEmbeddingConfig

    created_by_id: Optional[str] = None
    r"""The user ID of the creator"""

    updated_by_id: Optional[str] = None
    r"""The user ID of the last updater"""

    ttl: Optional[float] = None
    r"""The default time to live of every memory document created within the memory store. Useful to control if the documents in the memory should be store for short or long term."""


class GetAllMemoryStoresResponseBodyTypedDict(TypedDict):
    r"""Successfully retrieved the list of memory stores."""

    object: GetAllMemoryStoresObject
    data: List[GetAllMemoryStoresDataTypedDict]
    has_more: bool


class GetAllMemoryStoresResponseBody(BaseModel):
    r"""Successfully retrieved the list of memory stores."""

    object: GetAllMemoryStoresObject

    data: List[GetAllMemoryStoresData]

    has_more: bool
