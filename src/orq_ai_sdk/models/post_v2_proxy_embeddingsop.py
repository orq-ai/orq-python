"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import BaseModel
from typing import List, Literal, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


PostV2ProxyEmbeddingsInputTypedDict = TypeAliasType(
    "PostV2ProxyEmbeddingsInputTypedDict", Union[str, List[str]]
)
r"""Input text to embed, encoded as a string or array of tokens."""


PostV2ProxyEmbeddingsInput = TypeAliasType(
    "PostV2ProxyEmbeddingsInput", Union[str, List[str]]
)
r"""Input text to embed, encoded as a string or array of tokens."""


PostV2ProxyEmbeddingsEncodingFormat = Literal["base64", "float"]
r"""Type of the document element"""


class PostV2ProxyEmbeddingsRequestBodyTypedDict(TypedDict):
    r"""input"""

    input: PostV2ProxyEmbeddingsInputTypedDict
    r"""Input text to embed, encoded as a string or array of tokens."""
    model: str
    r"""ID of the model to use"""
    encoding_format: NotRequired[PostV2ProxyEmbeddingsEncodingFormat]
    r"""Type of the document element"""
    dimensions: NotRequired[float]
    r"""The number of dimensions the resulting output embeddings should have."""
    user: NotRequired[str]
    r"""A unique identifier representing your end-user"""


class PostV2ProxyEmbeddingsRequestBody(BaseModel):
    r"""input"""

    input: PostV2ProxyEmbeddingsInput
    r"""Input text to embed, encoded as a string or array of tokens."""

    model: str
    r"""ID of the model to use"""

    encoding_format: Optional[PostV2ProxyEmbeddingsEncodingFormat] = "float"
    r"""Type of the document element"""

    dimensions: Optional[float] = None
    r"""The number of dimensions the resulting output embeddings should have."""

    user: Optional[str] = None
    r"""A unique identifier representing your end-user"""


PostV2ProxyEmbeddingsObject = Literal["list"]

PostV2ProxyEmbeddingsProxyObject = Literal["embedding"]
r"""The object type, which is always `embedding`."""

EmbeddingTypedDict = TypeAliasType("EmbeddingTypedDict", Union[List[float], str])
r"""The embedding vector, which is a list of floats. The length of vector depends on the model."""


Embedding = TypeAliasType("Embedding", Union[List[float], str])
r"""The embedding vector, which is a list of floats. The length of vector depends on the model."""


class PostV2ProxyEmbeddingsDataTypedDict(TypedDict):
    object: PostV2ProxyEmbeddingsProxyObject
    r"""The object type, which is always `embedding`."""
    embedding: EmbeddingTypedDict
    r"""The embedding vector, which is a list of floats. The length of vector depends on the model."""
    index: float
    r"""The index of the embedding in the list of embeddings."""


class PostV2ProxyEmbeddingsData(BaseModel):
    object: PostV2ProxyEmbeddingsProxyObject
    r"""The object type, which is always `embedding`."""

    embedding: Embedding
    r"""The embedding vector, which is a list of floats. The length of vector depends on the model."""

    index: float
    r"""The index of the embedding in the list of embeddings."""


class PostV2ProxyEmbeddingsUsageTypedDict(TypedDict):
    prompt_tokens: float
    total_tokens: float


class PostV2ProxyEmbeddingsUsage(BaseModel):
    prompt_tokens: float

    total_tokens: float


class PostV2ProxyEmbeddingsResponseBodyTypedDict(TypedDict):
    r"""Returns the embedding vector."""

    object: PostV2ProxyEmbeddingsObject
    data: List[PostV2ProxyEmbeddingsDataTypedDict]
    model: str
    r"""ID of the model to used."""
    usage: NotRequired[PostV2ProxyEmbeddingsUsageTypedDict]


class PostV2ProxyEmbeddingsResponseBody(BaseModel):
    r"""Returns the embedding vector."""

    object: PostV2ProxyEmbeddingsObject

    data: List[PostV2ProxyEmbeddingsData]

    model: str
    r"""ID of the model to used."""

    usage: Optional[PostV2ProxyEmbeddingsUsage] = None
