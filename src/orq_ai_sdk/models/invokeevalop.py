"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from orq_ai_sdk.models import OrqError
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


InvokeEvalRole = Literal[
    "system",
    "assistant",
    "user",
    "exception",
    "tool",
    "prompt",
    "correction",
    "expected_output",
]
r"""The role of the prompt message"""

InvokeEval2EvalsRequestType = Literal["file"]
r"""The type of the content part. Always `file`."""


class InvokeEval2FileTypedDict(TypedDict):
    file_data: str
    r"""The base64 encoded file data, used when passing the file to the model as a string."""
    filename: NotRequired[str]
    r"""The name of the file, used when passing the file to the model as a string."""


class InvokeEval2File(BaseModel):
    file_data: str
    r"""The base64 encoded file data, used when passing the file to the model as a string."""

    filename: Optional[str] = None
    r"""The name of the file, used when passing the file to the model as a string."""


class InvokeEval23TypedDict(TypedDict):
    type: InvokeEval2EvalsRequestType
    r"""The type of the content part. Always `file`."""
    file: InvokeEval2FileTypedDict


class InvokeEval23(BaseModel):
    type: InvokeEval2EvalsRequestType
    r"""The type of the content part. Always `file`."""

    file: InvokeEval2File


InvokeEval2EvalsType = Literal["image_url"]


class InvokeEval2ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class InvokeEval2ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class InvokeEval22TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: InvokeEval2EvalsType
    image_url: InvokeEval2ImageURLTypedDict


class InvokeEval22(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: InvokeEval2EvalsType

    image_url: InvokeEval2ImageURL


InvokeEval2Type = Literal["text"]


class InvokeEval21TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: InvokeEval2Type
    text: str


class InvokeEval21(BaseModel):
    r"""Text content part of a prompt message"""

    type: InvokeEval2Type

    text: str


InvokeEvalContent2TypedDict = TypeAliasType(
    "InvokeEvalContent2TypedDict",
    Union[InvokeEval21TypedDict, InvokeEval22TypedDict, InvokeEval23TypedDict],
)


InvokeEvalContent2 = TypeAliasType(
    "InvokeEvalContent2", Union[InvokeEval21, InvokeEval22, InvokeEval23]
)


InvokeEvalContentTypedDict = TypeAliasType(
    "InvokeEvalContentTypedDict", Union[str, List[InvokeEvalContent2TypedDict]]
)
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


InvokeEvalContent = TypeAliasType(
    "InvokeEvalContent", Union[str, List[InvokeEvalContent2]]
)
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


InvokeEvalType = Literal["function"]


class InvokeEvalFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class InvokeEvalFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class InvokeEvalToolCallsTypedDict(TypedDict):
    type: InvokeEvalType
    function: InvokeEvalFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class InvokeEvalToolCalls(BaseModel):
    type: InvokeEvalType

    function: InvokeEvalFunction

    id: Optional[str] = None

    index: Optional[float] = None


class InvokeEvalMessagesTypedDict(TypedDict):
    role: InvokeEvalRole
    r"""The role of the prompt message"""
    content: InvokeEvalContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[List[InvokeEvalToolCallsTypedDict]]
    tool_call_id: NotRequired[str]


class InvokeEvalMessages(BaseModel):
    role: InvokeEvalRole
    r"""The role of the prompt message"""

    content: InvokeEvalContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[List[InvokeEvalToolCalls]] = None

    tool_call_id: Optional[str] = None


class InvokeEvalRequestBodyTypedDict(TypedDict):
    query: NotRequired[str]
    r"""Latest user message"""
    output: NotRequired[str]
    r"""The generated response from the model"""
    reference: NotRequired[str]
    r"""The reference used to compare the output"""
    retrievals: NotRequired[List[str]]
    r"""Knowledge base retrievals"""
    messages: NotRequired[List[InvokeEvalMessagesTypedDict]]
    r"""The messages used to generate the output, without the last user message"""


class InvokeEvalRequestBody(BaseModel):
    query: Optional[str] = None
    r"""Latest user message"""

    output: Optional[str] = None
    r"""The generated response from the model"""

    reference: Optional[str] = None
    r"""The reference used to compare the output"""

    retrievals: Optional[List[str]] = None
    r"""Knowledge base retrievals"""

    messages: Optional[List[InvokeEvalMessages]] = None
    r"""The messages used to generate the output, without the last user message"""


class InvokeEvalRequestTypedDict(TypedDict):
    id: str
    r"""Evaluator ID"""
    request_body: NotRequired[InvokeEvalRequestBodyTypedDict]


class InvokeEvalRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Evaluator ID"""

    request_body: Annotated[
        Optional[InvokeEvalRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class InvokeEvalEvalsResponseResponseBodyData(BaseModel):
    message: str


class InvokeEvalEvalsResponseResponseBody(OrqError):
    r"""Error running the evaluator"""

    data: InvokeEvalEvalsResponseResponseBodyData

    def __init__(
        self,
        data: InvokeEvalEvalsResponseResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        self.data = data


class InvokeEvalEvalsResponseBodyData(BaseModel):
    message: str


class InvokeEvalEvalsResponseBody(OrqError):
    r"""Workspace ID is not found on the request"""

    data: InvokeEvalEvalsResponseBodyData

    def __init__(
        self,
        data: InvokeEvalEvalsResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        self.data = data


InvokeEvalResponseBodyEvalsResponse200ApplicationJSON8Type = Literal["http_eval"]

InvokeEvalResponseBodyEvalsResponse200ApplicationJSONValueTypedDict = TypeAliasType(
    "InvokeEvalResponseBodyEvalsResponse200ApplicationJSONValueTypedDict",
    Union[float, bool],
)


InvokeEvalResponseBodyEvalsResponse200ApplicationJSONValue = TypeAliasType(
    "InvokeEvalResponseBodyEvalsResponse200ApplicationJSONValue", Union[float, bool]
)


class InvokeEvalResponseBodyEvalsResponse200ValueTypedDict(TypedDict):
    type: str
    value: InvokeEvalResponseBodyEvalsResponse200ApplicationJSONValueTypedDict


class InvokeEvalResponseBodyEvalsResponse200Value(BaseModel):
    type: str

    value: InvokeEvalResponseBodyEvalsResponse200ApplicationJSONValue


class InvokeEvalResponseBodyHTTPTypedDict(TypedDict):
    type: InvokeEvalResponseBodyEvalsResponse200ApplicationJSON8Type
    value: NotRequired[Nullable[InvokeEvalResponseBodyEvalsResponse200ValueTypedDict]]


class InvokeEvalResponseBodyHTTP(BaseModel):
    type: InvokeEvalResponseBodyEvalsResponse200ApplicationJSON8Type

    value: OptionalNullable[InvokeEvalResponseBodyEvalsResponse200Value] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["value"]
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


InvokeEvalResponseBodyEvalsResponse200ApplicationJSON7Type = Literal["llm_evaluator"]

InvokeEvalResponseBodyEvalsResponse200ApplicationJSON7ValueTypedDict = TypeAliasType(
    "InvokeEvalResponseBodyEvalsResponse200ApplicationJSON7ValueTypedDict",
    Union[float, bool, str],
)


InvokeEvalResponseBodyEvalsResponse200ApplicationJSON7Value = TypeAliasType(
    "InvokeEvalResponseBodyEvalsResponse200ApplicationJSON7Value",
    Union[float, bool, str],
)


class InvokeEvalResponseBodyEvalsResponseValueTypedDict(TypedDict):
    workflow_run_id: str
    value: InvokeEvalResponseBodyEvalsResponse200ApplicationJSON7ValueTypedDict
    explanation: NotRequired[Nullable[str]]


class InvokeEvalResponseBodyEvalsResponseValue(BaseModel):
    workflow_run_id: str

    value: InvokeEvalResponseBodyEvalsResponse200ApplicationJSON7Value

    explanation: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["explanation"]
        nullable_fields = ["explanation"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class InvokeEvalResponseBodyLLMTypedDict(TypedDict):
    type: InvokeEvalResponseBodyEvalsResponse200ApplicationJSON7Type
    value: Nullable[InvokeEvalResponseBodyEvalsResponseValueTypedDict]


class InvokeEvalResponseBodyLLM(BaseModel):
    type: InvokeEvalResponseBodyEvalsResponse200ApplicationJSON7Type

    value: Nullable[InvokeEvalResponseBodyEvalsResponseValue]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


InvokeEvalResponseBodyEvalsResponse200ApplicationJSON6Type = Literal["bert_score"]


class InvokeEvalResponseBodyEvalsValueTypedDict(TypedDict):
    f1: float
    precision: float
    recall: float


class InvokeEvalResponseBodyEvalsValue(BaseModel):
    f1: float

    precision: float

    recall: float


class BERTScoreTypedDict(TypedDict):
    type: InvokeEvalResponseBodyEvalsResponse200ApplicationJSON6Type
    value: InvokeEvalResponseBodyEvalsValueTypedDict


class BERTScore(BaseModel):
    type: InvokeEvalResponseBodyEvalsResponse200ApplicationJSON6Type

    value: InvokeEvalResponseBodyEvalsValue


InvokeEvalResponseBodyEvalsResponse200ApplicationJSONType = Literal["rouge_n"]


class Rouge1TypedDict(TypedDict):
    f1: float
    precision: float
    recall: float


class Rouge1(BaseModel):
    f1: float

    precision: float

    recall: float


class Rouge2TypedDict(TypedDict):
    f1: float
    precision: float
    recall: float


class Rouge2(BaseModel):
    f1: float

    precision: float

    recall: float


class RougeLTypedDict(TypedDict):
    f1: float
    precision: float
    recall: float


class RougeL(BaseModel):
    f1: float

    precision: float

    recall: float


class InvokeEvalResponseBodyValueTypedDict(TypedDict):
    rouge_1: Rouge1TypedDict
    rouge_2: Rouge2TypedDict
    rouge_l: RougeLTypedDict


class InvokeEvalResponseBodyValue(BaseModel):
    rouge_1: Rouge1

    rouge_2: Rouge2

    rouge_l: RougeL


class RougeNTypedDict(TypedDict):
    type: InvokeEvalResponseBodyEvalsResponse200ApplicationJSONType
    value: InvokeEvalResponseBodyValueTypedDict


class RougeN(BaseModel):
    type: InvokeEvalResponseBodyEvalsResponse200ApplicationJSONType

    value: InvokeEvalResponseBodyValue


InvokeEvalResponseBodyEvalsResponse200Type = Literal["string_array"]


class StringArrayTypedDict(TypedDict):
    type: InvokeEvalResponseBodyEvalsResponse200Type
    values: List[Nullable[str]]


class StringArray(BaseModel):
    type: InvokeEvalResponseBodyEvalsResponse200Type

    values: List[Nullable[str]]


InvokeEvalResponseBodyEvalsResponseType = Literal["boolean"]

ResponseBodyValueTypedDict = TypeAliasType(
    "ResponseBodyValueTypedDict", Union[bool, str, float]
)


ResponseBodyValue = TypeAliasType("ResponseBodyValue", Union[bool, str, float])


class ResponseBodyBooleanTypedDict(TypedDict):
    type: InvokeEvalResponseBodyEvalsResponseType
    value: Nullable[ResponseBodyValueTypedDict]


class ResponseBodyBoolean(BaseModel):
    type: InvokeEvalResponseBodyEvalsResponseType

    value: Nullable[ResponseBodyValue]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


InvokeEvalResponseBodyEvalsType = Literal["number"]


class ResponseBodyNumberTypedDict(TypedDict):
    type: InvokeEvalResponseBodyEvalsType
    value: Nullable[float]


class ResponseBodyNumber(BaseModel):
    type: InvokeEvalResponseBodyEvalsType

    value: Nullable[float]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


InvokeEvalResponseBodyType = Literal["string"]


class StringTypedDict(TypedDict):
    type: InvokeEvalResponseBodyType
    value: Nullable[str]


class String(BaseModel):
    type: InvokeEvalResponseBodyType

    value: Nullable[str]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


InvokeEvalResponseBodyTypedDict = TypeAliasType(
    "InvokeEvalResponseBodyTypedDict",
    Union[
        StringTypedDict,
        ResponseBodyNumberTypedDict,
        ResponseBodyBooleanTypedDict,
        StringArrayTypedDict,
        RougeNTypedDict,
        BERTScoreTypedDict,
        InvokeEvalResponseBodyLLMTypedDict,
        InvokeEvalResponseBodyHTTPTypedDict,
    ],
)
r"""Returns the result of the evaluator run"""


InvokeEvalResponseBody = TypeAliasType(
    "InvokeEvalResponseBody",
    Union[
        String,
        ResponseBodyNumber,
        ResponseBodyBoolean,
        StringArray,
        RougeN,
        BERTScore,
        InvokeEvalResponseBodyLLM,
        InvokeEvalResponseBodyHTTP,
    ],
)
r"""Returns the result of the evaluator run"""
