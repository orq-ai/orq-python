"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dataclasses import dataclass, field
import httpx
from orq_ai_sdk.models import OrqError
from orq_ai_sdk.types import BaseModel
import pydantic
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


StreamRunAgentRoleToolMessage = Literal["tool",]
r"""Tool message"""


StreamRunAgentRoleUserMessage = Literal["user",]
r"""User message"""


StreamRunAgentRoleTypedDict = TypeAliasType(
    "StreamRunAgentRoleTypedDict",
    Union[StreamRunAgentRoleUserMessage, StreamRunAgentRoleToolMessage],
)
r"""Message role (user or tool for continuing executions)"""


StreamRunAgentRole = TypeAliasType(
    "StreamRunAgentRole",
    Union[StreamRunAgentRoleUserMessage, StreamRunAgentRoleToolMessage],
)
r"""Message role (user or tool for continuing executions)"""


StreamRunAgentPublicMessagePartAgentsRequestKind = Literal["tool_result",]


class StreamRunAgentPublicMessagePartToolResultPartTypedDict(TypedDict):
    r"""Tool execution result part. Use this ONLY when providing results for a pending tool call from the agent. The tool_call_id must match the ID from the agent's tool call request."""

    kind: StreamRunAgentPublicMessagePartAgentsRequestKind
    tool_call_id: str
    result: NotRequired[Any]
    metadata: NotRequired[Dict[str, Any]]


class StreamRunAgentPublicMessagePartToolResultPart(BaseModel):
    r"""Tool execution result part. Use this ONLY when providing results for a pending tool call from the agent. The tool_call_id must match the ID from the agent's tool call request."""

    kind: StreamRunAgentPublicMessagePartAgentsRequestKind

    tool_call_id: str

    result: Optional[Any] = None

    metadata: Optional[Dict[str, Any]] = None


StreamRunAgentPublicMessagePartAgentsKind = Literal["file",]


class StreamRunAgentFileFileInURIFormatTypedDict(TypedDict):
    r"""File in URI format. Check in the model's documentation for the supported mime types for the URI format"""

    uri: str
    r"""URL for the File content"""
    mime_type: NotRequired[str]
    r"""Optional mimeType for the file"""
    name: NotRequired[str]
    r"""Optional name for the file"""


class StreamRunAgentFileFileInURIFormat(BaseModel):
    r"""File in URI format. Check in the model's documentation for the supported mime types for the URI format"""

    uri: str
    r"""URL for the File content"""

    mime_type: Annotated[Optional[str], pydantic.Field(alias="mimeType")] = None
    r"""Optional mimeType for the file"""

    name: Optional[str] = None
    r"""Optional name for the file"""


class StreamRunAgentFileBinaryFormatTypedDict(TypedDict):
    r"""Binary in base64 format. Check in the model's documentation for the supported mime types for the binary format."""

    bytes_: str
    r"""base64 encoded content of the file"""
    mime_type: NotRequired[str]
    r"""Optional mimeType for the file"""
    name: NotRequired[str]
    r"""Optional name for the file"""


class StreamRunAgentFileBinaryFormat(BaseModel):
    r"""Binary in base64 format. Check in the model's documentation for the supported mime types for the binary format."""

    bytes_: Annotated[str, pydantic.Field(alias="bytes")]
    r"""base64 encoded content of the file"""

    mime_type: Annotated[Optional[str], pydantic.Field(alias="mimeType")] = None
    r"""Optional mimeType for the file"""

    name: Optional[str] = None
    r"""Optional name for the file"""


StreamRunAgentPublicMessagePartFileTypedDict = TypeAliasType(
    "StreamRunAgentPublicMessagePartFileTypedDict",
    Union[
        StreamRunAgentFileBinaryFormatTypedDict,
        StreamRunAgentFileFileInURIFormatTypedDict,
    ],
)


StreamRunAgentPublicMessagePartFile = TypeAliasType(
    "StreamRunAgentPublicMessagePartFile",
    Union[StreamRunAgentFileBinaryFormat, StreamRunAgentFileFileInURIFormat],
)


class StreamRunAgentPublicMessagePartFilePartTypedDict(TypedDict):
    r"""File attachment part. Use this to send files (images, documents, etc.) to the agent for processing."""

    kind: StreamRunAgentPublicMessagePartAgentsKind
    file: StreamRunAgentPublicMessagePartFileTypedDict
    metadata: NotRequired[Dict[str, Any]]


class StreamRunAgentPublicMessagePartFilePart(BaseModel):
    r"""File attachment part. Use this to send files (images, documents, etc.) to the agent for processing."""

    kind: StreamRunAgentPublicMessagePartAgentsKind

    file: StreamRunAgentPublicMessagePartFile

    metadata: Optional[Dict[str, Any]] = None


StreamRunAgentPublicMessagePartKind = Literal["text",]


class StreamRunAgentPublicMessagePartTextPartTypedDict(TypedDict):
    r"""Text content part. Use this to send text messages to the agent."""

    kind: StreamRunAgentPublicMessagePartKind
    text: str


class StreamRunAgentPublicMessagePartTextPart(BaseModel):
    r"""Text content part. Use this to send text messages to the agent."""

    kind: StreamRunAgentPublicMessagePartKind

    text: str


StreamRunAgentPublicMessagePartTypedDict = TypeAliasType(
    "StreamRunAgentPublicMessagePartTypedDict",
    Union[
        StreamRunAgentPublicMessagePartTextPartTypedDict,
        StreamRunAgentPublicMessagePartFilePartTypedDict,
        StreamRunAgentPublicMessagePartToolResultPartTypedDict,
    ],
)
r"""Message part that can be provided by users. Use \"text\" for regular messages, \"file\" for attachments, or \"tool_result\" when responding to tool call requests."""


StreamRunAgentPublicMessagePart = TypeAliasType(
    "StreamRunAgentPublicMessagePart",
    Union[
        StreamRunAgentPublicMessagePartTextPart,
        StreamRunAgentPublicMessagePartFilePart,
        StreamRunAgentPublicMessagePartToolResultPart,
    ],
)
r"""Message part that can be provided by users. Use \"text\" for regular messages, \"file\" for attachments, or \"tool_result\" when responding to tool call requests."""


class StreamRunAgentMessageTypedDict(TypedDict):
    r"""The A2A format message containing the task for the agent to perform."""

    role: StreamRunAgentRoleTypedDict
    r"""Message role (user or tool for continuing executions)"""
    parts: List[StreamRunAgentPublicMessagePartTypedDict]
    r"""A2A message parts (text, file, or tool_result only)"""
    message_id: NotRequired[str]
    r"""Optional A2A message ID in ULID format"""


class StreamRunAgentMessage(BaseModel):
    r"""The A2A format message containing the task for the agent to perform."""

    role: StreamRunAgentRole
    r"""Message role (user or tool for continuing executions)"""

    parts: List[StreamRunAgentPublicMessagePart]
    r"""A2A message parts (text, file, or tool_result only)"""

    message_id: Annotated[Optional[str], pydantic.Field(alias="messageId")] = None
    r"""Optional A2A message ID in ULID format"""


class StreamRunAgentContactTypedDict(TypedDict):
    r"""Information about the contact making the request. If the contact does not exist, it will be created automatically."""

    id: str
    r"""Unique identifier for the contact"""
    display_name: NotRequired[str]
    r"""Display name of the contact"""
    email: NotRequired[str]
    r"""Email address of the contact"""
    metadata: NotRequired[List[Dict[str, Any]]]
    r"""A hash of key/value pairs containing any other data about the contact"""
    logo_url: NotRequired[str]
    r"""URL to the contact's avatar or logo"""
    tags: NotRequired[List[str]]
    r"""A list of tags associated with the contact"""


class StreamRunAgentContact(BaseModel):
    r"""Information about the contact making the request. If the contact does not exist, it will be created automatically."""

    id: str
    r"""Unique identifier for the contact"""

    display_name: Optional[str] = None
    r"""Display name of the contact"""

    email: Optional[str] = None
    r"""Email address of the contact"""

    metadata: Optional[List[Dict[str, Any]]] = None
    r"""A hash of key/value pairs containing any other data about the contact"""

    logo_url: Optional[str] = None
    r"""URL to the contact's avatar or logo"""

    tags: Optional[List[str]] = None
    r"""A list of tags associated with the contact"""


class StreamRunAgentThreadTypedDict(TypedDict):
    r"""Thread information to group related requests"""

    id: str
    r"""Unique thread identifier to group related invocations."""
    tags: NotRequired[List[str]]
    r"""Optional tags to differentiate or categorize threads"""


class StreamRunAgentThread(BaseModel):
    r"""Thread information to group related requests"""

    id: str
    r"""Unique thread identifier to group related invocations."""

    tags: Optional[List[str]] = None
    r"""Optional tags to differentiate or categorize threads"""


class StreamRunAgentMemoryTypedDict(TypedDict):
    r"""Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions."""

    entity_id: str
    r"""An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions."""


class StreamRunAgentMemory(BaseModel):
    r"""Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions."""

    entity_id: str
    r"""An entity ID used to link memory stores to a specific user, session, or conversation. This ID is used to isolate and retrieve memories specific to the entity across agent executions."""


class StreamRunAgentKnowledgeBasesTypedDict(TypedDict):
    knowledge_id: str
    r"""Unique identifier of the knowledge base to search"""


class StreamRunAgentKnowledgeBases(BaseModel):
    knowledge_id: str
    r"""Unique identifier of the knowledge base to search"""


class StreamRunAgentTeamOfAgentsTypedDict(TypedDict):
    key: str
    r"""The unique key of the agent within the workspace"""
    role: NotRequired[str]
    r"""The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to."""


class StreamRunAgentTeamOfAgents(BaseModel):
    key: str
    r"""The unique key of the agent within the workspace"""

    role: Optional[str] = None
    r"""The role of the agent in this context. This is used to give extra information to the leader to help it decide which agent to hand off to."""


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type = Literal[
    "function",
]


class StreamRunAgentAgentToolInputRunFunctionTypedDict(TypedDict):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    description: NotRequired[str]
    r"""A description of what the function does, used by the model to choose when and how to call the function."""
    strict: NotRequired[bool]
    r"""Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models."""
    parameters: NotRequired[Dict[str, Any]]
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class StreamRunAgentAgentToolInputRunFunction(BaseModel):
    name: str
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""

    description: Optional[str] = None
    r"""A description of what the function does, used by the model to choose when and how to call the function."""

    strict: Optional[bool] = None
    r"""Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Currently only compatible with `OpenAI` models."""

    parameters: Optional[Dict[str, Any]] = None
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class AgentToolInputRunFunctionToolRunTypedDict(TypedDict):
    r"""Function tool with inline definition for on-the-fly creation in run endpoint"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    function: StreamRunAgentAgentToolInputRunFunctionTypedDict
    id: NotRequired[str]
    display_name: NotRequired[str]
    description: NotRequired[str]
    requires_approval: NotRequired[bool]


class AgentToolInputRunFunctionToolRun(BaseModel):
    r"""Function tool with inline definition for on-the-fly creation in run endpoint"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools14Type

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    function: StreamRunAgentAgentToolInputRunFunction

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None

    display_name: Optional[str] = None

    description: Optional[str] = None

    requires_approval: Optional[bool] = False


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type = Literal[
    "code",
]


AgentToolInputRunLanguage = Literal["python",]


class AgentToolInputRunCodeToolTypedDict(TypedDict):
    language: AgentToolInputRunLanguage
    code: str
    r"""The code to execute."""
    parameters: NotRequired[Dict[str, Any]]
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class AgentToolInputRunCodeTool(BaseModel):
    language: AgentToolInputRunLanguage

    code: str
    r"""The code to execute."""

    parameters: Optional[Dict[str, Any]] = None
    r"""The parameters the functions accepts, described as a JSON Schema object. See the `OpenAI` [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."""


class AgentToolInputRunCodeToolRunTypedDict(TypedDict):
    r"""Code execution tool with inline definition for on-the-fly creation in run endpoint"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    code_tool: AgentToolInputRunCodeToolTypedDict
    id: NotRequired[str]
    display_name: NotRequired[str]
    requires_approval: NotRequired[bool]


class AgentToolInputRunCodeToolRun(BaseModel):
    r"""Code execution tool with inline definition for on-the-fly creation in run endpoint"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools13Type

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    code_tool: AgentToolInputRunCodeTool

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None

    display_name: Optional[str] = None

    requires_approval: Optional[bool] = False


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type = Literal[
    "http",
]


AgentToolInputRunMethod = Literal[
    "GET",
    "POST",
    "PUT",
    "DELETE",
]
r"""The HTTP method to use."""


class AgentToolInputRunBlueprintTypedDict(TypedDict):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""
    method: AgentToolInputRunMethod
    r"""The HTTP method to use."""
    headers: NotRequired[Dict[str, str]]
    r"""The headers to send with the request."""
    body: NotRequired[Dict[str, Any]]
    r"""The body to send with the request."""


class AgentToolInputRunBlueprint(BaseModel):
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    url: str
    r"""The URL to send the request to."""

    method: AgentToolInputRunMethod
    r"""The HTTP method to use."""

    headers: Optional[Dict[str, str]] = None
    r"""The headers to send with the request."""

    body: Optional[Dict[str, Any]] = None
    r"""The body to send with the request."""


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HTTPType = (
    Literal[
        "string",
        "number",
        "boolean",
    ]
)
r"""The type of the argument."""


AgentToolInputRunDefaultValueTypedDict = TypeAliasType(
    "AgentToolInputRunDefaultValueTypedDict", Union[str, float, bool]
)
r"""The default value of the argument."""


AgentToolInputRunDefaultValue = TypeAliasType(
    "AgentToolInputRunDefaultValue", Union[str, float, bool]
)
r"""The default value of the argument."""


class AgentToolInputRunArgumentsTypedDict(TypedDict):
    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HTTPType
    r"""The type of the argument."""
    description: str
    r"""A description of the argument."""
    send_to_model: NotRequired[bool]
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""
    default_value: NotRequired[AgentToolInputRunDefaultValueTypedDict]
    r"""The default value of the argument."""


class AgentToolInputRunArguments(BaseModel):
    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12HTTPType
    r"""The type of the argument."""

    description: str
    r"""A description of the argument."""

    send_to_model: Optional[bool] = True
    r"""Whether to send the argument to the model. If set to false, the argument will not be sent to the model and needs to be provided by the user or it will be left blank."""

    default_value: Optional[AgentToolInputRunDefaultValue] = None
    r"""The default value of the argument."""


class AgentToolInputRunHTTPTypedDict(TypedDict):
    blueprint: AgentToolInputRunBlueprintTypedDict
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""
    arguments: NotRequired[Dict[str, AgentToolInputRunArgumentsTypedDict]]
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class AgentToolInputRunHTTP(BaseModel):
    blueprint: AgentToolInputRunBlueprint
    r"""The blueprint for the HTTP request. The `arguments` field will be used to replace the placeholders in the `url`, `headers`, `body`, and `arguments` fields."""

    arguments: Optional[Dict[str, AgentToolInputRunArguments]] = None
    r"""The arguments to send with the request. The keys will be used to replace the placeholders in the `blueprint` field."""


class AgentToolInputRunHTTPToolRunTypedDict(TypedDict):
    r"""HTTP tool with inline definition for on-the-fly creation in run endpoint"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type
    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""
    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""
    http: AgentToolInputRunHTTPTypedDict
    id: NotRequired[str]
    display_name: NotRequired[str]
    requires_approval: NotRequired[bool]


class AgentToolInputRunHTTPToolRun(BaseModel):
    r"""HTTP tool with inline definition for on-the-fly creation in run endpoint"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools12Type

    key: str
    r"""Unique key of the tool as it will be displayed in the UI"""

    description: str
    r"""A description of the tool, used by the model to choose when and how to call the tool. We do recommend using the `description` field as accurate as possible to give enough context to the model to make the right decision."""

    http: AgentToolInputRunHTTP

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None

    display_name: Optional[str] = None

    requires_approval: Optional[bool] = False


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type = Literal[
    "current_date",
]


class StreamRunAgentAgentToolInputRunCurrentDateToolTypedDict(TypedDict):
    r"""Returns the current date and time"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunCurrentDateTool(BaseModel):
    r"""Returns the current date and time"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools11Type

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type = Literal[
    "query_knowledge_base",
]


class StreamRunAgentAgentToolInputRunQueryKnowledgeBaseToolTypedDict(TypedDict):
    r"""Queries knowledge bases for information"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool(BaseModel):
    r"""Queries knowledge bases for information"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools10Type

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type = Literal[
    "retrieve_knowledge_bases",
]


class StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesToolTypedDict(TypedDict):
    r"""Lists available knowledge bases"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool(BaseModel):
    r"""Lists available knowledge bases"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools9Type

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type = Literal[
    "delete_memory_document",
]


class StreamRunAgentAgentToolInputRunDeleteMemoryDocumentToolTypedDict(TypedDict):
    r"""Deletes documents from memory stores"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool(BaseModel):
    r"""Deletes documents from memory stores"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools8Type

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type = Literal[
    "retrieve_memory_stores",
]


class StreamRunAgentAgentToolInputRunRetrieveMemoryStoresToolTypedDict(TypedDict):
    r"""Lists available memory stores"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool(BaseModel):
    r"""Lists available memory stores"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsTools7Type

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType = Literal[
    "write_memory_store",
]


class StreamRunAgentAgentToolInputRunWriteMemoryStoreToolTypedDict(TypedDict):
    r"""Writes information to agent memory stores"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunWriteMemoryStoreTool(BaseModel):
    r"""Writes information to agent memory stores"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsToolsType

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType = Literal[
    "query_memory_store",
]


class StreamRunAgentAgentToolInputRunQueryMemoryStoreToolTypedDict(TypedDict):
    r"""Queries agent memory stores for context"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunQueryMemoryStoreTool(BaseModel):
    r"""Queries agent memory stores for context"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodySettingsType

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType = Literal[
    "retrieve_agents",
]


class StreamRunAgentAgentToolInputRunRetrieveAgentsToolTypedDict(TypedDict):
    r"""Retrieves available agents in the system"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunRetrieveAgentsTool(BaseModel):
    r"""Retrieves available agents in the system"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestRequestBodyType

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunAgentsRequestType = Literal["call_sub_agent",]


class StreamRunAgentAgentToolInputRunCallSubAgentToolTypedDict(TypedDict):
    r"""Delegates tasks to specialized sub-agents"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestType
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunCallSubAgentTool(BaseModel):
    r"""Delegates tasks to specialized sub-agents"""

    type: StreamRunAgentAgentToolInputRunAgentsRequestType

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunAgentsType = Literal["web_scraper",]


class StreamRunAgentAgentToolInputRunWebScraperToolTypedDict(TypedDict):
    r"""Scrapes and extracts content from web pages"""

    type: StreamRunAgentAgentToolInputRunAgentsType
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunWebScraperTool(BaseModel):
    r"""Scrapes and extracts content from web pages"""

    type: StreamRunAgentAgentToolInputRunAgentsType

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunType = Literal["google_search",]


class StreamRunAgentAgentToolInputRunGoogleSearchToolTypedDict(TypedDict):
    r"""Performs Google searches to retrieve web content"""

    type: StreamRunAgentAgentToolInputRunType
    requires_approval: NotRequired[bool]
    r"""Whether this tool requires approval before execution"""


class StreamRunAgentAgentToolInputRunGoogleSearchTool(BaseModel):
    r"""Performs Google searches to retrieve web content"""

    type: StreamRunAgentAgentToolInputRunType

    requires_approval: Optional[bool] = False
    r"""Whether this tool requires approval before execution"""


StreamRunAgentAgentToolInputRunTypedDict = TypeAliasType(
    "StreamRunAgentAgentToolInputRunTypedDict",
    Union[
        StreamRunAgentAgentToolInputRunGoogleSearchToolTypedDict,
        StreamRunAgentAgentToolInputRunWebScraperToolTypedDict,
        StreamRunAgentAgentToolInputRunCallSubAgentToolTypedDict,
        StreamRunAgentAgentToolInputRunRetrieveAgentsToolTypedDict,
        StreamRunAgentAgentToolInputRunQueryMemoryStoreToolTypedDict,
        StreamRunAgentAgentToolInputRunWriteMemoryStoreToolTypedDict,
        StreamRunAgentAgentToolInputRunRetrieveMemoryStoresToolTypedDict,
        StreamRunAgentAgentToolInputRunDeleteMemoryDocumentToolTypedDict,
        StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesToolTypedDict,
        StreamRunAgentAgentToolInputRunQueryKnowledgeBaseToolTypedDict,
        StreamRunAgentAgentToolInputRunCurrentDateToolTypedDict,
        AgentToolInputRunHTTPToolRunTypedDict,
        AgentToolInputRunCodeToolRunTypedDict,
        AgentToolInputRunFunctionToolRunTypedDict,
    ],
)
r"""Tool configuration for agent run operations. Built-in tools only require a type and requires_approval, while custom tools (http, code, function) support full inline definitions for on-the-fly creation."""


StreamRunAgentAgentToolInputRun = TypeAliasType(
    "StreamRunAgentAgentToolInputRun",
    Union[
        StreamRunAgentAgentToolInputRunGoogleSearchTool,
        StreamRunAgentAgentToolInputRunWebScraperTool,
        StreamRunAgentAgentToolInputRunCallSubAgentTool,
        StreamRunAgentAgentToolInputRunRetrieveAgentsTool,
        StreamRunAgentAgentToolInputRunQueryMemoryStoreTool,
        StreamRunAgentAgentToolInputRunWriteMemoryStoreTool,
        StreamRunAgentAgentToolInputRunRetrieveMemoryStoresTool,
        StreamRunAgentAgentToolInputRunDeleteMemoryDocumentTool,
        StreamRunAgentAgentToolInputRunRetrieveKnowledgeBasesTool,
        StreamRunAgentAgentToolInputRunQueryKnowledgeBaseTool,
        StreamRunAgentAgentToolInputRunCurrentDateTool,
        AgentToolInputRunHTTPToolRun,
        AgentToolInputRunCodeToolRun,
        AgentToolInputRunFunctionToolRun,
    ],
)
r"""Tool configuration for agent run operations. Built-in tools only require a type and requires_approval, while custom tools (http, code, function) support full inline definitions for on-the-fly creation."""


StreamRunAgentToolApprovalRequired = Literal[
    "all",
    "respect_tool",
    "none",
]
r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""


class StreamRunAgentSettingsTypedDict(TypedDict):
    tools: List[StreamRunAgentAgentToolInputRunTypedDict]
    r"""Tools available to the agent"""
    tool_approval_required: NotRequired[StreamRunAgentToolApprovalRequired]
    r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""
    max_iterations: NotRequired[int]
    r"""Maximum iterations(llm calls) before the agent will stop executing."""
    max_execution_time: NotRequired[int]
    r"""Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned."""


class StreamRunAgentSettings(BaseModel):
    tools: List[StreamRunAgentAgentToolInputRun]
    r"""Tools available to the agent"""

    tool_approval_required: Optional[StreamRunAgentToolApprovalRequired] = "none"
    r"""If all, the agent will require approval for all tools. If respect_tool, the agent will require approval for tools that have the requires_approval flag set to true. If none, the agent will not require approval for any tools."""

    max_iterations: Optional[int] = 15
    r"""Maximum iterations(llm calls) before the agent will stop executing."""

    max_execution_time: Optional[int] = 300
    r"""Maximum time (in seconds) for the agent thinking process. This does not include the time for tool calls and sub agent calls. It will be loosely enforced, the in progress LLM calls will not be terminated and the last assistant message will be returned."""


class StreamRunAgentRequestBodyTypedDict(TypedDict):
    key: str
    r"""A unique identifier for the agent. This key must be unique within the same workspace and cannot be reused. When executing the agent, this key determines if the agent already exists. If the agent version differs, a new version is created at the end of the execution, except for the task. All agent parameters are evaluated to decide if a new version is needed."""
    model: str
    r"""The language model that powers the agent. The model must support tool calling capabilities."""
    role: str
    r"""Specifies the agent's function and area of expertise."""
    instructions: str
    r"""Provides context and purpose for the agent. Combined with the system prompt template to generate the agent's instructions."""
    message: StreamRunAgentMessageTypedDict
    r"""The A2A format message containing the task for the agent to perform."""
    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""
    settings: StreamRunAgentSettingsTypedDict
    task_id: NotRequired[str]
    r"""Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue."""
    fallback_models: NotRequired[List[str]]
    r"""Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities."""
    variables: NotRequired[Dict[str, Any]]
    r"""Optional variables for template replacement in system prompt, instructions, and messages"""
    contact: NotRequired[StreamRunAgentContactTypedDict]
    r"""Information about the contact making the request. If the contact does not exist, it will be created automatically."""
    thread: NotRequired[StreamRunAgentThreadTypedDict]
    r"""Thread information to group related requests"""
    memory: NotRequired[StreamRunAgentMemoryTypedDict]
    r"""Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions."""
    description: NotRequired[str]
    r"""A brief summary of the agent's purpose."""
    system_prompt: NotRequired[str]
    r"""A custom system prompt template for the agent. If omitted, the default template is used."""
    memory_stores: NotRequired[List[str]]
    r"""The list of keys of the memory stores that are accessible to the agent."""
    knowledge_bases: NotRequired[List[StreamRunAgentKnowledgeBasesTypedDict]]
    r"""Knowledge base configurations for the agent to access"""
    team_of_agents: NotRequired[List[StreamRunAgentTeamOfAgentsTypedDict]]
    r"""The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks."""
    metadata: NotRequired[Dict[str, Any]]
    r"""Optional metadata for the agent run as key-value pairs that will be included in traces"""
    stream_timeout_seconds: NotRequired[float]
    r"""Stream timeout in seconds (1-3600). Default: 1800 (30 minutes)"""


class StreamRunAgentRequestBody(BaseModel):
    key: str
    r"""A unique identifier for the agent. This key must be unique within the same workspace and cannot be reused. When executing the agent, this key determines if the agent already exists. If the agent version differs, a new version is created at the end of the execution, except for the task. All agent parameters are evaluated to decide if a new version is needed."""

    model: str
    r"""The language model that powers the agent. The model must support tool calling capabilities."""

    role: str
    r"""Specifies the agent's function and area of expertise."""

    instructions: str
    r"""Provides context and purpose for the agent. Combined with the system prompt template to generate the agent's instructions."""

    message: StreamRunAgentMessage
    r"""The A2A format message containing the task for the agent to perform."""

    path: str
    r"""The path where the entity is stored in the project structure. The first element of the path always represents the project name. Any subsequent path element after the project will be created as a folder in the project if it does not exists."""

    settings: StreamRunAgentSettings

    task_id: Optional[str] = None
    r"""Optional task ID to continue an existing agent execution. When provided, the agent will continue the conversation from the existing task state. The task must be in an inactive state to continue."""

    fallback_models: Optional[List[str]] = None
    r"""Optional array of fallback model IDs to use when the primary model fails. Models are tried in order. All models must support tool calling capabilities."""

    variables: Optional[Dict[str, Any]] = None
    r"""Optional variables for template replacement in system prompt, instructions, and messages"""

    contact: Optional[StreamRunAgentContact] = None
    r"""Information about the contact making the request. If the contact does not exist, it will be created automatically."""

    thread: Optional[StreamRunAgentThread] = None
    r"""Thread information to group related requests"""

    memory: Optional[StreamRunAgentMemory] = None
    r"""Memory configuration for the agent execution. Used to associate memory stores with specific entities like users or sessions."""

    description: Optional[str] = None
    r"""A brief summary of the agent's purpose."""

    system_prompt: Optional[str] = None
    r"""A custom system prompt template for the agent. If omitted, the default template is used."""

    memory_stores: Optional[List[str]] = None
    r"""The list of keys of the memory stores that are accessible to the agent."""

    knowledge_bases: Optional[List[StreamRunAgentKnowledgeBases]] = None
    r"""Knowledge base configurations for the agent to access"""

    team_of_agents: Optional[List[StreamRunAgentTeamOfAgents]] = None
    r"""The agents that are accessible to this orchestrator. The main agent can hand off to these agents to perform tasks."""

    metadata: Optional[Dict[str, Any]] = None
    r"""Optional metadata for the agent run as key-value pairs that will be included in traces"""

    stream_timeout_seconds: Optional[float] = None
    r"""Stream timeout in seconds (1-3600). Default: 1800 (30 minutes)"""


class StreamRunAgentAgentsResponseBodyData(BaseModel):
    message: str


@dataclass(unsafe_hash=True)
class StreamRunAgentAgentsResponseBody(OrqError):
    r"""Model not found"""

    data: StreamRunAgentAgentsResponseBodyData = field(hash=False)

    def __init__(
        self,
        data: StreamRunAgentAgentsResponseBodyData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)


class StreamRunAgentResponseBodyTypedDict(TypedDict):
    r"""SSE stream of agent events"""

    data: str
    r"""JSON-encoded event data"""


class StreamRunAgentResponseBody(BaseModel):
    r"""SSE stream of agent events"""

    data: str
    r"""JSON-encoded event data"""
