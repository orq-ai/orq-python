"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, HeaderMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class DeploymentStreamGlobalsTypedDict(TypedDict):
    environment: NotRequired[str]
    contact_id: NotRequired[str]


class DeploymentStreamGlobals(BaseModel):
    environment: Annotated[
        Optional[str],
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None

    contact_id: Annotated[
        Optional[str],
        pydantic.Field(alias="contactId"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None


DeploymentStreamInputsTypedDict = TypeAliasType(
    "DeploymentStreamInputsTypedDict", Union[str, float, bool]
)


DeploymentStreamInputs = TypeAliasType(
    "DeploymentStreamInputs", Union[str, float, bool]
)


DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role = Literal["tool"]
r"""The role of the messages author, in this case tool."""

DeploymentStreamPrefixMessagesDeploymentsRequestContentTypedDict = TypeAliasType(
    "DeploymentStreamPrefixMessagesDeploymentsRequestContentTypedDict",
    Union[str, List[str]],
)
r"""The contents of the tool message."""


DeploymentStreamPrefixMessagesDeploymentsRequestContent = TypeAliasType(
    "DeploymentStreamPrefixMessagesDeploymentsRequestContent", Union[str, List[str]]
)
r"""The contents of the tool message."""


class DeploymentStreamPrefixMessagesToolMessageTypedDict(TypedDict):
    role: DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role
    r"""The role of the messages author, in this case tool."""
    content: DeploymentStreamPrefixMessagesDeploymentsRequestContentTypedDict
    r"""The contents of the tool message."""
    tool_call_id: str
    r"""Tool call that this message is responding to."""


class DeploymentStreamPrefixMessagesToolMessage(BaseModel):
    role: DeploymentStreamPrefixMessagesDeploymentsRequestRequestBody5Role
    r"""The role of the messages author, in this case tool."""

    content: DeploymentStreamPrefixMessagesDeploymentsRequestContent
    r"""The contents of the tool message."""

    tool_call_id: str
    r"""Tool call that this message is responding to."""


DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType = Literal["refusal"]
r"""The type of the content part."""


class DeploymentStream2RefusalContentPartTypedDict(TypedDict):
    type: DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType
    r"""The type of the content part."""
    refusal: str
    r"""The refusal message generated by the model."""


class DeploymentStream2RefusalContentPart(BaseModel):
    type: DeploymentStream2DeploymentsRequestRequestBodyPrefixMessagesType
    r"""The type of the content part."""

    refusal: str
    r"""The refusal message generated by the model."""


DeploymentStream2DeploymentsRequestRequestBodyType = Literal["text"]
r"""The type of the content part."""


class DeploymentStream2TextContentPartTypedDict(TypedDict):
    type: DeploymentStream2DeploymentsRequestRequestBodyType
    r"""The type of the content part."""
    text: str
    r"""The text content."""


class DeploymentStream2TextContentPart(BaseModel):
    type: DeploymentStream2DeploymentsRequestRequestBodyType
    r"""The type of the content part."""

    text: str
    r"""The text content."""


DeploymentStreamContentDeployments2TypedDict = TypeAliasType(
    "DeploymentStreamContentDeployments2TypedDict",
    Union[
        DeploymentStream2TextContentPartTypedDict,
        DeploymentStream2RefusalContentPartTypedDict,
    ],
)


DeploymentStreamContentDeployments2 = TypeAliasType(
    "DeploymentStreamContentDeployments2",
    Union[DeploymentStream2TextContentPart, DeploymentStream2RefusalContentPart],
)


DeploymentStreamPrefixMessagesDeploymentsContentTypedDict = TypeAliasType(
    "DeploymentStreamPrefixMessagesDeploymentsContentTypedDict",
    Union[str, List[DeploymentStreamContentDeployments2TypedDict]],
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


DeploymentStreamPrefixMessagesDeploymentsContent = TypeAliasType(
    "DeploymentStreamPrefixMessagesDeploymentsContent",
    Union[str, List[DeploymentStreamContentDeployments2]],
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole = Literal["assistant"]
r"""The role of the messages author, in this case `assistant`."""


class DeploymentStreamPrefixMessagesAudioTypedDict(TypedDict):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


class DeploymentStreamPrefixMessagesAudio(BaseModel):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


DeploymentStreamPrefixMessagesType = Literal["function"]
r"""The type of the tool. Currently, only `5` is supported."""


class DeploymentStreamPrefixMessagesFunctionTypedDict(TypedDict):
    name: NotRequired[str]
    r"""The name of the function to call."""
    arguments: NotRequired[str]
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class DeploymentStreamPrefixMessagesFunction(BaseModel):
    name: Optional[str] = None
    r"""The name of the function to call."""

    arguments: Optional[str] = None
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class DeploymentStreamPrefixMessagesToolCallsTypedDict(TypedDict):
    id: str
    r"""The ID of the tool call."""
    type: DeploymentStreamPrefixMessagesType
    r"""The type of the tool. Currently, only `5` is supported."""
    function: DeploymentStreamPrefixMessagesFunctionTypedDict


class DeploymentStreamPrefixMessagesToolCalls(BaseModel):
    id: str
    r"""The ID of the tool call."""

    type: DeploymentStreamPrefixMessagesType
    r"""The type of the tool. Currently, only `5` is supported."""

    function: DeploymentStreamPrefixMessagesFunction


class DeploymentStreamPrefixMessagesAssistantMessageTypedDict(TypedDict):
    role: DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole
    r"""The role of the messages author, in this case `assistant`."""
    content: NotRequired[DeploymentStreamPrefixMessagesDeploymentsContentTypedDict]
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""
    refusal: NotRequired[Nullable[str]]
    r"""The refusal message by the assistant."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    audio: NotRequired[Nullable[DeploymentStreamPrefixMessagesAudioTypedDict]]
    r"""Data about a previous audio response from the model."""
    tool_calls: NotRequired[List[DeploymentStreamPrefixMessagesToolCallsTypedDict]]
    r"""The tool calls generated by the model, such as function calls."""


class DeploymentStreamPrefixMessagesAssistantMessage(BaseModel):
    role: DeploymentStreamPrefixMessagesDeploymentsRequestRequestBodyRole
    r"""The role of the messages author, in this case `assistant`."""

    content: Optional[DeploymentStreamPrefixMessagesDeploymentsContent] = None
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""

    refusal: OptionalNullable[str] = UNSET
    r"""The refusal message by the assistant."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""

    audio: OptionalNullable[DeploymentStreamPrefixMessagesAudio] = UNSET
    r"""Data about a previous audio response from the model."""

    tool_calls: Optional[List[DeploymentStreamPrefixMessagesToolCalls]] = None
    r"""The tool calls generated by the model, such as function calls."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "refusal", "name", "audio", "tool_calls"]
        nullable_fields = ["refusal", "audio"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


DeploymentStreamPrefixMessagesDeploymentsRequestRole = Literal["user"]
r"""The role of the messages author, in this case `user`."""

DeploymentStream2DeploymentsRequestType = Literal["input_audio"]

DeploymentStream2Format = Literal["mp3", "wav"]
r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class DeploymentStream2InputAudioTypedDict(TypedDict):
    data: str
    r"""Base64 encoded audio data."""
    format_: DeploymentStream2Format
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class DeploymentStream2InputAudio(BaseModel):
    data: str
    r"""Base64 encoded audio data."""

    format_: Annotated[DeploymentStream2Format, pydantic.Field(alias="format")]
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class DeploymentStream23TypedDict(TypedDict):
    type: DeploymentStream2DeploymentsRequestType
    input_audio: DeploymentStream2InputAudioTypedDict


class DeploymentStream23(BaseModel):
    type: DeploymentStream2DeploymentsRequestType

    input_audio: DeploymentStream2InputAudio


DeploymentStream2DeploymentsType = Literal["image_url"]

DeploymentStream2Detail = Literal["low", "high", "auto"]
r"""Specifies the detail level of the image."""


class DeploymentStream2ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""
    detail: NotRequired[DeploymentStream2Detail]
    r"""Specifies the detail level of the image."""


class DeploymentStream2ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""

    detail: Optional[DeploymentStream2Detail] = None
    r"""Specifies the detail level of the image."""


class DeploymentStream22TypedDict(TypedDict):
    type: DeploymentStream2DeploymentsType
    image_url: DeploymentStream2ImageURLTypedDict


class DeploymentStream22(BaseModel):
    type: DeploymentStream2DeploymentsType

    image_url: DeploymentStream2ImageURL


DeploymentStream2Type = Literal["text"]


class DeploymentStream21TypedDict(TypedDict):
    type: DeploymentStream2Type
    text: str


class DeploymentStream21(BaseModel):
    type: DeploymentStream2Type

    text: str


DeploymentStreamContent2TypedDict = TypeAliasType(
    "DeploymentStreamContent2TypedDict",
    Union[
        DeploymentStream21TypedDict,
        DeploymentStream22TypedDict,
        DeploymentStream23TypedDict,
    ],
)


DeploymentStreamContent2 = TypeAliasType(
    "DeploymentStreamContent2",
    Union[DeploymentStream21, DeploymentStream22, DeploymentStream23],
)


DeploymentStreamPrefixMessagesContentTypedDict = TypeAliasType(
    "DeploymentStreamPrefixMessagesContentTypedDict",
    Union[str, List[DeploymentStreamContent2TypedDict]],
)
r"""The contents of the user message."""


DeploymentStreamPrefixMessagesContent = TypeAliasType(
    "DeploymentStreamPrefixMessagesContent", Union[str, List[DeploymentStreamContent2]]
)
r"""The contents of the user message."""


class DeploymentStreamPrefixMessagesUserMessageTypedDict(TypedDict):
    role: DeploymentStreamPrefixMessagesDeploymentsRequestRole
    r"""The role of the messages author, in this case `user`."""
    content: DeploymentStreamPrefixMessagesContentTypedDict
    r"""The contents of the user message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class DeploymentStreamPrefixMessagesUserMessage(BaseModel):
    role: DeploymentStreamPrefixMessagesDeploymentsRequestRole
    r"""The role of the messages author, in this case `user`."""

    content: DeploymentStreamPrefixMessagesContent
    r"""The contents of the user message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentStreamPrefixMessagesDeploymentsRole = Literal["system"]
r"""The role of the messages author, in this case `system`."""


class DeploymentStreamPrefixMessagesSystemMessageTypedDict(TypedDict):
    role: DeploymentStreamPrefixMessagesDeploymentsRole
    r"""The role of the messages author, in this case `system`."""
    content: str
    r"""The contents of the system message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class DeploymentStreamPrefixMessagesSystemMessage(BaseModel):
    role: DeploymentStreamPrefixMessagesDeploymentsRole
    r"""The role of the messages author, in this case `system`."""

    content: str
    r"""The contents of the system message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentStreamPrefixMessagesRole = Literal["developer"]
r"""The role of the messages author, in this case  `developer`."""


class DeploymentStreamPrefixMessagesDeveloperMessageTypedDict(TypedDict):
    role: DeploymentStreamPrefixMessagesRole
    r"""The role of the messages author, in this case  `developer`."""
    content: str
    r"""The contents of the developer message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class DeploymentStreamPrefixMessagesDeveloperMessage(BaseModel):
    role: DeploymentStreamPrefixMessagesRole
    r"""The role of the messages author, in this case  `developer`."""

    content: str
    r"""The contents of the developer message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentStreamPrefixMessagesTypedDict = TypeAliasType(
    "DeploymentStreamPrefixMessagesTypedDict",
    Union[
        DeploymentStreamPrefixMessagesDeveloperMessageTypedDict,
        DeploymentStreamPrefixMessagesSystemMessageTypedDict,
        DeploymentStreamPrefixMessagesUserMessageTypedDict,
        DeploymentStreamPrefixMessagesToolMessageTypedDict,
        DeploymentStreamPrefixMessagesAssistantMessageTypedDict,
    ],
)


DeploymentStreamPrefixMessages = TypeAliasType(
    "DeploymentStreamPrefixMessages",
    Union[
        DeploymentStreamPrefixMessagesDeveloperMessage,
        DeploymentStreamPrefixMessagesSystemMessage,
        DeploymentStreamPrefixMessagesUserMessage,
        DeploymentStreamPrefixMessagesToolMessage,
        DeploymentStreamPrefixMessagesAssistantMessage,
    ],
)


DeploymentStreamMessagesDeploymentsRequestRequestBody5Role = Literal["tool"]
r"""The role of the messages author, in this case tool."""

DeploymentStreamMessagesDeploymentsRequestContentTypedDict = TypeAliasType(
    "DeploymentStreamMessagesDeploymentsRequestContentTypedDict", Union[str, List[str]]
)
r"""The contents of the tool message."""


DeploymentStreamMessagesDeploymentsRequestContent = TypeAliasType(
    "DeploymentStreamMessagesDeploymentsRequestContent", Union[str, List[str]]
)
r"""The contents of the tool message."""


class DeploymentStreamMessagesToolMessageTypedDict(TypedDict):
    role: DeploymentStreamMessagesDeploymentsRequestRequestBody5Role
    r"""The role of the messages author, in this case tool."""
    content: DeploymentStreamMessagesDeploymentsRequestContentTypedDict
    r"""The contents of the tool message."""
    tool_call_id: str
    r"""Tool call that this message is responding to."""


class DeploymentStreamMessagesToolMessage(BaseModel):
    role: DeploymentStreamMessagesDeploymentsRequestRequestBody5Role
    r"""The role of the messages author, in this case tool."""

    content: DeploymentStreamMessagesDeploymentsRequestContent
    r"""The contents of the tool message."""

    tool_call_id: str
    r"""Tool call that this message is responding to."""


DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType = Literal["refusal"]
r"""The type of the content part."""


class DeploymentStream2DeploymentsRefusalContentPartTypedDict(TypedDict):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType
    r"""The type of the content part."""
    refusal: str
    r"""The refusal message generated by the model."""


class DeploymentStream2DeploymentsRefusalContentPart(BaseModel):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessages4ContentType
    r"""The type of the content part."""

    refusal: str
    r"""The refusal message generated by the model."""


DeploymentStream2DeploymentsRequestRequestBodyMessages4Type = Literal["text"]
r"""The type of the content part."""


class DeploymentStream2DeploymentsTextContentPartTypedDict(TypedDict):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessages4Type
    r"""The type of the content part."""
    text: str
    r"""The text content."""


class DeploymentStream2DeploymentsTextContentPart(BaseModel):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessages4Type
    r"""The type of the content part."""

    text: str
    r"""The text content."""


DeploymentStreamContentDeploymentsRequestRequestBody2TypedDict = TypeAliasType(
    "DeploymentStreamContentDeploymentsRequestRequestBody2TypedDict",
    Union[
        DeploymentStream2DeploymentsTextContentPartTypedDict,
        DeploymentStream2DeploymentsRefusalContentPartTypedDict,
    ],
)


DeploymentStreamContentDeploymentsRequestRequestBody2 = TypeAliasType(
    "DeploymentStreamContentDeploymentsRequestRequestBody2",
    Union[
        DeploymentStream2DeploymentsTextContentPart,
        DeploymentStream2DeploymentsRefusalContentPart,
    ],
)


DeploymentStreamMessagesDeploymentsContentTypedDict = TypeAliasType(
    "DeploymentStreamMessagesDeploymentsContentTypedDict",
    Union[str, List[DeploymentStreamContentDeploymentsRequestRequestBody2TypedDict]],
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


DeploymentStreamMessagesDeploymentsContent = TypeAliasType(
    "DeploymentStreamMessagesDeploymentsContent",
    Union[str, List[DeploymentStreamContentDeploymentsRequestRequestBody2]],
)
r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""


DeploymentStreamMessagesDeploymentsRequestRequestBodyRole = Literal["assistant"]
r"""The role of the messages author, in this case `assistant`."""


class DeploymentStreamMessagesAudioTypedDict(TypedDict):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


class DeploymentStreamMessagesAudio(BaseModel):
    r"""Data about a previous audio response from the model."""

    id: str
    r"""Unique identifier for a previous audio response from the model."""


DeploymentStreamMessagesType = Literal["function"]
r"""The type of the tool. Currently, only `5` is supported."""


class DeploymentStreamMessagesFunctionTypedDict(TypedDict):
    name: NotRequired[str]
    r"""The name of the function to call."""
    arguments: NotRequired[str]
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class DeploymentStreamMessagesFunction(BaseModel):
    name: Optional[str] = None
    r"""The name of the function to call."""

    arguments: Optional[str] = None
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""


class DeploymentStreamMessagesToolCallsTypedDict(TypedDict):
    id: str
    r"""The ID of the tool call."""
    type: DeploymentStreamMessagesType
    r"""The type of the tool. Currently, only `5` is supported."""
    function: DeploymentStreamMessagesFunctionTypedDict


class DeploymentStreamMessagesToolCalls(BaseModel):
    id: str
    r"""The ID of the tool call."""

    type: DeploymentStreamMessagesType
    r"""The type of the tool. Currently, only `5` is supported."""

    function: DeploymentStreamMessagesFunction


class DeploymentStreamMessagesAssistantMessageTypedDict(TypedDict):
    role: DeploymentStreamMessagesDeploymentsRequestRequestBodyRole
    r"""The role of the messages author, in this case `assistant`."""
    content: NotRequired[DeploymentStreamMessagesDeploymentsContentTypedDict]
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""
    refusal: NotRequired[Nullable[str]]
    r"""The refusal message by the assistant."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    audio: NotRequired[Nullable[DeploymentStreamMessagesAudioTypedDict]]
    r"""Data about a previous audio response from the model."""
    tool_calls: NotRequired[List[DeploymentStreamMessagesToolCallsTypedDict]]
    r"""The tool calls generated by the model, such as function calls."""


class DeploymentStreamMessagesAssistantMessage(BaseModel):
    role: DeploymentStreamMessagesDeploymentsRequestRequestBodyRole
    r"""The role of the messages author, in this case `assistant`."""

    content: Optional[DeploymentStreamMessagesDeploymentsContent] = None
    r"""The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified."""

    refusal: OptionalNullable[str] = UNSET
    r"""The refusal message by the assistant."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""

    audio: OptionalNullable[DeploymentStreamMessagesAudio] = UNSET
    r"""Data about a previous audio response from the model."""

    tool_calls: Optional[List[DeploymentStreamMessagesToolCalls]] = None
    r"""The tool calls generated by the model, such as function calls."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "refusal", "name", "audio", "tool_calls"]
        nullable_fields = ["refusal", "audio"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


DeploymentStreamMessagesDeploymentsRequestRole = Literal["user"]
r"""The role of the messages author, in this case `user`."""

DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType = Literal[
    "input_audio"
]

DeploymentStream2DeploymentsFormat = Literal["mp3", "wav"]
r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class DeploymentStream2DeploymentsInputAudioTypedDict(TypedDict):
    data: str
    r"""Base64 encoded audio data."""
    format_: DeploymentStream2DeploymentsFormat
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class DeploymentStream2DeploymentsInputAudio(BaseModel):
    data: str
    r"""Base64 encoded audio data."""

    format_: Annotated[
        DeploymentStream2DeploymentsFormat, pydantic.Field(alias="format")
    ]
    r"""The format of the encoded audio data. Currently supports `wav` and `mp3`."""


class DeploymentStream2Deployments3TypedDict(TypedDict):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType
    input_audio: DeploymentStream2DeploymentsInputAudioTypedDict


class DeploymentStream2Deployments3(BaseModel):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessages3ContentType

    input_audio: DeploymentStream2DeploymentsInputAudio


DeploymentStream2DeploymentsRequestRequestBodyMessages3Type = Literal["image_url"]

DeploymentStream2DeploymentsDetail = Literal["low", "high", "auto"]
r"""Specifies the detail level of the image."""


class DeploymentStream2DeploymentsImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""
    detail: NotRequired[DeploymentStream2DeploymentsDetail]
    r"""Specifies the detail level of the image."""


class DeploymentStream2DeploymentsImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded image data."""

    detail: Optional[DeploymentStream2DeploymentsDetail] = None
    r"""Specifies the detail level of the image."""


class DeploymentStream2Deployments2TypedDict(TypedDict):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessages3Type
    image_url: DeploymentStream2DeploymentsImageURLTypedDict


class DeploymentStream2Deployments2(BaseModel):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessages3Type

    image_url: DeploymentStream2DeploymentsImageURL


DeploymentStream2DeploymentsRequestRequestBodyMessagesType = Literal["text"]


class DeploymentStream2Deployments1TypedDict(TypedDict):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessagesType
    text: str


class DeploymentStream2Deployments1(BaseModel):
    type: DeploymentStream2DeploymentsRequestRequestBodyMessagesType

    text: str


DeploymentStreamContentDeploymentsRequest2TypedDict = TypeAliasType(
    "DeploymentStreamContentDeploymentsRequest2TypedDict",
    Union[
        DeploymentStream2Deployments1TypedDict,
        DeploymentStream2Deployments2TypedDict,
        DeploymentStream2Deployments3TypedDict,
    ],
)


DeploymentStreamContentDeploymentsRequest2 = TypeAliasType(
    "DeploymentStreamContentDeploymentsRequest2",
    Union[
        DeploymentStream2Deployments1,
        DeploymentStream2Deployments2,
        DeploymentStream2Deployments3,
    ],
)


DeploymentStreamMessagesContentTypedDict = TypeAliasType(
    "DeploymentStreamMessagesContentTypedDict",
    Union[str, List[DeploymentStreamContentDeploymentsRequest2TypedDict]],
)
r"""The contents of the user message."""


DeploymentStreamMessagesContent = TypeAliasType(
    "DeploymentStreamMessagesContent",
    Union[str, List[DeploymentStreamContentDeploymentsRequest2]],
)
r"""The contents of the user message."""


class DeploymentStreamMessagesUserMessageTypedDict(TypedDict):
    role: DeploymentStreamMessagesDeploymentsRequestRole
    r"""The role of the messages author, in this case `user`."""
    content: DeploymentStreamMessagesContentTypedDict
    r"""The contents of the user message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class DeploymentStreamMessagesUserMessage(BaseModel):
    role: DeploymentStreamMessagesDeploymentsRequestRole
    r"""The role of the messages author, in this case `user`."""

    content: DeploymentStreamMessagesContent
    r"""The contents of the user message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentStreamMessagesDeploymentsRole = Literal["system"]
r"""The role of the messages author, in this case `system`."""


class DeploymentStreamMessagesSystemMessageTypedDict(TypedDict):
    role: DeploymentStreamMessagesDeploymentsRole
    r"""The role of the messages author, in this case `system`."""
    content: str
    r"""The contents of the system message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class DeploymentStreamMessagesSystemMessage(BaseModel):
    role: DeploymentStreamMessagesDeploymentsRole
    r"""The role of the messages author, in this case `system`."""

    content: str
    r"""The contents of the system message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentStreamMessagesRole = Literal["developer"]
r"""The role of the messages author, in this case  `developer`."""


class DeploymentStreamMessagesDeveloperMessageTypedDict(TypedDict):
    role: DeploymentStreamMessagesRole
    r"""The role of the messages author, in this case  `developer`."""
    content: str
    r"""The contents of the developer message."""
    name: NotRequired[str]
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


class DeploymentStreamMessagesDeveloperMessage(BaseModel):
    role: DeploymentStreamMessagesRole
    r"""The role of the messages author, in this case  `developer`."""

    content: str
    r"""The contents of the developer message."""

    name: Optional[str] = None
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""


DeploymentStreamMessagesTypedDict = TypeAliasType(
    "DeploymentStreamMessagesTypedDict",
    Union[
        DeploymentStreamMessagesDeveloperMessageTypedDict,
        DeploymentStreamMessagesSystemMessageTypedDict,
        DeploymentStreamMessagesUserMessageTypedDict,
        DeploymentStreamMessagesToolMessageTypedDict,
        DeploymentStreamMessagesAssistantMessageTypedDict,
    ],
)


DeploymentStreamMessages = TypeAliasType(
    "DeploymentStreamMessages",
    Union[
        DeploymentStreamMessagesDeveloperMessage,
        DeploymentStreamMessagesSystemMessage,
        DeploymentStreamMessagesUserMessage,
        DeploymentStreamMessagesToolMessage,
        DeploymentStreamMessagesAssistantMessage,
    ],
)


class DeploymentStreamMetadataTypedDict(TypedDict):
    r"""Metadata about the document"""

    file_name: NotRequired[str]
    r"""Name of the file the text is from."""
    file_type: NotRequired[str]
    r"""Content type of the file the text is from."""
    page_number: NotRequired[float]
    r"""The page number the text is from."""


class DeploymentStreamMetadata(BaseModel):
    r"""Metadata about the document"""

    file_name: Optional[str] = None
    r"""Name of the file the text is from."""

    file_type: Optional[str] = None
    r"""Content type of the file the text is from."""

    page_number: Optional[float] = None
    r"""The page number the text is from."""


class DeploymentStreamDocumentsTypedDict(TypedDict):
    text: str
    r"""The text content of the document"""
    metadata: NotRequired[DeploymentStreamMetadataTypedDict]
    r"""Metadata about the document"""


class DeploymentStreamDocuments(BaseModel):
    text: str
    r"""The text content of the document"""

    metadata: Optional[DeploymentStreamMetadata] = None
    r"""Metadata about the document"""


class DeploymentStreamInvokeOptionsTypedDict(TypedDict):
    include_retrievals: NotRequired[bool]
    r"""Whether to include the retrieved knowledge chunks in the response."""


class DeploymentStreamInvokeOptions(BaseModel):
    include_retrievals: Optional[bool] = False
    r"""Whether to include the retrieved knowledge chunks in the response."""


class DeploymentStreamRequestBodyTypedDict(TypedDict):
    key: str
    r"""The deployment key to invoke"""
    inputs: NotRequired[Dict[str, DeploymentStreamInputsTypedDict]]
    r"""Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used."""
    context: NotRequired[Dict[str, Any]]
    r"""Key-value pairs that match your data model and fields declared in your configuration matrix. If you send multiple prompt keys, the context will be applied to the evaluation of each key."""
    prefix_messages: NotRequired[List[DeploymentStreamPrefixMessagesTypedDict]]
    r"""A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment."""
    messages: NotRequired[List[DeploymentStreamMessagesTypedDict]]
    r"""A list of messages to send to the deployment."""
    file_ids: NotRequired[List[str]]
    r"""A list of file IDs that are associated with the deployment request."""
    metadata: NotRequired[Dict[str, Any]]
    r"""Key-value pairs that you want to attach to the log generated by this request."""
    extra_params: NotRequired[Dict[str, Any]]
    r"""Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration."""
    documents: NotRequired[List[DeploymentStreamDocumentsTypedDict]]
    r"""A list of relevant documents that evaluators and guardrails can cite to evaluate the user input or the model response based on your deployment settings."""
    invoke_options: NotRequired[DeploymentStreamInvokeOptionsTypedDict]


class DeploymentStreamRequestBody(BaseModel):
    key: str
    r"""The deployment key to invoke"""

    inputs: Optional[Dict[str, DeploymentStreamInputs]] = None
    r"""Key-value pairs variables to replace in your prompts. If a variable is not provided that is defined in the prompt, the default variables are used."""

    context: Optional[Dict[str, Any]] = None
    r"""Key-value pairs that match your data model and fields declared in your configuration matrix. If you send multiple prompt keys, the context will be applied to the evaluation of each key."""

    prefix_messages: Optional[List[DeploymentStreamPrefixMessages]] = None
    r"""A list of messages to include after the `System` message, but before the  `User` and `Assistant` pairs configured in your deployment."""

    messages: Optional[List[DeploymentStreamMessages]] = None
    r"""A list of messages to send to the deployment."""

    file_ids: Optional[List[str]] = None
    r"""A list of file IDs that are associated with the deployment request."""

    metadata: Optional[Dict[str, Any]] = None
    r"""Key-value pairs that you want to attach to the log generated by this request."""

    extra_params: Optional[Dict[str, Any]] = None
    r"""Utilized for passing additional parameters to the model provider. Exercise caution when using this feature, as the included parameters will overwrite any parameters specified in the deployment prompt configuration."""

    documents: Optional[List[DeploymentStreamDocuments]] = None
    r"""A list of relevant documents that evaluators and guardrails can cite to evaluate the user input or the model response based on your deployment settings."""

    invoke_options: Optional[DeploymentStreamInvokeOptions] = None


DeploymentStreamObject = Literal["chat", "completion", "image", "vision"]
r"""Indicates the type of model used to generate the response"""

DeploymentStreamProvider = Literal[
    "cohere",
    "openai",
    "anthropic",
    "huggingface",
    "replicate",
    "google",
    "google-ai",
    "azure",
    "aws",
    "anyscale",
    "perplexity",
    "groq",
    "fal",
    "leonardoai",
    "nvidia",
    "jina",
    "togetherai",
    "elevenlabs",
]
r"""The provider used to generate the response"""

DeploymentStreamMessageDeploymentsResponseRole = Literal[
    "system",
    "assistant",
    "user",
    "exception",
    "tool",
    "prompt",
    "correction",
    "expected_output",
]
r"""The role of the prompt message"""


class DeploymentStreamMessage3TypedDict(TypedDict):
    role: DeploymentStreamMessageDeploymentsResponseRole
    r"""The role of the prompt message"""
    url: str


class DeploymentStreamMessage3(BaseModel):
    role: DeploymentStreamMessageDeploymentsResponseRole
    r"""The role of the prompt message"""

    url: str


DeploymentStreamMessageDeploymentsRole = Literal[
    "system",
    "assistant",
    "user",
    "exception",
    "tool",
    "prompt",
    "correction",
    "expected_output",
]
r"""The role of the prompt message"""


class DeploymentStreamMessage2TypedDict(TypedDict):
    role: DeploymentStreamMessageDeploymentsRole
    r"""The role of the prompt message"""
    content: Nullable[str]


class DeploymentStreamMessage2(BaseModel):
    role: DeploymentStreamMessageDeploymentsRole
    r"""The role of the prompt message"""

    content: Nullable[str]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["content"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


DeploymentStreamMessageRole = Literal[
    "system",
    "assistant",
    "user",
    "exception",
    "tool",
    "prompt",
    "correction",
    "expected_output",
]
r"""The role of the prompt message"""

DeploymentStreamMessageType = Literal["function"]


class DeploymentStreamMessageFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class DeploymentStreamMessageFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class DeploymentStreamMessageToolCallsTypedDict(TypedDict):
    type: DeploymentStreamMessageType
    function: DeploymentStreamMessageFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class DeploymentStreamMessageToolCalls(BaseModel):
    type: DeploymentStreamMessageType

    function: DeploymentStreamMessageFunction

    id: Optional[str] = None

    index: Optional[float] = None


class DeploymentStreamMessage1TypedDict(TypedDict):
    role: DeploymentStreamMessageRole
    r"""The role of the prompt message"""
    tool_calls: List[DeploymentStreamMessageToolCallsTypedDict]
    content: NotRequired[Nullable[str]]


class DeploymentStreamMessage1(BaseModel):
    role: DeploymentStreamMessageRole
    r"""The role of the prompt message"""

    tool_calls: List[DeploymentStreamMessageToolCalls]

    content: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content"]
        nullable_fields = ["content"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


DeploymentStreamMessageTypedDict = TypeAliasType(
    "DeploymentStreamMessageTypedDict",
    Union[
        DeploymentStreamMessage2TypedDict,
        DeploymentStreamMessage3TypedDict,
        DeploymentStreamMessage1TypedDict,
    ],
)


DeploymentStreamMessage = TypeAliasType(
    "DeploymentStreamMessage",
    Union[DeploymentStreamMessage2, DeploymentStreamMessage3, DeploymentStreamMessage1],
)


class DeploymentStreamChoicesTypedDict(TypedDict):
    index: float
    message: NotRequired[DeploymentStreamMessageTypedDict]
    finish_reason: NotRequired[Nullable[str]]


class DeploymentStreamChoices(BaseModel):
    index: float

    message: Optional[DeploymentStreamMessage] = None

    finish_reason: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["message", "finish_reason"]
        nullable_fields = ["finish_reason"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class DeploymentStreamDeploymentsMetadataTypedDict(TypedDict):
    r"""Metadata of the retrieved chunk from the knowledge base"""

    file_name: str
    r"""Name of the file"""
    page_number: Nullable[float]
    r"""Page number of the chunk"""
    file_type: str
    r"""Type of the file"""
    search_score: float
    r"""Search scores are normalized to be in the range [0, 1]. Search score is calculated based on `[Cosine Similarity](https://en.wikipedia.org/wiki/Cosine_similarity)` algorithm. Scores close to 1 indicate the document is closer to the query, and scores closer to 0 indicate the document is farther from the query."""
    rerank_score: NotRequired[float]
    r"""Rerank scores are normalized to be in the range [0, 1]. Scores close to 1 indicate a high relevance to the query, and scores closer to 0 indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45"""


class DeploymentStreamDeploymentsMetadata(BaseModel):
    r"""Metadata of the retrieved chunk from the knowledge base"""

    file_name: str
    r"""Name of the file"""

    page_number: Nullable[float]
    r"""Page number of the chunk"""

    file_type: str
    r"""Type of the file"""

    search_score: float
    r"""Search scores are normalized to be in the range [0, 1]. Search score is calculated based on `[Cosine Similarity](https://en.wikipedia.org/wiki/Cosine_similarity)` algorithm. Scores close to 1 indicate the document is closer to the query, and scores closer to 0 indicate the document is farther from the query."""

    rerank_score: Optional[float] = None
    r"""Rerank scores are normalized to be in the range [0, 1]. Scores close to 1 indicate a high relevance to the query, and scores closer to 0 indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["rerank_score"]
        nullable_fields = ["page_number"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class DeploymentStreamRetrievalsTypedDict(TypedDict):
    document: str
    r"""Content of the retrieved chunk from the knowledge base"""
    metadata: DeploymentStreamDeploymentsMetadataTypedDict
    r"""Metadata of the retrieved chunk from the knowledge base"""


class DeploymentStreamRetrievals(BaseModel):
    document: str
    r"""Content of the retrieved chunk from the knowledge base"""

    metadata: DeploymentStreamDeploymentsMetadata
    r"""Metadata of the retrieved chunk from the knowledge base"""


class DeploymentStreamDataTypedDict(TypedDict):
    id: NotRequired[str]
    r"""A unique identifier for the response. Can be used to add metrics to the transaction."""
    created: NotRequired[datetime]
    r"""A timestamp indicating when the object was created. Usually in a standardized format like ISO 8601"""
    object: NotRequired[DeploymentStreamObject]
    r"""Indicates the type of model used to generate the response"""
    model: NotRequired[str]
    r"""The model used to generate the response"""
    provider: NotRequired[DeploymentStreamProvider]
    r"""The provider used to generate the response"""
    is_final: NotRequired[bool]
    r"""Indicates if the response is the final response"""
    integration_id: NotRequired[str]
    r"""Indicates integration id used to generate the response"""
    finalized: NotRequired[datetime]
    r"""A timestamp indicating when the object was finalized. Usually in a standardized format like ISO 8601"""
    system_fingerprint: NotRequired[Nullable[str]]
    r"""Provider backed system fingerprint."""
    choices: NotRequired[List[DeploymentStreamChoicesTypedDict]]
    r"""A list of choices generated by the model"""
    retrievals: NotRequired[List[DeploymentStreamRetrievalsTypedDict]]
    r"""List of documents retrieved from the knowledge base. This property is only available when the `include_retrievals` flag is set to `true` in the invoke settings. When stream is set to true, the `retrievals` property will be returned in the last streamed chunk where the property `is_final` is set to `true`."""
    provider_response: NotRequired[Any]
    r"""Response returned by the model provider. This functionality is only supported when streaming is not used. If streaming is used, the `provider_response` property will be set to `null`."""


class DeploymentStreamData(BaseModel):
    id: Optional[str] = None
    r"""A unique identifier for the response. Can be used to add metrics to the transaction."""

    created: Optional[datetime] = None
    r"""A timestamp indicating when the object was created. Usually in a standardized format like ISO 8601"""

    object: Optional[DeploymentStreamObject] = None
    r"""Indicates the type of model used to generate the response"""

    model: Optional[str] = None
    r"""The model used to generate the response"""

    provider: Optional[DeploymentStreamProvider] = None
    r"""The provider used to generate the response"""

    is_final: Optional[bool] = None
    r"""Indicates if the response is the final response"""

    integration_id: Optional[str] = None
    r"""Indicates integration id used to generate the response"""

    finalized: Optional[datetime] = None
    r"""A timestamp indicating when the object was finalized. Usually in a standardized format like ISO 8601"""

    system_fingerprint: OptionalNullable[str] = UNSET
    r"""Provider backed system fingerprint."""

    choices: Optional[List[DeploymentStreamChoices]] = None
    r"""A list of choices generated by the model"""

    retrievals: Optional[List[DeploymentStreamRetrievals]] = None
    r"""List of documents retrieved from the knowledge base. This property is only available when the `include_retrievals` flag is set to `true` in the invoke settings. When stream is set to true, the `retrievals` property will be returned in the last streamed chunk where the property `is_final` is set to `true`."""

    provider_response: Optional[Any] = None
    r"""Response returned by the model provider. This functionality is only supported when streaming is not used. If streaming is used, the `provider_response` property will be set to `null`."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "created",
            "object",
            "model",
            "provider",
            "is_final",
            "integration_id",
            "finalized",
            "system_fingerprint",
            "choices",
            "retrievals",
            "provider_response",
        ]
        nullable_fields = ["system_fingerprint"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class DeploymentStreamResponseBodyTypedDict(TypedDict):
    r"""Response from the gateway"""

    data: NotRequired[DeploymentStreamDataTypedDict]


class DeploymentStreamResponseBody(BaseModel):
    r"""Response from the gateway"""

    data: Optional[DeploymentStreamData] = None
