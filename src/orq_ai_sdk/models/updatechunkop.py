"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateChunkMetadataTypedDict(TypedDict):
    r"""Metadata of the chunk"""

    page_number: NotRequired[float]
    r"""In case you are using PDFs, Word, PowerPoint, etc. this is the page number of the chunk."""


class UpdateChunkMetadata(BaseModel):
    r"""Metadata of the chunk"""

    page_number: Optional[float] = None
    r"""In case you are using PDFs, Word, PowerPoint, etc. this is the page number of the chunk."""


class UpdateChunkRequestBodyTypedDict(TypedDict):
    text: NotRequired[str]
    r"""The text content of the chunk"""
    embedding: NotRequired[List[float]]
    r"""The embedding vector of the chunk. If not provided the chunk will be embedded with the knowledge base embeddings model."""
    metadata: NotRequired[UpdateChunkMetadataTypedDict]
    r"""Metadata of the chunk"""


class UpdateChunkRequestBody(BaseModel):
    text: Optional[str] = None
    r"""The text content of the chunk"""

    embedding: Optional[List[float]] = None
    r"""The embedding vector of the chunk. If not provided the chunk will be embedded with the knowledge base embeddings model."""

    metadata: Optional[UpdateChunkMetadata] = None
    r"""Metadata of the chunk"""


class UpdateChunkRequestTypedDict(TypedDict):
    chunk_id: str
    r"""The unique identifier of the chunk"""
    datasource_id: str
    r"""The unique identifier of the data source"""
    knowledge_id: str
    r"""The unique identifier of the knowledge base"""
    request_body: NotRequired[UpdateChunkRequestBodyTypedDict]


class UpdateChunkRequest(BaseModel):
    chunk_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique identifier of the chunk"""

    datasource_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique identifier of the data source"""

    knowledge_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The unique identifier of the knowledge base"""

    request_body: Annotated[
        Optional[UpdateChunkRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


UpdateChunkStatus = Literal["pending", "processing", "completed", "failed", "queued"]
r"""The status of the chunk"""


class UpdateChunkResponseBodyTypedDict(TypedDict):
    r"""Chunk successfully updated"""

    id: str
    r"""The unique identifier of the chunk"""
    text: str
    r"""The text content of the chunk"""
    enabled: bool
    r"""Whether the chunk is enabled"""
    status: UpdateChunkStatus
    r"""The status of the chunk"""
    created: str
    r"""The date and time the chunk was created"""
    updated: str
    r"""The date and time the chunk was updated"""
    metadata: NotRequired[Dict[str, str]]
    r"""Metadata of the chunk. Can include `page_number` or any other key-value pairs. Only values of type string are supported."""
    created_by_id: NotRequired[Nullable[str]]
    r"""The unique identifier of the user who created the chunk"""
    update_by_id: NotRequired[Nullable[str]]
    r"""The unique identifier of the user who updated the chunk"""


class UpdateChunkResponseBody(BaseModel):
    r"""Chunk successfully updated"""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""The unique identifier of the chunk"""

    text: str
    r"""The text content of the chunk"""

    enabled: bool
    r"""Whether the chunk is enabled"""

    status: UpdateChunkStatus
    r"""The status of the chunk"""

    created: str
    r"""The date and time the chunk was created"""

    updated: str
    r"""The date and time the chunk was updated"""

    metadata: Optional[Dict[str, str]] = None
    r"""Metadata of the chunk. Can include `page_number` or any other key-value pairs. Only values of type string are supported."""

    created_by_id: OptionalNullable[str] = UNSET
    r"""The unique identifier of the user who created the chunk"""

    update_by_id: OptionalNullable[str] = UNSET
    r"""The unique identifier of the user who updated the chunk"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["metadata", "created_by_id", "update_by_id"]
        nullable_fields = ["created_by_id", "update_by_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
