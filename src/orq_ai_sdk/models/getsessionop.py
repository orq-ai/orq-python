"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_ai_sdk.utils import FieldMetadata, PathParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetSessionRequestTypedDict(TypedDict):
    session_id: str
    r"""Unique identifier of the session"""


class GetSessionRequest(BaseModel):
    session_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Unique identifier of the session"""


class GetSessionBillingTypedDict(TypedDict):
    input_cost: float
    r"""Total cost of the session"""
    output_cost: float
    r"""Total cost of the session"""
    total_cost: float
    r"""Total usage of the session"""


class GetSessionBilling(BaseModel):
    input_cost: float
    r"""Total cost of the session"""

    output_cost: float
    r"""Total cost of the session"""

    total_cost: float
    r"""Total usage of the session"""


class GetSessionUsageTypedDict(TypedDict):
    prompt_tokens: float
    r"""Total input tokens of the session"""
    completion_tokens: float
    r"""Total output tokens of the session"""
    total_tokens: float
    r"""Total tokens of the session"""


class GetSessionUsage(BaseModel):
    prompt_tokens: float
    r"""Total input tokens of the session"""

    completion_tokens: float
    r"""Total output tokens of the session"""

    total_tokens: float
    r"""Total tokens of the session"""


class GetSessionResponseBodyTypedDict(TypedDict):
    r"""Session"""

    id: str
    external_id: str
    duration: float
    r"""Duration of the session in ms"""
    contact_ids: List[str]
    r"""List of contact ids"""
    billing: GetSessionBillingTypedDict
    usage: GetSessionUsageTypedDict
    traces_count: float
    r"""Total traces of the session"""
    tags: List[str]
    workspace_id: str
    r"""The workspace id"""
    project_id: NotRequired[Nullable[str]]
    r"""The project id"""
    started_at: NotRequired[datetime]
    r"""The time when the session was created"""
    updated_at: NotRequired[datetime]
    r"""The time when the session was updated"""


class GetSessionResponseBody(BaseModel):
    r"""Session"""

    id: Annotated[str, pydantic.Field(alias="_id")]

    external_id: str

    duration: float
    r"""Duration of the session in ms"""

    contact_ids: List[str]
    r"""List of contact ids"""

    billing: GetSessionBilling

    usage: GetSessionUsage

    traces_count: float
    r"""Total traces of the session"""

    tags: List[str]

    workspace_id: str
    r"""The workspace id"""

    project_id: OptionalNullable[str] = UNSET
    r"""The project id"""

    started_at: Optional[datetime] = None
    r"""The time when the session was created"""

    updated_at: Optional[datetime] = None
    r"""The time when the session was updated"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["project_id", "started_at", "updated_at"]
        nullable_fields = ["project_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
