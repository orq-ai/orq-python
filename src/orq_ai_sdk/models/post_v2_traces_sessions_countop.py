"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from orq_ai_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class PostV2TracesSessionsCountPaginationTypedDict(TypedDict):
    page: NotRequired[float]
    limit: NotRequired[float]
    last_id: NotRequired[Nullable[str]]
    first_id: NotRequired[Nullable[str]]


class PostV2TracesSessionsCountPagination(BaseModel):
    page: Optional[float] = None

    limit: Optional[float] = 50

    last_id: Annotated[OptionalNullable[str], pydantic.Field(alias="lastId")] = UNSET

    first_id: Annotated[OptionalNullable[str], pydantic.Field(alias="firstId")] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["page", "limit", "lastId", "firstId"]
        nullable_fields = ["lastId", "firstId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PostV2TracesSessionsCountDirection = Literal["asc", "desc"]
r"""The direction to sort by"""


class PostV2TracesSessionsCountSortingPropsTypedDict(TypedDict):
    key: str
    r"""The path to sort by"""
    direction: NotRequired[PostV2TracesSessionsCountDirection]
    r"""The direction to sort by"""


class PostV2TracesSessionsCountSortingProps(BaseModel):
    key: str
    r"""The path to sort by"""

    direction: Optional[PostV2TracesSessionsCountDirection] = None
    r"""The direction to sort by"""


PostV2TracesSessionsCountOperator = Literal["and", "or"]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8Operator = Literal["is"]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8Type = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters85 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters84 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters83 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters82 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters81 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8HideOperatorsTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8HideOperatorsTypedDict",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters81,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters82,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters83,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters84,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters85,
    ],
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8HideOperators = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8HideOperators",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters81,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters82,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters83,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters84,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters85,
    ],
)


class PostV2TracesSessionsCountFilters8TypedDict(TypedDict):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8Operator
    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8Type
    name: str
    path: str
    value: NotRequired[bool]
    hide_operators: NotRequired[
        List[
            PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8HideOperatorsTypedDict
        ]
    ]


class PostV2TracesSessionsCountFilters8(BaseModel):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8Operator

    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8Type

    name: str

    path: str

    value: Optional[bool] = False

    hide_operators: Annotated[
        Optional[
            List[PostV2TracesSessionsCountFiltersRequestRequestBodyQuery8HideOperators]
        ],
        pydantic.Field(alias="hideOperators"),
    ] = None


PostV2TracesSessionsCountOperatorRequest2 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountOperatorRequest1 = Literal["is"]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7OperatorTypedDict = (
    TypeAliasType(
        "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7OperatorTypedDict",
        Union[
            PostV2TracesSessionsCountOperatorRequest1,
            PostV2TracesSessionsCountOperatorRequest2,
        ],
    )
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7Operator = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7Operator",
    Union[
        PostV2TracesSessionsCountOperatorRequest1,
        PostV2TracesSessionsCountOperatorRequest2,
    ],
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7Type = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7OptionsType = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters75 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters74 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters73 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters72 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters71 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperatorsTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperatorsTypedDict",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters71,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters72,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters73,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters74,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters75,
    ],
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperators = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperators",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters71,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters72,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters73,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters74,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters75,
    ],
)


FiltersEvaluatorType = Literal[
    "function_eval",
    "http_eval",
    "json_schema",
    "llm_eval",
    "python_eval",
    "ragas",
    "typescript_eval",
]

FiltersEvaluatorOutputType = Literal["boolean", "number", "string", "enum"]


class PostV2TracesSessionsCountFiltersRequestRequestBodyQueryOptionsTypedDict(
    TypedDict
):
    name: str
    path: str
    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7OptionsType
    id: str
    evaluator_id: str
    evaluator_type: FiltersEvaluatorType
    evaluator_output_type: FiltersEvaluatorOutputType
    hide_operators: NotRequired[
        List[
            PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperatorsTypedDict
        ]
    ]


class PostV2TracesSessionsCountFiltersRequestRequestBodyQueryOptions(BaseModel):
    name: str

    path: str

    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7OptionsType

    id: str

    evaluator_id: Annotated[str, pydantic.Field(alias="evaluatorId")]

    evaluator_type: Annotated[
        FiltersEvaluatorType, pydantic.Field(alias="evaluatorType")
    ]

    evaluator_output_type: Annotated[
        FiltersEvaluatorOutputType, pydantic.Field(alias="evaluatorOutputType")
    ]

    hide_operators: Annotated[
        Optional[
            List[PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperators]
        ],
        pydantic.Field(alias="hideOperators"),
    ] = None


PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters76 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters77 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters78 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters79 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters710 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperators1TypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperators1TypedDict",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters710,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters79,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters78,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters77,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters76,
    ],
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperators1 = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperators1",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters710,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters79,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters78,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters77,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters76,
    ],
)


class PostV2TracesSessionsCountFilters7TypedDict(TypedDict):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7OperatorTypedDict
    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7Type
    selected_option_id: Nullable[str]
    options: List[
        PostV2TracesSessionsCountFiltersRequestRequestBodyQueryOptionsTypedDict
    ]
    name: str
    path: str
    value: NotRequired[Nullable[Any]]
    hide_operators: NotRequired[
        List[
            PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperators1TypedDict
        ]
    ]


class PostV2TracesSessionsCountFilters7(BaseModel):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7Operator

    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7Type

    selected_option_id: Annotated[
        Nullable[str], pydantic.Field(alias="selectedOptionId")
    ]

    options: List[PostV2TracesSessionsCountFiltersRequestRequestBodyQueryOptions]

    name: str

    path: str

    value: OptionalNullable[Any] = UNSET

    hide_operators: Annotated[
        Optional[
            List[PostV2TracesSessionsCountFiltersRequestRequestBodyQuery7HideOperators1]
        ],
        pydantic.Field(alias="hideOperators"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["value", "hideOperators"]
        nullable_fields = ["value", "selectedOptionId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PostV2TracesSessionsCountOperator5 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountOperator4 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountOperator3 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountOperator2 = Literal["is", "is_not", "is_empty", "is_not_empty"]

PostV2TracesSessionsCountOperator1 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6OperatorTypedDict = (
    TypeAliasType(
        "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6OperatorTypedDict",
        Union[
            PostV2TracesSessionsCountOperator1,
            PostV2TracesSessionsCountOperator2,
            PostV2TracesSessionsCountOperator3,
            PostV2TracesSessionsCountOperator4,
            PostV2TracesSessionsCountOperator5,
        ],
    )
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6Operator = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6Operator",
    Union[
        PostV2TracesSessionsCountOperator1,
        PostV2TracesSessionsCountOperator2,
        PostV2TracesSessionsCountOperator3,
        PostV2TracesSessionsCountOperator4,
        PostV2TracesSessionsCountOperator5,
    ],
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6Type = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6OptionsType = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters65 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters64 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters63 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters62 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters61 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperatorsTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperatorsTypedDict",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters61,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters62,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters63,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters64,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters65,
    ],
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperators = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperators",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters61,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters62,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters63,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters64,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters65,
    ],
)


class PostV2TracesSessionsCountFiltersRequestRequestBodyOptionsTypedDict(TypedDict):
    name: str
    path: str
    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6OptionsType
    id: str
    hide_operators: NotRequired[
        List[
            PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperatorsTypedDict
        ]
    ]


class PostV2TracesSessionsCountFiltersRequestRequestBodyOptions(BaseModel):
    name: str

    path: str

    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6OptionsType

    id: str

    hide_operators: Annotated[
        Optional[
            List[PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperators]
        ],
        pydantic.Field(alias="hideOperators"),
    ] = None


PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters66 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters67 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters68 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters69 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters610 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperators1TypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperators1TypedDict",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters610,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters69,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters68,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters67,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters66,
    ],
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperators1 = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperators1",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters610,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters69,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters68,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters67,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters66,
    ],
)


class PostV2TracesSessionsCountFilters6TypedDict(TypedDict):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6OperatorTypedDict
    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6Type
    options: List[PostV2TracesSessionsCountFiltersRequestRequestBodyOptionsTypedDict]
    selected_option_id: Nullable[str]
    name: str
    path: str
    value: NotRequired[Nullable[Any]]
    hide_operators: NotRequired[
        List[
            PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperators1TypedDict
        ]
    ]


class PostV2TracesSessionsCountFilters6(BaseModel):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6Operator

    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6Type

    options: List[PostV2TracesSessionsCountFiltersRequestRequestBodyOptions]

    selected_option_id: Annotated[
        Nullable[str], pydantic.Field(alias="selectedOptionId")
    ]

    name: str

    path: str

    value: OptionalNullable[Any] = UNSET

    hide_operators: Annotated[
        Optional[
            List[PostV2TracesSessionsCountFiltersRequestRequestBodyQuery6HideOperators1]
        ],
        pydantic.Field(alias="hideOperators"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["value", "hideOperators"]
        nullable_fields = ["value", "selectedOptionId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5Operator = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5Type = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters5 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters4 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters3 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters2 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters1 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5HideOperatorsTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5HideOperatorsTypedDict",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters1,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters2,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters3,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters4,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters5,
    ],
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5HideOperators = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5HideOperators",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters1,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters2,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters3,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters4,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQueryFilters5,
    ],
)


class PostV2TracesSessionsCountFilters5TypedDict(TypedDict):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5Operator
    value: Nullable[str]
    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5Type
    name: str
    path: str
    hide_operators: NotRequired[
        List[
            PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5HideOperatorsTypedDict
        ]
    ]


class PostV2TracesSessionsCountFilters5(BaseModel):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5Operator

    value: Nullable[str]

    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5Type

    name: str

    path: str

    hide_operators: Annotated[
        Optional[
            List[PostV2TracesSessionsCountFiltersRequestRequestBodyQuery5HideOperators]
        ],
        pydantic.Field(alias="hideOperators"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["hideOperators"]
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PostV2TracesSessionsCountFiltersRequestRequestBodyQueryOperator = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestValueTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestValueTypedDict", Union[float, List[float]]
)


PostV2TracesSessionsCountFiltersRequestValue = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestValue", Union[float, List[float]]
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQueryType = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery5 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery4 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery3 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery2 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery1 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyQueryHideOperatorsTypedDict = (
    TypeAliasType(
        "PostV2TracesSessionsCountFiltersRequestRequestBodyQueryHideOperatorsTypedDict",
        Union[
            PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery1,
            PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery2,
            PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery3,
            PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery4,
            PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery5,
        ],
    )
)


PostV2TracesSessionsCountFiltersRequestRequestBodyQueryHideOperators = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyQueryHideOperators",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery1,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery2,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery3,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery4,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBodyQuery5,
    ],
)


class PostV2TracesSessionsCountFilters4TypedDict(TypedDict):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQueryOperator
    value: Nullable[PostV2TracesSessionsCountFiltersRequestValueTypedDict]
    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQueryType
    name: str
    path: str
    hide_operators: NotRequired[
        List[
            PostV2TracesSessionsCountFiltersRequestRequestBodyQueryHideOperatorsTypedDict
        ]
    ]


class PostV2TracesSessionsCountFilters4(BaseModel):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyQueryOperator

    value: Nullable[PostV2TracesSessionsCountFiltersRequestValue]

    type: PostV2TracesSessionsCountFiltersRequestRequestBodyQueryType

    name: str

    path: str

    hide_operators: Annotated[
        Optional[
            List[PostV2TracesSessionsCountFiltersRequestRequestBodyQueryHideOperators]
        ],
        pydantic.Field(alias="hideOperators"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["hideOperators"]
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PostV2TracesSessionsCountFiltersRequestRequestBodyOperator = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountUnit2 = Literal["hours_ago", "minutes_ago"]

PostV2TracesSessionsCountUnit1 = Literal["day", "week", "month", "year"]

FiltersUnitTypedDict = TypeAliasType(
    "FiltersUnitTypedDict",
    Union[PostV2TracesSessionsCountUnit1, PostV2TracesSessionsCountUnit2],
)


FiltersUnit = TypeAliasType(
    "FiltersUnit", Union[PostV2TracesSessionsCountUnit1, PostV2TracesSessionsCountUnit2]
)


FiltersRelativeTime = Literal[
    "today", "yesterday", "one_week_ago", "one_month_ago", "custom_date"
]

PostV2TracesSessionsCountFiltersDirection = Literal["present", "past"]


class FiltersCriteriaTypedDict(TypedDict):
    unit: NotRequired[FiltersUnitTypedDict]
    count: NotRequired[Nullable[float]]
    relative_time: NotRequired[FiltersRelativeTime]
    custom_date: NotRequired[Nullable[str]]
    direction: NotRequired[PostV2TracesSessionsCountFiltersDirection]
    start_date: NotRequired[Nullable[str]]
    end_date: NotRequired[Nullable[str]]


class FiltersCriteria(BaseModel):
    unit: Optional[FiltersUnit] = None

    count: OptionalNullable[float] = UNSET

    relative_time: Annotated[
        Optional[FiltersRelativeTime], pydantic.Field(alias="relativeTime")
    ] = None

    custom_date: Annotated[
        OptionalNullable[str], pydantic.Field(alias="customDate")
    ] = UNSET

    direction: Optional[PostV2TracesSessionsCountFiltersDirection] = None

    start_date: Annotated[OptionalNullable[str], pydantic.Field(alias="startDate")] = (
        UNSET
    )

    end_date: Annotated[OptionalNullable[str], pydantic.Field(alias="endDate")] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "unit",
            "count",
            "relativeTime",
            "customDate",
            "direction",
            "startDate",
            "endDate",
        ]
        nullable_fields = ["count", "customDate", "startDate", "endDate"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


FiltersMode = Literal["date", "datetime"]


class PostV2TracesSessionsCountFiltersValueTypedDict(TypedDict):
    criteria: Nullable[FiltersCriteriaTypedDict]
    mode: FiltersMode


class PostV2TracesSessionsCountFiltersValue(BaseModel):
    criteria: Nullable[FiltersCriteria]

    mode: FiltersMode

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["criteria"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PostV2TracesSessionsCountFiltersRequestRequestBodyType = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBody5 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBody4 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBody3 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBody2 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequestRequestBody1 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestRequestBodyHideOperatorsTypedDict = (
    TypeAliasType(
        "PostV2TracesSessionsCountFiltersRequestRequestBodyHideOperatorsTypedDict",
        Union[
            PostV2TracesSessionsCountHideOperatorsRequestRequestBody1,
            PostV2TracesSessionsCountHideOperatorsRequestRequestBody2,
            PostV2TracesSessionsCountHideOperatorsRequestRequestBody3,
            PostV2TracesSessionsCountHideOperatorsRequestRequestBody4,
            PostV2TracesSessionsCountHideOperatorsRequestRequestBody5,
        ],
    )
)


PostV2TracesSessionsCountFiltersRequestRequestBodyHideOperators = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestRequestBodyHideOperators",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequestRequestBody1,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBody2,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBody3,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBody4,
        PostV2TracesSessionsCountHideOperatorsRequestRequestBody5,
    ],
)


class PostV2TracesSessionsCountFilters3TypedDict(TypedDict):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyOperator
    value: PostV2TracesSessionsCountFiltersValueTypedDict
    type: PostV2TracesSessionsCountFiltersRequestRequestBodyType
    name: str
    path: str
    hide_operators: NotRequired[
        List[PostV2TracesSessionsCountFiltersRequestRequestBodyHideOperatorsTypedDict]
    ]


class PostV2TracesSessionsCountFilters3(BaseModel):
    operator: PostV2TracesSessionsCountFiltersRequestRequestBodyOperator

    value: PostV2TracesSessionsCountFiltersValue

    type: PostV2TracesSessionsCountFiltersRequestRequestBodyType

    name: str

    path: str

    hide_operators: Annotated[
        Optional[List[PostV2TracesSessionsCountFiltersRequestRequestBodyHideOperators]],
        pydantic.Field(alias="hideOperators"),
    ] = None


PostV2TracesSessionsCountFiltersRequestOperator = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountFiltersRequestType = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountFiltersRequestOptionsTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestOptionsTypedDict", Union[str, float]
)


PostV2TracesSessionsCountFiltersRequestOptions = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestOptions", Union[str, float]
)


PostV2TracesSessionsCountFiltersRequestOptionsMapTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestOptionsMapTypedDict", Union[str, float]
)


PostV2TracesSessionsCountFiltersRequestOptionsMap = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestOptionsMap", Union[str, float]
)


PostV2TracesSessionsCountHideOperatorsRequest5 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequest4 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequest3 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperatorsRequest2 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperatorsRequest1 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersRequestHideOperatorsTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestHideOperatorsTypedDict",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequest1,
        PostV2TracesSessionsCountHideOperatorsRequest2,
        PostV2TracesSessionsCountHideOperatorsRequest3,
        PostV2TracesSessionsCountHideOperatorsRequest4,
        PostV2TracesSessionsCountHideOperatorsRequest5,
    ],
)


PostV2TracesSessionsCountFiltersRequestHideOperators = TypeAliasType(
    "PostV2TracesSessionsCountFiltersRequestHideOperators",
    Union[
        PostV2TracesSessionsCountHideOperatorsRequest1,
        PostV2TracesSessionsCountHideOperatorsRequest2,
        PostV2TracesSessionsCountHideOperatorsRequest3,
        PostV2TracesSessionsCountHideOperatorsRequest4,
        PostV2TracesSessionsCountHideOperatorsRequest5,
    ],
)


class PostV2TracesSessionsCountFilters2TypedDict(TypedDict):
    operator: PostV2TracesSessionsCountFiltersRequestOperator
    value: Nullable[List[Any]]
    type: PostV2TracesSessionsCountFiltersRequestType
    options: List[PostV2TracesSessionsCountFiltersRequestOptionsTypedDict]
    name: str
    path: str
    options_map: NotRequired[
        Nullable[Dict[str, PostV2TracesSessionsCountFiltersRequestOptionsMapTypedDict]]
    ]
    image_url_map: NotRequired[Dict[str, str]]
    hide_operators: NotRequired[
        List[PostV2TracesSessionsCountFiltersRequestHideOperatorsTypedDict]
    ]


class PostV2TracesSessionsCountFilters2(BaseModel):
    operator: PostV2TracesSessionsCountFiltersRequestOperator

    value: Nullable[List[Any]]

    type: PostV2TracesSessionsCountFiltersRequestType

    options: List[PostV2TracesSessionsCountFiltersRequestOptions]

    name: str

    path: str

    options_map: Annotated[
        OptionalNullable[Dict[str, PostV2TracesSessionsCountFiltersRequestOptionsMap]],
        pydantic.Field(alias="optionsMap"),
    ] = UNSET

    image_url_map: Annotated[
        Optional[Dict[str, str]], pydantic.Field(alias="imageUrlMap")
    ] = None

    hide_operators: Annotated[
        Optional[List[PostV2TracesSessionsCountFiltersRequestHideOperators]],
        pydantic.Field(alias="hideOperators"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["optionsMap", "imageUrlMap", "hideOperators"]
        nullable_fields = ["value", "optionsMap"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PostV2TracesSessionsCountFiltersOperator = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountFiltersType = Literal[
    "string",
    "multi-value-array",
    "single-value-array",
    "number",
    "date",
    "object",
    "boolean",
    "evaluator",
]

PostV2TracesSessionsCountFiltersOptionsTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersOptionsTypedDict", Union[str, float]
)


PostV2TracesSessionsCountFiltersOptions = TypeAliasType(
    "PostV2TracesSessionsCountFiltersOptions", Union[str, float]
)


PostV2TracesSessionsCountFiltersOptionsMapTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersOptionsMapTypedDict", Union[str, float]
)


PostV2TracesSessionsCountFiltersOptionsMap = TypeAliasType(
    "PostV2TracesSessionsCountFiltersOptionsMap", Union[str, float]
)


PostV2TracesSessionsCountHideOperators5 = Literal[
    "is",
    "is_before",
    "is_on_or_before",
    "is_between",
    "is_relative_today",
    "is_relative_time",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperators4 = Literal[
    "contains", "does_not_contain", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperators3 = Literal[
    "is", "is_not", "is_empty", "is_not_empty"
]

PostV2TracesSessionsCountHideOperators2 = Literal[
    "equals",
    "is_not_equal",
    "is_greater_than",
    "is_less_than",
    "is_greater_than_or_equal_to",
    "is_less_than_or_equal_to",
    "is_between",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountHideOperators1 = Literal[
    "is",
    "is_not",
    "contains",
    "does_not_contain",
    "starts_with",
    "ends_with",
    "is_empty",
    "is_not_empty",
]

PostV2TracesSessionsCountFiltersHideOperatorsTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersHideOperatorsTypedDict",
    Union[
        PostV2TracesSessionsCountHideOperators1,
        PostV2TracesSessionsCountHideOperators2,
        PostV2TracesSessionsCountHideOperators3,
        PostV2TracesSessionsCountHideOperators4,
        PostV2TracesSessionsCountHideOperators5,
    ],
)


PostV2TracesSessionsCountFiltersHideOperators = TypeAliasType(
    "PostV2TracesSessionsCountFiltersHideOperators",
    Union[
        PostV2TracesSessionsCountHideOperators1,
        PostV2TracesSessionsCountHideOperators2,
        PostV2TracesSessionsCountHideOperators3,
        PostV2TracesSessionsCountHideOperators4,
        PostV2TracesSessionsCountHideOperators5,
    ],
)


class PostV2TracesSessionsCountFilters1TypedDict(TypedDict):
    operator: PostV2TracesSessionsCountFiltersOperator
    type: PostV2TracesSessionsCountFiltersType
    options: List[PostV2TracesSessionsCountFiltersOptionsTypedDict]
    name: str
    path: str
    value: NotRequired[Any]
    options_map: NotRequired[
        Nullable[Dict[str, PostV2TracesSessionsCountFiltersOptionsMapTypedDict]]
    ]
    image_url_map: NotRequired[Dict[str, str]]
    hide_operators: NotRequired[
        List[PostV2TracesSessionsCountFiltersHideOperatorsTypedDict]
    ]


class PostV2TracesSessionsCountFilters1(BaseModel):
    operator: PostV2TracesSessionsCountFiltersOperator

    type: PostV2TracesSessionsCountFiltersType

    options: List[PostV2TracesSessionsCountFiltersOptions]

    name: str

    path: str

    value: Optional[Any] = None

    options_map: Annotated[
        OptionalNullable[Dict[str, PostV2TracesSessionsCountFiltersOptionsMap]],
        pydantic.Field(alias="optionsMap"),
    ] = UNSET

    image_url_map: Annotated[
        Optional[Dict[str, str]], pydantic.Field(alias="imageUrlMap")
    ] = None

    hide_operators: Annotated[
        Optional[List[PostV2TracesSessionsCountFiltersHideOperators]],
        pydantic.Field(alias="hideOperators"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["value", "optionsMap", "imageUrlMap", "hideOperators"]
        nullable_fields = ["optionsMap"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


PostV2TracesSessionsCountFiltersTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountFiltersTypedDict",
    Union[
        PostV2TracesSessionsCountFilters3TypedDict,
        PostV2TracesSessionsCountFilters4TypedDict,
        PostV2TracesSessionsCountFilters5TypedDict,
        PostV2TracesSessionsCountFilters8TypedDict,
        PostV2TracesSessionsCountFilters6TypedDict,
        PostV2TracesSessionsCountFilters7TypedDict,
        PostV2TracesSessionsCountFilters1TypedDict,
        PostV2TracesSessionsCountFilters2TypedDict,
    ],
)


PostV2TracesSessionsCountFilters = TypeAliasType(
    "PostV2TracesSessionsCountFilters",
    Union[
        PostV2TracesSessionsCountFilters3,
        PostV2TracesSessionsCountFilters4,
        PostV2TracesSessionsCountFilters5,
        PostV2TracesSessionsCountFilters8,
        PostV2TracesSessionsCountFilters6,
        PostV2TracesSessionsCountFilters7,
        PostV2TracesSessionsCountFilters1,
        PostV2TracesSessionsCountFilters2,
    ],
)


class PostV2TracesSessionsCountQueryTypedDict(TypedDict):
    operator: PostV2TracesSessionsCountOperator
    search: NotRequired[str]
    filters: NotRequired[List[PostV2TracesSessionsCountFiltersTypedDict]]


class PostV2TracesSessionsCountQuery(BaseModel):
    operator: PostV2TracesSessionsCountOperator

    search: Optional[str] = None

    filters: Optional[List[PostV2TracesSessionsCountFilters]] = None


PostV2TracesSessionsCountFiltersRequestRequestBody4Type = Literal["string_array"]

PostV2TracesSessionsCountFiltersRequestRequestBody4Operator = Literal["in"]


class PostV2TracesSessionsCountFiltersRequest4TypedDict(TypedDict):
    type: PostV2TracesSessionsCountFiltersRequestRequestBody4Type
    operator: PostV2TracesSessionsCountFiltersRequestRequestBody4Operator
    values: List[str]
    path: str


class PostV2TracesSessionsCountFiltersRequest4(BaseModel):
    type: PostV2TracesSessionsCountFiltersRequestRequestBody4Type

    operator: PostV2TracesSessionsCountFiltersRequestRequestBody4Operator

    values: List[str]

    path: str


PostV2TracesSessionsCountFiltersRequestRequestBody3Type = Literal["string"]

PostV2TracesSessionsCountFiltersRequestRequestBody3Operator = Literal[
    "contains", "equals"
]


class PostV2TracesSessionsCountFiltersRequest3TypedDict(TypedDict):
    type: PostV2TracesSessionsCountFiltersRequestRequestBody3Type
    operator: PostV2TracesSessionsCountFiltersRequestRequestBody3Operator
    value: str
    path: str


class PostV2TracesSessionsCountFiltersRequest3(BaseModel):
    type: PostV2TracesSessionsCountFiltersRequestRequestBody3Type

    operator: PostV2TracesSessionsCountFiltersRequestRequestBody3Operator

    value: str

    path: str


PostV2TracesSessionsCountFiltersRequestRequestBody2Type = Literal["search"]


class PostV2TracesSessionsCountFiltersRequest2TypedDict(TypedDict):
    type: PostV2TracesSessionsCountFiltersRequestRequestBody2Type
    value: str
    search_paths: List[str]


class PostV2TracesSessionsCountFiltersRequest2(BaseModel):
    type: PostV2TracesSessionsCountFiltersRequestRequestBody2Type

    value: str

    search_paths: Annotated[List[str], pydantic.Field(alias="searchPaths")]


PostV2TracesSessionsCountFiltersRequestRequestBody1Type = Literal["id"]


class PostV2TracesSessionsCountFiltersRequest1TypedDict(TypedDict):
    type: PostV2TracesSessionsCountFiltersRequestRequestBody1Type
    id: str
    path: str


class PostV2TracesSessionsCountFiltersRequest1(BaseModel):
    type: PostV2TracesSessionsCountFiltersRequestRequestBody1Type

    id: str

    path: str


PostV2TracesSessionsCountRequestFiltersTypedDict = TypeAliasType(
    "PostV2TracesSessionsCountRequestFiltersTypedDict",
    Union[
        PostV2TracesSessionsCountFiltersRequest1TypedDict,
        PostV2TracesSessionsCountFiltersRequest2TypedDict,
        PostV2TracesSessionsCountFiltersRequest3TypedDict,
        PostV2TracesSessionsCountFiltersRequest4TypedDict,
    ],
)


PostV2TracesSessionsCountRequestFilters = TypeAliasType(
    "PostV2TracesSessionsCountRequestFilters",
    Union[
        PostV2TracesSessionsCountFiltersRequest1,
        PostV2TracesSessionsCountFiltersRequest2,
        PostV2TracesSessionsCountFiltersRequest3,
        PostV2TracesSessionsCountFiltersRequest4,
    ],
)


class PostV2TracesSessionsCountRequestBodyTypedDict(TypedDict):
    filters: List[PostV2TracesSessionsCountRequestFiltersTypedDict]
    pagination: NotRequired[PostV2TracesSessionsCountPaginationTypedDict]
    sorting_props: NotRequired[List[PostV2TracesSessionsCountSortingPropsTypedDict]]
    query: NotRequired[PostV2TracesSessionsCountQueryTypedDict]
    included_fields: NotRequired[Dict[str, str]]


class PostV2TracesSessionsCountRequestBody(BaseModel):
    filters: List[PostV2TracesSessionsCountRequestFilters]

    pagination: Optional[PostV2TracesSessionsCountPagination] = None

    sorting_props: Annotated[
        Optional[List[PostV2TracesSessionsCountSortingProps]],
        pydantic.Field(alias="sortingProps"),
    ] = None

    query: Optional[PostV2TracesSessionsCountQuery] = None

    included_fields: Annotated[
        Optional[Dict[str, str]], pydantic.Field(alias="includedFields")
    ] = None


class PostV2TracesSessionsCountResponseBodyTypedDict(TypedDict):
    r"""Sessions count"""

    count: float


class PostV2TracesSessionsCountResponseBody(BaseModel):
    r"""Sessions count"""

    count: float
